.. _java-upgrade-driver:

=======================
Upgrade Driver Versions
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


Overview
--------

In this section, you can identify the changes you need to make to your
application to upgrade your driver to a new version or to transition from
the legacy API to the current API.

When you upgrade your driver version or use multiple versions of the
driver, if there are any breaking changes between the two versions that you
have not addressed in the :ref:`Breaking Changes <java-breaking-changes>`
section, you may encounter one or more of the following issues:

- Your application may not compile.
- Your application may not be compatible with data that originated from an
  application that uses another version of the driver.

.. note::

   Before upgrading driver versions, check the :ref:`Java Compatibility <java-compatibility-tables>`
   page to ensure the new version is compatible with the version of MongoDB as
   well as the version of the Java Runtime Environment (JRE) your application
   runs on.

When you transition from the legacy API to the current API, if you use any
of the methods or classes listed in the :ref:`Upgrade from the Legacy API <java-upgrade-from-legacy>`
section, you need to update them to use the current methods or classes before
removing the legacy API from your dependencies.

In addition to updating your application to handle any necessary changes,
always check for any other differences in options and return values before
moving it to production.

.. tip::

   To minimize the amount of changes your application may need when
   upgrading driver versions in the future, use the
   :ref:`{+stable-api+} <stable-api-java>`.

.. _java-breaking-changes:

Breaking Changes
----------------

The breaking changes in this section are categorized by the driver version that
introduced them.

If you are either upgrading the driver versin in your application or plan
to run multiple applciations that use different driver versions, address
any of the breaking changes between the two versions. For example, if you
are upgrading the driver from v4.0 to v4.5, address all breaking changes from
the version after v4.0 including any listed under v4.5.

.. _java-breaking-changes-v4.2:

Version 4.2 Breaking Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The ``ObjectId`` class and associated ``serialVersionUID`` were updated
  to use a new format that minimizes serialization compatibility issues
  across different versions of the driver.

  Any objects that include an ``ObjectId`` field that were serialized with an
  older version of the driver are not deserializable by this driver version
  and later. When the driver encounters an incompatible format, it throws an
  exception.

.. _java-upgrade-from-legacy:

Upgrade from the Legacy API
---------------------------

In order to upgrade from the legacy API, packaged as the ``driver-legacy``
JAR, to the current API, packaged as the ``driver-sync`` JAR, you must
update the following references to classes and methods:

.. list-table::
   :header-rows: 1
   :widths: 50 50
   :class: compatibility-large

   * - Legacy
     - Current

   * - `MongoClientOptions <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClientOptions.html>`__
     - `MongoClientSettings <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`__

   * - `new MongoClient() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html>`__
     - `MongoClients.create() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClients.html#create()>`__

   * - `MongoClient.getDB() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html#getDB(java.lang.String)>`__
     - `MongoClient.getDatabase() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html#getDatabase(java.lang.String)>`__

   * - `DB <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DB.html>`__
     - `MongoDatabase <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html>`__

   * - `DBCollection <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html>`__
     - `MongoCollection<> <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html>`__

   * - `DBCursor <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCursor.html>`__
     - `MongoCursor <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html>`__

   * - `DBCollection.findOne() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#findOne()>`__
     - | ``MongoCollection.find().first()``
       |
       | See the following API documentation pages for these methods:

       - `find() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find()>`__
       - `first() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#first()>`__

   * - `DBCollection.insert() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#insert(com.mongodb.DBObject...)>`__
     - Use one of the following methods:

       - `MongoCollection.insertOne() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertOne(TDocument)>`__
       - `MongoCollection.insertMany() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertMany(java.util.List)>`__

   * - `DBCollection.update() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#update(com.mongodb.DBObject,com.mongodb.DBObject)>`__
     - Use one of the following methods:

       - `MongoCollection.updateOne() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/result/UpdateResult.html>`__
       - `MongoCollection.updateMany() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/result/UpdateResult.html>`__

   * - `DBCollection.remove() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#remove(com.mongodb.DBObject)>`__
     - Use one of the following methods:

       - `MongoCollection.deleteOne() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#deleteOne(org.bson.conversions.Bson)>`__
       - `MongoCollection.deleteMany() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#deleteMany(org.bson.conversions.Bson)>`__

   * - `DBCollection.count() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#count()>`__
     - Use one of the following methods:

       - `MongoCollection.countDocuments() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#countDocuments()>`__
       - `MongoCollection.estimatedDocumentCount() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#estimatedDocumentCount()>`__

   * - `DBCollection.findAndModify() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#findAndModify(com.mongodb.DBObject,com.mongodb.client.model.DBCollectionFindAndModifyOptions)>`__
     - Use one of the following methods:

       - `MongoCollection.findOneAndUpdate() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndUpdate(org.bson.conversions.Bson,org.bson.conversions.Bson)>`__
       - `MongoCollection.findOneAndReplace() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndReplace(org.bson.conversions.Bson,TDocument)>`__
       - `MongoCollection.findOneAndDelete() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndDelete(org.bson.conversions.Bson)>`__


