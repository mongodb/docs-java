.. _java-frameworks-integrations:

============
Integrations
============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: java sync, framework

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

On this page, you can learn about the tools and frameworks available for integration
with the {+driver-short+}.

Spring Data MongoDB
-------------------

- Spring is application framework for Java
- Spring framework: used by Java developers, with Spring Boot, to quickly make microservices,
  web applications
- Combining Spring and Mongodb: build a full Spring app that's fast, reliable, reduced
  development time
- Spring Boot has built in security features
- Spring Boot is built on top of Spring and has four layers: presentation, business (for logic),
  persistence (translate objects), database
- Spring offers connectors to perform database operations with MDB
- link to the tutorial: https://www.mongodb.com/compatibility/spring-boot 
- Spring Data: umbrella project, provides a Spring-based programming model for accessing
  data
- Spring Data makes it easy to access relational (and non-relational) database services like
  MongoDB
- Features of Spring Data MongoDB: MongoTemplate helper class, annotation-driven object mapper,
  encryption, support for multi-document transactions, lifecycle events, etc

Quarkus
-------

- Quarkus: another Java framework that's similar to Spring, but additional promises
  (deliver smaller artifacts, improved resource usage, efficiency)
- created to allow Java devs to make applications in cloud-based world
- frictionless development experience due to tools, libraries, extensions offered
- provides full stack framework by leveraging hundreds of libraries
- created to combine traditional, imperative style code as well as non-blocking, reactive style;
  as a result the Quarkus development model is highly adaptive to the developer/app
- To use with MongoDB: add an extension (quarkus-mongodb-panache) which is an ODM that
  wraps the MongoDB client extension and the Java driver
- best for cloud, serverless, containerized environments
- Different from Spring Boot because it allows you to use blocking and non-blocking strategies
  at same time
- Link to tutorial: https://quarkus.io/guides/mongodb

GraalVM
-------

- GraalVM is full-scale JDK distrubution that makes Java apps run faster with its 
  ahead of time compiler, Graal
- lots of companies run large JAva apps on GraalVM JDK to improve performance, lower
  resource use, lower cost of deployment
- compiles Java code before runtime into standalone binaries
- this allows peak performance without warmup time and uses fewer resources
- perks: apps compiled ahead of time need less memory/CPU, so apps need less resources
  and are cheaper large-scale
- apps are also smaller, you can package into lightweight container images
- security: excludes unreachable code, compilation infrastructure, etc from binary, which
  reduces attack surface of Java app

Micronaut
---------

- Micronaut framework: JVM based full stack Java framework that allows you to
  create modular and easily testable JVM apps
- Aims to offer all necessary tools for building JVM apps: dependency injection, aspect
  oriented programming, sensible defaults and auto-configuration
- use Micronaut to create message-driven apps, http routing, client-side load balancing
- fast startup time, reduced memory footprint, easy unit testing, etc
- uses annotation processors
- many APIS in Micronaut framework inspired by Spring
