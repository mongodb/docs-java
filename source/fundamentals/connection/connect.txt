.. _connect-to-mongodb:

==================
Connect to MongoDB
==================

In this guide, you can learn how to connect to a MongoDB instance or
replica set using the Java driver.

You can view sample code to :ref:`connect to an Atlas cluster <connect-atlas-java-driver>`
or continue reading to learn more about the ``MongoClient`` class and
connection URIs.

.. _mongoclient:

MongoClient
-----------

You can connect to and communicate with MongoDB using the ``MongoClient``
class.

Use the ``MongoClients.create()`` method to construct a ``MongoClient``. As
each ``MongoClient`` represents a thread-safe pool of connections to the
database, most applications only require a single instance of a
``MongoClient``, even across multiple threads. All resource usage limits,
such as max connections, apply to individual ``MongoClient`` instances.

To learn about the different settings you can use to control the
behavior of your ``MongoClient``, see the guide on
:ref:`<mongoclientsettings>`.

.. tip::

   Always call ``MongoClient.close()`` to clean up resources when an
   instance is no longer needed.

.. _connection-uri:

Connection URI
--------------

The **connection URI** provides a set of instructions that the driver uses to
connect to a MongoDB deployment. It instructs the driver on how it should
connect to MongoDB and how it should behave while connected. The following
figure explains each part of a sample connection URI:

.. figure:: /includes/figures/connection_uri_parts.png
   :alt: Connection String parts figure

This figure uses the :manual:`Standard Connection String Format </reference/connection-string/#std-label-connections-standard-connection-string-format>`,
``mongodb`` for the protocol. You can also use the :manual:`DNS Seed List Connection Format </reference/connection-string/#dns-seed-list-connection-format>`,
``mongodb+srv``, if you want more flexibility of deployment and the ability
to change the servers in rotation without reconfiguring clients.

.. note::

   If your deployment is on MongoDB Atlas, see the
   :atlas:`Atlas driver connection guide </driver-connection?jmp=docs_driver_java>`
   and select Java from the language dropdown to retrieve your connection
   string.

The next part of the connection URI contains your credentials if you are
using a password-based authentication mechanism. Replace the value of ``user``
with your username and ``pass`` with your password. If your
authentication mechanism does not require credentials, omit this part of
the connection URI.

The next part of the connection URI specifies the hostname or IP
address, followed by the port of your MongoDB instance. In the example,
``sample.host`` represents the hostname and ``27017`` is the port number.
Replace these values to refer to your MongoDB instance.

The last part of the connection URI contains connection options as parameters.
In the example, we set two connection options: ``maxPoolSize=20`` and
``w=majority``. For more information on connection options, skip to the
:ref:`connection-options` section of this guide.

.. _connect-atlas-java-driver:

The following code shows how you can use the sample connection URI in a client
to connect to MongoDB.

.. literalinclude:: /includes/fundamentals/code-snippets/srv.java
   :language: java
   :emphasize-lines: 17

.. _java-other-ways-to-connect:

Other Ways to Connect to MongoDB
--------------------------------

If you are connecting to a single MongoDB server instance or replica set
that is not hosted on Atlas, see the following sections to find out how to
connect.

.. _connect-local-java-driver:

Connect to a MongoDB Server on Your Local Machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fundamentals/localhost-connection.rst

To test whether you can connect to your server, replace the connection
string in the :ref:`Connect to MongoDB Atlas <connect-atlas-java-driver>` code
example and run it.

.. _connect-replica-set:

Connect to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~

A MongoDB replica set deployment is a group of connected instances that
store the same set of data. This configuration of instances provides data
redundancy and high data availability.

To connect to a replica set deployment, specify the hostnames (or IP
addresses) and port numbers of the members of the replica set. 

If you are not able to provide a full list of hosts in the replica set,
you can specify a single or subset of the hosts in the replica and
instruct the driver to perform automatic discovery in one of the following
ways:

- Specify the name of the replica set as the value of the ``replicaSet``
  parameter
- Specify ``false`` as the value of the ``directConnection`` parameter
- Specify more than one host in the replica set

.. tip::

   Although you can specify a subset of the hosts in a replica set,
   include all the hosts in the replica set to ensure the driver is able to 
   establish the connection if one of the hosts are unreachable.
   
.. _mongo-client-settings-multiple-hosts:

The following examples show how to specify multiple hosts to a ``MongoClient``
instance using either the ``ConnectionString`` or ``MongoClientSettings`` 
class. Select the tab that corresponds to your preferred class.

.. tabs::

   .. tab:: ConnectionString
      :tabid: connectionstring

      .. code-block:: java

         ConnectionString connectionString = new ConnectionString("mongodb://host1:27017,host2:27017,host3:27017/");
         MongoClient mongoClient = MongoClients.create(connectionString);

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      .. code-block:: java

         ServerAddress seed1 = new ServerAddress("host1", 27017);
         ServerAddress seed2 = new ServerAddress("host2", 27017);
         ServerAddress seed3 = new ServerAddress("host3", 27017);
         MongoClientSettings settings = MongoClientSettings.builder()
                 .applyToClusterSettings(builder ->
                        builder.hosts(Arrays.asList(seed1, seed2, seed3)))
                 .build();
         MongoClient mongoClient = MongoClients.create(settings);

