=================
Connection Storms
=================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _connection-storms-java:

Overview
--------

In this guide, you can learn about **connection storms**, common causes,
and how to avoid them.

A **connection storm** is a race condition in which application servers
start an increasing number of connection requests, but the host server
CPU is unable to schedule them.

.. example::

   Consider popular streaming events such as the World Cup or the Super
   Bowl. Should the stream become unresponsive and all connected clients
   (viewers) refresh their browser, the streaming host would receive a
   new connection request for every connected client. This could
   result in millions of requests per second, overloading the host
   server's CPU.


Common causes for connection storms in MongoDB include:

- Incorrect application behavior
- Network latency
- Insufficient hardware for the workload
- Failover events

In MongoDB, connection storms can have a cascading effect. For example:

#. The high volume of connection requests leads to latency in processing.
#. Replication connections between nodes are blocked or slowed, so replication
operations cannot proceed.
#. Administrative connections to the database are blocked, preventing
a user from logging in.
#. Monitoring connections to the database are blocked, degrading visibility
into the problem.
#. CPU or memory oversubscription due to connection management can lead
to a ``mongod`` crashing and restarting. This extra workload on the server
can be exclusively attributed to connection handling.
#. In Atlas, connection requests can exceed instance class limits, causing
refusal of new connections.

Avoiding Connection Storms
--------------------------

A combination of settings can help to mitigate connection storms. These
include:

- **maxConnecting**: The maximum number of connections that can be
  established concurrently.

- **socketTimeoutMS**: The maximum time, in milliseconds, that a socket
  can remain idle before being closed.

- **maxTimeMS**: The *cumulative* time limit for processing operations on
  a cursor.

**maxConnecting**
+++++++++++++++++

``maxConnecting`` specifies the number of concurrent connection requests
the driver can initiate. The default is 2.

This is not to be confused with ``maxPoolSize``, which specifies the maximum
number of connections that the driver maintains in the connection pool.

.. example::

   Consider a new application instance connecting to a MongoDB server, using
   the default values of **2** for ``maxConnecting`` and **100** for ``maxPoolSize``.
   If it takes ~50 milliseconds to establish a connection, the connection pool
   would take 2.5 seconds (50 milliseconds [latency] * 100 [``maxPoolSize``] / 2 [``maxConnecting``])
   to fill. This example is simplified and assumes that the latency is constant.


**socketTimeoutMS**
+++++++++++++++++++

``socketTimeoutMS`` specifies the maximum time, in milliseconds, that a
socket stays inactive before being closed. The default is **0**, meaning
no timeout and relying on the underlying system default for socket timeout.

Setting this to a value that is too low results in **connection thrashing**,
where the socket is closed and removed from the connection pool, and a new
connection is initiated.

.. warning:: Not for Aborting Operations

   Some users have incorrectly used this option to try to abort operations
   which run for too long and slow down other operations. Closing a socket
   forces a reconnect, which slows all operations, and does not have any
   impact on the operation that the developer is attempting to abort. MongoDB will continue
   to process the operation, potentially causing errors if the driver attempts to
   retry the operation.

**maxTimeMS**
+++++++++++++

``maxTimeMS`` specifies the *cumulative* time limit for processing operations
in MongoDB. If an operation exceeds this limit, MongoDB will terminate the
operation.

.. tip:: Use ``maxTimeMS``

   Use ``maxTimeMS`` to limit operation execution time. Do not use ``socketTimeoutMS``.

   Tip content



