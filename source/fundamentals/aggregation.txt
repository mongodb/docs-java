===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. _java-aggregation:

In this guide, you can learn how to use **aggregation operations** in the MongoDB Java driver.

Aggregation operations process data in your MongoDB collections and return computed results. MongoDB's Aggregation
framework is modeled on the concept of data processing pipelines. Documents enter a multi-staged pipeline that
transforms the documents into an aggregated result.

Another way to think of aggregation is like a car factory. Within the car factory is an assembly line, along which
are assembly stations with specialized tools to do a specific job, like drills and welders. Raw parts enter the factory,
which are then transformed and assembled into a finished product.

The **aggregation pipeline** is the assembly line, **aggregation stages** are the assembly stations, and
**operator expressions** are the specialized tools.

Aggregation and Find Operations Compared
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using ``find`` operations, you can:

- select *what* documents to return
- select *what* fields to return
- sort the results

Using ``aggregation`` operations, you can:

- perform all ``find`` operations
- rename fields
- calculate fields
- summarize data
- group values

Aggregation operations have some :manual:`limitations </core/aggregation-pipeline-limits/>` you must keep in mind:

- Returned documents must not violate the :manual:`BSON document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required, you may exceed this limit by using
  the :java-docs:`allowDiskUse <apidocs/mongodb-driver-sync/com/mongodb/client/AggregateIterable.html#allowDiskUse(java.lang.Boolean)>`
  method.

  .. important:: ``$graphLookup`` exception

     The :manual:`$graphLookup </reference/operator/aggregation/graphLookup/>` stage has a strict memory limit of 100 megabytes
     and will ignore ``allowDiskUse``.

Useful References
~~~~~~~~~~~~~~~~~

- :manual:`Aggregation pipeline </core/aggregation-pipeline/>`
- :manual:`Aggregation stages </meta/aggregation-quick-reference/#stages>`
- :manual:`Operator expressions </meta/aggregation-quick-reference/#operator-expressions>`
- :ref:`Aggregation Builders <aggregates-builders>`

Runnable Examples
-----------------

Base Setup
~~~~~~~~~~

Create a new Java file called ``AggTour.java`` and include the following import statements:

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin imports
   :end-before: end imports


Connect to a MongoDB Deployment
+++++++++++++++++++++++++++++++

.. code-block:: java

   public class AggTour {

       public static void main(String[] args) {
           // Replace the uri string with your MongoDB deployment's connection string
           String uri = "mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&w=majority";

           MongoClient mongoClient = MongoClients.create(uri);
           MongoDatabase database = mongoClient.getDatabase("aggregation");
           MongoCollection<Document> collection = database.getCollection("restaurants");

           // aggregation here
       }
   }

.. tip::

   For information on connecting to MongoDB, see the :ref:`Connection Guide <mongoclient>`

Insert the Data
+++++++++++++++

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin insert
   :end-before: end insert

Basic Aggregation Example
~~~~~~~~~~~~~~~~~~~~~~~~~

To perform an aggregation, pass a list of aggregation stages to the 
``MongoCollection.aggregate()`` method.

The Java driver provides the 
:java-docs:`Aggregates <apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html>`
helper class that contains builders for aggregation stages.

In the following example, the aggregation pipeline:

- Uses a :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents whose
  ``categories`` array field contains the element ``Bakery``. The example uses
  ``Aggregates.match`` to build the ``$match`` stage.

- Uses a :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching documents by the ``stars``
  field, accumulating a count of documents for each distinct value of ``stars``.

.. note::

   You can build the expressions used in this example using the :ref:`aggregation builders <aggregates-builders>`.

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin aggregation one
   :end-before: end aggregation one

The above aggregation should produce the following results:

.. code-block:: none
   :copyable: false

   {"_id": 4, "count": 2}
   {"_id": 5, "count": 1}

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- :java-docs:`MongoCollection.aggregate() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#aggregate(java.util.List)>`
- :java-docs:`Aggregates.match <apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html#match(org.bson.conversions.Bson)>`

Explain Aggregation Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To view information about how MongoDB executes your operation, use the
``explain()`` method of the ``AggregateIterable`` class. The ``explain()``
method returns **execution plans** and performance statistics. An execution
plan is a potential way MongoDB can complete an operation. 
The ``explain()`` method provides both the winning plan (the plan MongoDB
executed) and rejected plans. 

.. include:: /includes/fundamentals/explain-verbosity.rst

In the following example, we print the JSON representation of the
winning plan for aggregation stages that produce execution plans: 

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin aggregation three
   :end-before: end aggregation three

The above code snippet should produce the following output:

.. code-block:: none
   :copyable: false

   { "stage": "PROJECTION_SIMPLE", 
     "transformBy": {"stars": 1, "_id": 0},
     "inputStage": {
      "stage": "COLLSCAN", 
      "filter": {
         "categories": {"$eq":"bakery"}}, 
     "direction": "forward"}} 

For more information about the topics mentioned in this section, see the
following resources:

- :manual:`Explain Output </reference/explain-results/>` Server Manual Entry
- :manual:`Query Plans </core/query-plans/>` Server Manual Entry
- :java-docs:`ExplainVerbosity <apidocs/mongodb-driver-core/com/mongodb/ExplainVerbosity>` API Documentation
- :java-docs:`explain() <apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#explain()>` API Documentation
- :java-docs:`AggregateIterable <apidocs/mongodb-driver-sync/com/mongodb/client/AggregateIterable.html>` API Documentation

Aggregation Expression Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Java driver provides builders for accumulator expressions for use with 
``$group``. You must declare all other expressions in JSON format or
compatible document format.

.. tip::

   The syntax in either of the following examples will define an :manual:`$arrayElemAt </reference/operator/aggregation/arrayElemAt/>`
   expression.

   The ``$`` in front of "categories" tells MongoDB that this is a :manual:`field path </meta/aggregation-quick-reference/#expressions>`,
   using the "categories" field from the input document.

   .. code-block:: java
      :copyable: false

      new Document("$arrayElemAt", Arrays.asList("$categories", 0))

   .. code-block:: java
      :copyable: false

      Document.parse("{ $arrayElemAt: ['$categories', 0] }")

In the following example, the aggregation pipeline uses a
``$project`` stage and various ``Projections`` to return the ``name``
field and the calculated field ``firstCategory`` whose value is the
first element in the ``categories`` field.

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin aggregation two
   :end-before: end aggregation two

The above aggregation should produce the following results:

.. code-block:: none
   :copyable: false

   {"name": "456 Cookies Shop", "firstCategory": "Bakery"}
   {"name": "Sun Bakery Trattoria", "firstCategory": "Pizza"}
   {"name": "456 Steak Restaurant", "firstCategory": "Steak"}
   {"name": "Blue Bagels Grill", "firstCategory": "Bagels"}
   {"name": "XYZ Steak Buffet", "firstCategory": "Steak"}
   {"name": "Hot Bakery Cafe", "firstCategory": "Bakery"}
   {"name": "Green Feast Pizzeria", "firstCategory": "Pizza"}
   {"name": "ZZZ Pasta Buffet", "firstCategory": "Pasta"}
   {"name": "XYZ Coffee Bar", "firstCategory": "Coffee"}
   {"name": "XYZ Bagels Restaurant", "firstCategory": "Bagels"}

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- :java-docs:`Accumulators <apidocs/mongodb-driver-core/com/mongodb/client/model/Accumulators.html>`
- :java-docs:`$group <apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html#group(TExpression,java.util.List)>`
- :java-docs:`$project <apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html#project(org.bson.conversions.Bson)>`
- :java-docs:`Projections <apidocs/mongodb-driver-core/com/mongodb/client/model/Projections.html>`
