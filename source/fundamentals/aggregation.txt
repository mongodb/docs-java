===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Aggregation operations process data in your MongoDB collections and return computed results. MongoDB's Aggregation
framework is modeled on the concept of data processing pipelines. Documents enter a multi-staged pipeline that
transforms the documents into an aggregated result.

Another way to think of aggregation is like a car factory. Within the car factory is an assembly line, along which
are assembly stations with specialized tools to do a specific job, like drills and welders. Raw parts enter the factory,
which are then transformed and assembled into a finished product.

The **aggregation pipeline** is the assembly line, **aggregation stages** are the assembly stations, and
**operator expressions** are the specialized tools.

Aggregation and Find Operations Compared
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using ``find`` operations, you can:

- select *what* documents to return
- select *what* fields to return
- sort the results

Using ``aggregation`` operations, you can:

- perform all ``find`` operations
- rename fields
- calculate fields
- summarize data
- group values

Aggregation operations have some :manual:`limitations <core/aggregation-pipeline-limits/>` you must keep in mind:

- Returned documents must not violate the :manual:`BSON document size limit </reference/limits/#BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required, you may exceed this limit by using
  the `allowDiskUse <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-sync/com/mongodb/client/AggregateIterable.html#allowDiskUse(java.lang.Boolean)>`__
  method.

  .. important:: ``$graphLookup`` exception

     The :manual:`$graphLookup </operator/aggregation/graphLookup/>` stage has a strict memory limit of 100 megabytes
     and will ignore ``allowDiskUse``.


Illustrated Example
~~~~~~~~~~~~~~~~~~~

In the following animation, every document in the collection enters the pipeline and is first filtered by
the ``$match`` stage. In this example, the stage selectively matches documents that are either "red" or "blue",
filtering "green" documents out. The documents continue flowing through the pipeline and enter the ``$project`` stage,
which transforms them from squares to circles. Lastly, the documents flow into the ``$group`` stage, configured to
produce the ratio of red to blue circles.

.. figure:: /figures/agg_factory.gif
   :border:
   :alt: Animation showing how the aggregation pipeline works, conceptually.


Using the **Aggregation builders** API, the same operation may look something like:

.. literalinclude:: /includes/fundamentals/code-snippets/AggFactory.java
   :language: java
   :copyable: false
   :dedent:
   :start-after: begin aggregation
   :end-before: end aggregation

Which will produce output similar to the following:

.. code-block:: none
   :copyable: false

   {"_id": 0, "red": 3, "blue": 2}

Useful Links
~~~~~~~~~~~~

- :manual:`Aggregation pipeline </core/aggregation-pipeline/>`
- :manual:`Aggregation stages </meta/aggregation-quick-reference/#stages>`
- :manual:`Operator expressions </meta/aggregation-quick-reference/#operator-expressions>`
- :ref:`Aggregation Builders <aggregates-builders>`

Runnable Examples
-----------------

Base Setup
~~~~~~~~~~

Create a new Java file called ``AggTour.java`` and include the following import statements:

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin imports
   :end-before: end imports


Connect to a MongoDB Deployment
+++++++++++++++++++++++++++++++

.. code-block:: java

   public class AggTour {

       public static void main(String[] args) {
           // Replace the uri string with your MongoDB deployment's connection string
           String uri = "mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&w=majority";

           MongoClient mongoClient = MongoClients.create(uri);
           MongoDatabase database = mongoClient.getDatabase("aggregation");
           MongoCollection<Document> collection = database.getCollection("restaurants");

           // aggregation here
       }
   }

.. tip::

   For information on connecting to MongoDB, see the :ref:`Connection Guide <mongoclient>`

Insert the Data
+++++++++++++++

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin insert
   :end-before: end insert

Basic Aggregation Example
~~~~~~~~~~~~~~~~~~~~~~~~~

To perform an aggregation, pass a list of aggregation stages to the `MongoCollection.aggregate() <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/client/MongoCollection.html#aggregate(com.mongodb.client.ClientSession,java.util.List,java.lang.Class)>`__
method.

The Java driver provides the `Aggregates <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html>`__
helper class that
contains builders for aggregation stages.

In the following example, the aggregation pipeline:

- Uses a :manual:`$match <reference/operator/aggregation/match/>` stage to filter for documents whose
  ``categories`` array field contains the element ``Bakery``. The example uses
  `Aggregates.match <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html#match(org.bson.conversions.Bson)>`__
  to build the ``$match`` stage.

- Uses a :manual:`$group <reference/operator/aggregation/group/>` stage to group the matching documents by the ``stars``
  field, accumulating a count of documents for each distinct value of ``stars``.

.. note::

   You can build the expressions used in this example using the :ref:`aggregation builders <aggregates-builders>`.

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin aggregation one
   :end-before: end aggregation one

The above aggregation should produce the following results:

.. code-block:: none
   :copyable: false

   {"_id": 4, "count": 2}
   {"_id": 5, "count": 1}

Aggregation Expression Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Java driver provides builders for :java-sync-api:`accumulator expressions<com/mongodb/client/model/Accumulators.html>`
for use with :java-sync-api:`$group <com/mongodb/client/model/Aggregates.html#group(TExpression,java.util.List)>`. You
must declare all other expressions in JSON format or compatible document format.

.. tip::

   The syntax in either of the following examples will define an :manual:`$arrayElemAt </reference/operator/aggregation/arrayElemAt/>`
   expression.

   The ``$`` in front of "categories" tells MongoDB that this is a :manual:`field path </meta/aggregation-quick-reference/#expressions>`,
   using the "categories" field from the input document.

   .. code-block:: java
      :copyable: false

      new Document("$arrayElemAt", Arrays.asList("$categories", 0))

   .. code-block:: java
      :copyable: false

      Document.parse("{ $arrayElemAt: ['$categories', 0] }")

In the following example, the aggregation pipeline uses a
`$project <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html#project(org.bson.conversions.Bson)>`__
stage and various
`Projections <https://mongodb.github.io/mongo-java-driver/4.2/apidocs/mongodb-driver-core/com/mongodb/client/model/Projections.html>`__
to return the ``name`` field and the calculated field ``firstCategory`` whose value is the first element in the
``categories`` field.

.. literalinclude:: /includes/fundamentals/code-snippets/AggTour.java
   :language: java
   :dedent:
   :start-after: begin aggregation two
   :end-before: end aggregation two


The above aggregation should produce the following results:

.. code-block:: none
   :copyable: false

   {"name": "456 Cookies Shop", "firstCategory": "Bakery"}
   {"name": "Sun Bakery Trattoria", "firstCategory": "Pizza"}
   {"name": "456 Steak Restaurant", "firstCategory": "Steak"}
   {"name": "Blue Bagels Grill", "firstCategory": "Bagels"}
   {"name": "XYZ Steak Buffet", "firstCategory": "Steak"}
   {"name": "Hot Bakery Cafe", "firstCategory": "Bakery"}
   {"name": "Green Feast Pizzeria", "firstCategory": "Pizza"}
   {"name": "ZZZ Pasta Buffet", "firstCategory": "Pasta"}
   {"name": "XYZ Coffee Bar", "firstCategory": "Coffee"}
   {"name": "XYZ Bagels Restaurant", "firstCategory": "Bagels"}
