.. _fundamentals-records:

=============================
Document Data Format: Records
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to store and retrieve data in the {+driver-long+}
using **Java records**. Java records are a type of Java class often used to
model data and separate business logic from data representation.

.. tip::

   You can declare Java records in Java 16 or later. Learn more about the
   functionality and restrictions of records from `Java 17 Language Updates: Record Classes <https://docs.oracle.com/en/java/javase/17/language/records.html>`__.

   If you are using an earlier version of Java, you can use plain old Java
   objects instead. See the :ref:`<fundamentals-pojos>` guide for
   implementation details.

.. _fundamentals-example-record:

Serialize and Deserialize a Record
----------------------------------

The driver natively supports encoding and decoding Java records for
MongoDB read and write operations using the **default codec registry**. The
default codec registry is a collection of classes called **codecs** that
define how to convert encode and decode Java types.  Learn more about
codecs and the default codec registry in the guide on :ref:`<fundamentals-codecs>`.

Example Record
~~~~~~~~~~~~~~

The code examples in this guide reference the following sample record, which
describes a data storage device:

.. literalinclude:: /includes/fundamentals/code-snippets/records/DataStorageRecord.java
   :language: java
   :start-after: start dataStorageRecord
   :end-before: end dataStorageRecord

Insert a Record
~~~~~~~~~~~~~~~

You can insert a ``DataStorageRecord`` instance as shown in the following code:

.. code-block:: java

   MongoCollection<DataStorageRecord> collection = database.getCollection("data_storage_devices", DataStorageRecord.class);

   // insert the record
   collection.insertOne(new DataStorageRecord("2TB SSD", 1.71));

Retrieve a Record
~~~~~~~~~~~~~~~~~

You can retrieve documents as ``DataStorageRecord`` instances and print them
as shown in the following code:

.. io-code-block::
   :copyable: true

   .. input::
      :language: java

      MongoCollection<DataStorageRecord> collection = database.getCollection("data_storage_devices", DataStorageRecord.class);

      // retrieve and print the records
      List<DataStorageRecord> records = new ArrayList<DataStorageRecord>();
      collection.find().into(records);
      records.forEach(System.out::println);

   .. output::
      :language: none

      DataStorageRecord[productName=1TB SSD, capacity=1.71]

