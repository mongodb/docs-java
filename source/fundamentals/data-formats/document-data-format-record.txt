.. _fundamentals-records:

=============================
Document Data Format: Records
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to store and retrieve data in the {+driver-long+}
using **Java records**. Java records are a type of Java class often used to
model data and separate business logic from data representation.

.. tip::

   You can declare Java records in Java 14 or later. Learn more about the
   functionality and restrictions of records from `Java 14 Language Updates: Records <https://docs.oracle.com/en/java/javase/14/language/records.html>`__.

   If you are using an earlier version of Java, you can use plain old Java
   objects instead. See the :ref:`<fundamentals-pojos>` guide for
   implementation details.

In this guide, you can learn how to perform the following tasks:

- Write data from records into MongoDB.
- Retrieve documents from MongoDB as records.

.. _fundamentals-example-record:

Serialize and Deserialize a Record
----------------------------------

You can provide the driver with instructions on how to serialize and
deserialize Java and MongoDB types using **codecs**. Codecs define how to
encode and decode data between records and MongoDB documents, and to which
classes or packages the codecs apply.

The driver defines methods for the encoding and decoding logic in an interface
called ``Codec``. It automatically includes the ``DefaultCodecRegistry`` which
contains codecs for records and other commonly-used types.

.. tip::

   Learn more about how to create and manage codecs from the guide on
   :ref:`<fundamentals-codecs>`.

Example Record
~~~~~~~~~~~~~~

The code examples in this guide reference the following sample record, which
describes a data storage device:

.. literalinclude:: /includes/fundamentals/code-snippets/records/DataStorageRecord.java
   :language: java
   :start-after: start dataStorageRecord
   :end-before: end dataStorageRecord

Insert a Record
~~~~~~~~~~~~~~~

You can insert a ``DataStorageRecord`` instance as shown in the following code:

.. code-block:: java

   MongoCollection<DataStorageRecord> collection = database.getCollection("data_storage_devices", DataStorageRecord.class);

   // insert the record
   collection.insertOne(new DataStorageRecord("1GB SSD", 8.56));

Retrieve a Record
~~~~~~~~~~~~~~~~~

You can retrieve documents as ``DataStorageRecord`` instances and print them
as shown in the following code:

.. io-code-block::
   :copyable: true

   .. input::
      :language: java

      MongoCollection<DataStorageRecord> collection = database.getCollection("data_storage_devices", DataStorageRecord.class);

      // retrieve and print the records
      List<DataStorageRecord> records = new ArrayList<DataStorageRecord>();
      collection.find().into(records);
      records.forEach(System.out::println);

   .. output::
      :language: none

      DataStorageRecord[productName=1GB SSD, capacity=8.56]

