======
Codecs
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

In this guide, you can learn about Codecs and the supporting classes that
handle the encoding and decoding of Java objects to BSON data in MongoDB.
The Codec abstraction allows you to map types and fields directly to
your domain objects rather than to an intermediate map-based one such
as ``Document`` or ``BsonDocument``.

We describe the following interfaces and classes and provide examples of
how you can specify custom encoding and decoding using them:

- :ref:`Codec <codecs-codec>`
- :ref:`CodecRegistry <codecs-codecregistry>`
- :ref:`CodecProvider <codecs-codecprovider>`
- :ref:`Custom Codec Example <codecs-custom-example>`

If you are customizing encoding and decoding of Java POJOs, read our guide on
:doc:`POJO Customization </fundamentals/data-formats/pojo-customization>`.

.. _codecs-codec:

Codec
-----

The ``Codec`` interface contains abstract methods for serializing and
deserializing Java objects to BSON data. You can define your conversion logic
between BSON and your Java object in your implementation of this interface.

To implement the ``Codec`` interface, override the ``encode()``, ``decode()``,
and ``getEncoderClass()`` abstract methods.

The ``encode()`` method requires the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 10 20

   * - Parameter Type
     - Description

   * - ``writer``
     - An instance of a class that implements ``BsonWriter``, an interface type
       that exposes methods for writing a BSON document. For example, the
       ``BsonBinaryWriter`` implementation writes to a binary stream of data.
       Use this instance to write your BSON value using the appropriate
       write method.

   * - ``value``
     - The data that your implementation encodes. The type must match the type
       variable assigned to your implementation.

   * - ``encoderContext``
     -  Contains meta information about the Java object data that it encodes
        to BSON including whether to store the current value in a
        MongoDB collection.

The ``decode()`` method returns your Java object instance populated with the
value from the BSON data. This method requires the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 10 20

   * - Parameter Type
     - Description

   * - ``bsonReader``
     - An instance of a class that implements ``BsonReader``, an interface type
       that exposes methods for reading a BSON document. For example, the
       ``BsonBinaryReader`` implementation reads from a binary stream of data.

   * - ``decoderContext``
     - Contains information about the BSON data that it decodes to a Java
       object.

The ``getEncoderClass()`` method returns a class instance of the Java class
since Java cannot infer the type due to due to type erasure.

.. _codecs-powerstatus-codec:

See the following ``PowerStatusCodec`` class that implements ``Codec`` in
order to convert the Java ``String`` values "on" and "off" to
corresponding BSON boolean values.

.. literalinclude:: /includes/fundamentals/code-snippets/PowerStatusCodec.java
   :start-after: start PowerStatusCodec class
   :end-before: end PowerStatusCodec class
   :language: java
   :dedent:

You can add an instance of your custom Codec to the ``CodecRegistry`` which
contains a mapping between your ``Codec`` and the Java object type to which
it applies. Continue to the :ref:`CodecRegistry <codecs-codecregistry>`
section of this page to see how you can include your Codec.

For more information about the classes and interfaces in this section, see the
following API documentation:

- :java-docs:`Codec <apidocs/bson/org/bson/codecs/Codec.html>`
- :java-docs:`Decoder <apidocs/bson/org/bson/codecs/Decoder.html>`
- :java-docs:`Encoder <apidocs/bson/org/bson/codecs/Encoder.html>`
- :java-docs:`BsonWriter <apidocs/bson/org/bson/BsonWriter.html>`
- :java-docs:`BsonBinaryWriter <apidocs/bson/org/bson/BsonBinaryWriter.html>`
- :java-docs:`EncoderContext <apidocs/bson/org/bson/codecs/EncoderContext.html>`
- :java-docs:`BsonReader <apidocs/bson/org/bson/BsonReader.html>`
- :java-docs:`DecoderContext <apidocs/bson/org/bson/codecs/DecoderContext.html>`
- :java-docs:`BsonBinaryReader <apidocs/bson/org/bson/BsonBinaryReader.html>`

- Description
  - Relationship between Codec, CodecRegistry, and CodecProvider

.. _codecs-codecregistry:

CodecRegistry
-------------

A ``CodecRegistry`` is an immutable collection of ``Codec`` instances that
encode and decode the Java classes they specify. You can use any of the
following ``CodecRegistries`` class static factory methods to construct a
``CodecRegistry`` from the ``Codec`` instances contained in the associated
types:

- ``fromCodecs()``
- ``fromProviders()``
- ``fromRegistries()``

The following code snippet shows how to construct a ``CodecRegistry`` using
the ``fromCodecs()`` method:

.. code-block:: java
   :copyable: true

   CodecRegistry codecRegistry = CodecRegistries.fromCodecs(new IntegerCodec(), new PowerStatusCodec());

In the example above, we assign the ``CodecRegistry`` the following ``Codec``
implementations:

- :java-docs:`IntegerCodec </apidocs/bson/org/bson/codecs/IntegerCodec.html>`,
  a ``Codec`` that converts Integers and is part of the BSON package.
- :ref:`PowerStatusCodec <codecs-powerstatus-codec>`, our sample ``Codec``
  that converts certain Java strings to BSON booleans.

You can retrieve the Codecs from the ``CodecRegistry`` instance from the
prior example using the following code:

.. code-block:: java
   :copyable: true

   Codec<String> powerStatus = codecRegistry.get(String.class);
   Codec<Integer> integerCodec = codecRegistry.get(Integer.class);

If you attempt to retrieve a ``Codec`` instance for a class that is not
registered, the ``get()`` method throws a ``CodecConfigurationException``
exception.

For more information about the classes and interfaces in this section, see the
following API documentation:

- :java-docs:`CodecRegistries </apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html>`
- :java-docs:`IntegerCodec </apidocs/bson/org/bson/codecs/IntegerCodec.html>`

.. _codecs-codecprovider:

CodecProvider
-------------

A ``CodecProvider`` is an interface that contains abstract methods that create
``Codec`` instances and assign them to a ``CodecRegistry`` instance. Similar
to the ``CodecRegistry``, the BSON library uses the Codecs retrieved by
the ``get()`` method to convert between Java and BSON data types.

However, in cases in which you add a class that contains fields that require
corresponding ``Codec`` instances, you need to ensure you construct the Codecs
for the class' fields prior to the ``Codec`` for the class. You can use the
``CodecProvider`` to add the Codecs to the registry before the one for which
they are required.

The following code example shows how you can implement ``CodecProvider`` to
instantiate the Codecs on which the ``Monolight`` depends including the
``PowerStatusCodec`` from our prior example:

.. literalinclude:: /includes/fundamentals/code-snippets/MonolightCodecProvider.java
   :start-after: start MonolightCodecProvider class
   :end-before: end MonolightCodecProvider class
   :language: java
   :dedent:

To see a runnable example that demonstrates read and write operations using
these Codecs, see the :ref:`Custom Codec Example <codecs-custom-example>`
section of this guide.

When working with Java POJOs, consider using the  ``PojoCodecProvider`` to
minimize duplicate code to convert commonly-used data types and customize
the behavior. See our
:doc:`POJO Customization guide </fundamentals/data-formats/pojo-customization>`
for more information.

For more information about the classes and interfaces in this section, see the
:java-docs:`CodecProvider API documentation <apidocs/bson/org/bson/codecs/configuration/CodecProvider.html>`.

BsonTypeClassMap
~~~~~~~~~~~~~~~~

The ``BsonTypeClassMap`` class contains a recommended mapping between BSON
types and Java classes. For example, the ``ARRAY`` BSON type maps to the Java
class type ``java.util.List``. You can override these mappings in your instance
by specifying them in the ``replacementsForDefaults`` field of your instance.

You can specify an instance of this class to a CodecProvider

Suppose we wanted to add a custom Codec as well as a CodecProvider




For a complete list of the default mappings, refer to the
:java-docs:`BsonTypeClassMap API documentation <apidocs/bson/org/bson/codecs/BsonTypeClassMap.html>`.

How is it used?
You can add an instance of the BsonTypeClassMap to your CodecProvider
and provide it to your Codec
An enumeration maps values from the ``BsonType`` enumeration to a Java class.

- Description
- Example of how to use to specify Bson mapping

.. _codecs-custom-example:

Custom Codec Example
--------------------

In this example, we show how to create a custom class that...

- Methods to override
- Encode: Describe parameters: BsonWriter, EncoderContext
- Decode: Describe parameters: BsonReader, DecoderContext
- Example class, demonstrating implementing encode/decode. Perhaps something like this https://stackoverflow.com/questions/45083885/decode-document-to-a-java-class-using-custom-mongo-codec
- Sample query to demonstrate decode results (of a field in a POJO) using custom codec
- Sample insert and resulting fields of the document to demonstrate encode
- Example showing how to read/encode a document with unknown fields
