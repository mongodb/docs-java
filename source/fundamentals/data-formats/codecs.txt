======
Codecs
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

In this guide, you can learn about Codecs and the supporting classes that
handle the encoding and decoding of Java objects to BSON data in MongoDB.
The Codec abstraction allows you to map types and fields directly to
your domain objects rather than to an intermediate map-based object such
as ``Document``.

We describe the following interfaces and classes as well as an example of
how you can specify custom encoding and decoding using them:

- :ref:`Codec <codecs-codec>`
- :ref:`CodecRegistry <codecs-codecregistry>`
- :ref:`CodecProvider <codecs-codecprovider>`
- :ref:`Custom Codec Example <codecs-custom-example>`

If you are customizing encoding and decoding of Java POJOs, read our guide on
:doc:`POJO Customization </fundamentals/data-formats/pojo-customization>`.

.. _codecs-codec:

Codec
-----

A **Codec** is an interface that contains abstract methods for serializing
and deserializing Java objects to BSON data. You can implement this interface
to define the conversion between BSON and your Java object.

To implement the ``Codec`` interface, override the ``encode()``, ``decode()``,
and ``getEncoderClass()`` abstract methods.

The ``encode()`` method contains the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 10 20

   * - Parameter Type
     - Description

   * - ``writer``
     - An instance of a class that implements ``BsonWriter``, an interface type
       that exposes methods for writing a BSON document. For example, the
       ``BsonBinaryWriter`` implementation writes to a binary stream of data.

   * - ``value``
     - The data that your implementation encodes. The type must match the type
       variable assigned to your implementation.

   * - ``encoderContext``
     -  Contains meta information about the Java object data that it encodes
        to BSON including whether to store the current value in a
        MongoDB collection.

The ``decode()`` method contains the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 10 20

   * - Parameter Type
     - Description

   * - ``bsonReader``
     - An instance of a class that implements ``BsonReader``, an interface type
       that exposese methods for reading a BSON document. For example, the
       ``BsonBinaryReader`` implementation reads from a binary stream of data.

   * - ``DecoderContext``
     - Contains information about the BSON data that it decodes to a Java
       object.

The ``getEncoderClass()`` method returns an instance of the class that your
Codec encodes.

See the following ``AnswerCodec`` class that implements ``Codec`` to convert
the Java string values "correct" and "incorrect" to BSON boolean values.

.. literalinclude:: /includes/fundamentals/code-snippets/AnswersCodec.java
   :language: java
   :dedent:


TODO: clarify explanation here
You can add an instance of your custom class to the ``CodecRegistry`` which
contains a mapping between your ``Codec`` and the Java object type to which
it applies.

For more information about the classes and interfaces in this section, see the
following API documentation:

- :java-docs:`Codec <apidocs/bson/org/bson/codecs/Codec.html>`
- :java-docs:`Decoder <apidocs/bson/org/bson/codecs/Decoder.html>`
- :java-docs:`Encoder <apidocs/bson/org/bson/codecs/Encoder.html>`
- :java-docs:`BsonWriter <apidocs/bson/org/bson/BsonWriter.html>`
- :java-docs:`BsonBinaryWriter <apidocs/bson/org/bson/BsonBinaryWriter.html>`
- :java-docs:`EncoderContext <apidocs/bson/org/bson/codecs/EncoderContext.html>`
- :java-docs:`BsonReader <apidocs/bson/org/bson/BsonReader.html>`
- :java-docs:`DecoderContext <apidocs/bson/org/bson/codecs/DecoderContext.html>`
- :java-docs:`BsonBinaryReader <apidocs/bson/org/bson/BsonBinaryReader.html>`

- Description
  - Relationship between Codec, CodecRegistry, and CodecProvider

.. _codecs-codecregistry:

CodecRegistry
-------------

A *CodecRegistry* designates which Codec instances to use to encode and decode
specific Java classes.

You can read more about the following terms in the sections below:

The ``CodecRegistry`` contains Codecs and their mapping to classes

- Description
- Example of setting Codec list
- Example of getting a Codec

.. _codecs-codecprovider:

CodecProvider
-------------

A *CodecProvider* is a factory that creates Codec instances and assigns them
a ``CodecRegistry``. The ``CodecRegistry`` specifies which Codec instances
to use for that class.

``PojoCodecProvider`` which contains classes that
specify which classes and types to support
instructions on how to convert data for one or more POJO classes
and their properties


- Description
- Example of get method implementation

BsonTypeClassMap
~~~~~~~~~~~~~~~~

The ``BsonTypeClassMap`` class contains a recommended mapping from BSON types
to Java classes. For example, the ``ARRAY`` BSON type maps to the Java class
type ``java.util.List``. You can override these mappings in your instance
by specifying them in the ``replacementsForDefaults`` field of your instance.

Add your You can specify an instance of this class to a CodecProvider

Suppose we wanted to add a custom Codec as well as a CodecProvider




For a complete list of the default mappings, refer to the
:java-docs:`BsonTypeClassMap API documentation <apidocs/bson/org/bson/codecs/BsonTypeClassMap.html>`.



What uses it?
You can add an instance of the BsonTypeClassMap to your CodecProvider
and provide it to your Codec


an enumeration maps values from the ``BsonType`` enumeration to a Java class.

- Description
- Example of how to use to specify Bson mapping

.. _codecs-custom-example:

Custom Codec Example
--------------------


In this example, we show how to create a custom class that defines implements
Codec implementation

- Methods to override
- Encode: Describe parameters: BsonWriter, EncoderContext
- Decode: Describe parameters: BsonReader, DecoderContext
- Example class, demonstrating implementing encode/decode. Perhaps something like this https://stackoverflow.com/questions/45083885/decode-document-to-a-java-class-using-custom-mongo-codec
- Sample query to demonstrate decode results (of a field in a POJO) using custom codec
- Sample insert and resulting fields of the document to demonstrate encode
- Example showing how to read/encode a document with unknown fields
