=================================
Aggregation Expression Operations
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to construct
expressions for use in the aggregation pipeline. You can perform
expression operations with discoverable, typesafe Java methods rather
than BSON documents. Because these methods follow the fluent interface
pattern, you can chain aggregation operations together to create code
that is both more compact and more naturally readable.

The operations in this guide use methods from the
`com.mongodb.client.model.mql <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/package-summary.html>`__ package.

.. tip:: 

   For more information about aggregation expressions that use the Query API, see the 
   :manual:`Aggregation Pipeline Operators </reference/operator/aggregation/>` 
   page in the Server manual.

How to Use Operations
---------------------

The examples in this guide assume that you include the following static
imports in your code:

.. code-block:: java
   :copyable: true

   import static com.mongodb.client.model.Aggregates.*;
   import static com.mongodb.client.model.Projections.*;
   import static com.mongodb.client.model.Filters.*;
   import static com.mongodb.client.model.mql.MqlValues.*;
   import static java.util.Arrays.asList;

To access document fields in an expression, you need to reference the
document being processed by the aggregation pipeline. Use the
``current()`` method to refer to this document. To access the value of a
field, you must use the appropriately typed method, such as
``getString()`` or ``getDate()``. When you specify the type for a field,
you ensure that the driver provides only those methods which are
compatible with that type. The following code shows how to reference a
string field called ``name``:

.. code-block:: java
   :copyable: true
   
   current().getString("name")

To specify a value in an operation, pass it to the ``of()`` method to
convert it to a valid type. The following code shows how to reference a
value of ``1.0``:

.. code-block:: java
   :copyable: true
   
   of(1.0)

To create an operation, chain a method to your field or value reference.
You can build more complex operations by chaining additional methods.

The following example creates an operation to find patients in New
Mexico who have visited the doctor’s office at least once. The operation
performs the following actions:

- Checks if the size of the ``visitDates`` array is greater than ``0``
  by using the ``gt()`` method 
- Checks if the ``state`` field value is “New Mexico” by using the
  ``eq()`` method

The ``and()`` method links these operations so that the pipeline stage
matches only documents that meet both criteria.

.. code-block:: java
   :copyable: true
      
   current()
         .getArray("visitDates")
         .size()
         .gt(of(0))
         .and(current()
                 .getString("state")
                 .eq(of("New Mexico")));

While some aggregation stages, such as ``group()``, accept operations
directly, other stages expect that you first include your operation in a
method such as ``computed()`` or ``expr()``. These methods, which take
values of type ``TExpression``, allow you to use your expressions in
certain aggregations.

To complete your aggregation pipeline stage, include your expression
in an aggregates builder method. The following list provides examples of
how to include your expression in common aggregates builder methods:

- ``match(expr(<expression>))``
- ``project(fields(computed("<field name>", <expression>)))``
- ``group(<expression>)``

To learn more about these methods, see
:ref:`Aggregates Builders <aggregates-builders>`.

The examples use the ``Arrays.asList()`` method to create a list of
aggregation stages that is passed to the ``aggregate()`` method of
``MongoCollection``.

Operations
----------

The following sections provide information and examples for
aggregation expression operations available in the driver.
The operations are categorized by purpose and functionality.

.. note::

   The driver generates a Query API expression that may be different
   from the Query API expression provided in each example. However,
   both expressions will produce the same aggregation result.

Boolean Operations
~~~~~~~~~~~~~~~~~~

You can perform a boolean operation on a value of type ``MqlBoolean``
using the methods described in this section.

The following table describes boolean methods
available in the driver and corresponding expressions in the
Query API. The methods link to API documentation and the Query API
expressions link to Server manual documentation.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Java Method
     - Aggregation Pipeline Operator

   * - `and() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#and(com.mongodb.client.model.mql.MqlBoolean)>`__
     - :manual:`$and </reference/operator/aggregation/and/>`
       
   * - `not() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#not()>`__
     - :manual:`$not </reference/operator/aggregation/not/>`

   * - `or() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#or(com.mongodb.client.model.mql.MqlBoolean)>`__
     - :manual:`$or </reference/operator/aggregation/or/>`

   * - `cond() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#cond(T,T)>`__
     - :manual:`$cond </reference/operator/aggregation/cond/>`

.. include:: /includes/fundamentals/agg-mql-diff.rst
   
The following example specifies an extreme temperature advisory for very
low or high weather temperatures (in degrees Fahrenheit). The code uses
the ``or()`` method to evaluate if the value of ``temperature`` is less
than ``10`` or greater than ``95``. Using the ``cond()`` method, the
example sets the ``advisory`` field to ``"extreme temperature"`` if the
document matches the criteria, and to ``"no advisory"`` otherwise:

.. code-block:: java
   :copyable: true

   var pipeline = Arrays.asList(project(fields(
           computed("advisory",
                   current()
                           .getInteger("temperature")
                           .lt(of(10))
                           .or(current()
                                   .getInteger("temperature")
                                   .gt(of(95)))
                           .cond(of("extreme temperature"), of("no advisory"))
   ))));

The following code provides an equivalent expression in
the Query API:

.. code-block:: javascript
   :copyable: true

   { $project: { advisory: { $cond: { if: { $or: [ { $lt: [ "$temperature", 10 ] },
                                                   { $gt: [ "$temperature", 95 ] } ] },
                                      then: "extreme temperature",
                                      else: "no advisory" } } } }

More Information
----------------
