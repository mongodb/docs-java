=================================
Aggregation Expression Operations
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to construct expressions 
for use in the aggregation pipeline. 
With the {+driver-short+}, you can perform expression operations with
discoverable, typesafe Java methods rather than BSON documents.
Because these methods follow the fluent interface pattern, you can chain 
aggregation operations together to create code that is both more compact and 
more naturally readable.  

.. tip:: 

   For more information about aggregation expressions that use the Query API, see the 
   :manual:`Aggregation Pipeline Operators </reference/operator/aggregation/>` 
   page in the Server manual.

Operations
----------

Each of the following sections provides information and examples for
aggregation expression operations available in the {+driver-short+}.
This guide sorts these operations into categories based on general
purpose and functionality.

.. important::

   The Query API expression that the driver generates from each
   aggregation expression operation might not be
   identical to the Query API expression provided in each example.
   However, they are functionally equivalent.

Boolean Expressions
~~~~~~~~~~~~~~~~~~~

You can invoke boolean operations on boolean values of type ``MqlBoolean``.

The following table describes the boolean aggregation operation methods
available in the {+driver-short+} and the equivalent expressions in the
Query API:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Java Aggregation Expression
     - Query API Expression

   * - `and() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#and(com.mongodb.client.model.mql.MqlBoolean)>`__
     - :manual:`$and </reference/operator/aggregation/and/>`
       
   * - `not() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#not()>`__
     - :manual:`$not </reference/operator/aggregation/not/>`

   * - `or() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#or(com.mongodb.client.model.mql.MqlBoolean)>`__
     - :manual:`$or </reference/operator/aggregation/or/>`

   * - `cond() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/mql/MqlBoolean.html#cond(T,T)>`__
     - :manual:`$cond </reference/operator/aggregation/cond/>`

.. note::

   While each Java method is functionally equivalent to the
   corresponding Query API expression, they may differ in expected
   parameters and implementation.
   
The following code computes the ``result`` field based on if the value
of ``field1`` is less than ``0`` *or* greater than ``10``:

.. code-block:: java
   :copyable: true

   var pipeline = Arrays.asList(project(fields(
           computed("result",
                   current().getInteger("field1").lt(of(0))
                       .or(current().getInteger("field1").gt(of(10))))
   )));
      
The following snippet provides an equivalent expression in
the Query API:

.. code-block:: javascript
   :copyable: true

   {
     $project:
        {
          result: { $or: [ { $lt: [ "$field1", 0 ] }, { $gt: [ "$field1", 10 ] } ] }
        }
   }

More Information
----------------
