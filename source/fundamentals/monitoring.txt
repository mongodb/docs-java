==========
Monitoring
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. What is on this page?

This guide explains how you can set up and configure **monitoring** in the
MongoDB Java driver.

.. What do any new terms mean?

Monitoring is the process of getting information about the activities a piece of
software performs. You can use the information you get from monitoring in your
application or an application performance management library. 

Monitoring the MongoDB Java driver lets you understand the
driver's resource usage and performance, and can help you make informed
decisions when designing and debugging your application.    

.. What can you expect to see on this page?

On this page you will learn how to perform these tasks:

- :ref:`Monitor different types of events in the MongoDB Java Driver <monitoring-monitor-events>`
- :ref:`Monitor connection pool events with Java Management Extensions (JMX) and JConsole <monitoring-jmx>`

This page shows how to use information about the activity of the driver in code.
If you would like to learn how to record events the driver performs,
consider reading our :doc:`guide on logging </fundamentals/logging>`.

.. _monitoring-monitor-events:

Monitor Events
--------------

To monitor an **event**, you must register a **listener** on your ``MongoClient``
instance. 

An event is any action that happens in code. The driver includes functionality
for listening to a subset of the events that occur when the driver is running.

A listener is a class that performs some action when certain events occur. All
listener classes extend the ``EventListener`` interface. A listener's
API defines the events it can respond to.

Each method of a listener class represents a response to a certain event. Each
method receives one argument: an object representing the event the method
responds to. All event objects are a subclass of the ``EventObject`` class.  

The MongoDB Java driver organizes the events it defines into three categories:

- Command Events
- Cluster Events
- Connection Pool Events

The following sections show how to monitor each event category.

For a full list of the events you can monitor,
:java-docs:`see the event package of the MongoDB Java Driver <apidocs/mongodb-driver-core/com/mongodb/event/package-summary.html>`.

For more information on the classes and interfaces mentioned in this section,
see the following API documentation:

- `EventListener <https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventListener.html>`__
- `EventObject <https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html>`__

Command Events
~~~~~~~~~~~~~~

A command event is an event related to a MongoDB database command. Here are some
examples of database commands that produce command events:

- ``find``
- ``insert``
- ``delete``
- ``count`` 

To monitor command events, write a class that implements the
``CommandListener`` interface and register an instance of that class with your
``MongoClient`` instance.

For more information on MongoDB database commands, see the
:manual:`MongoDB manual entry on database commands </reference/command/>`.

.. note:: Redacted Output

   As a security measure, the driver is unable to monitor some commands. This
   protects the sensitive information contained in the output of these
   commands. For a full list of commands the driver can't monitor,
   see the 
   :spec:`MongoDB command monitoring specification </command-monitoring/command-monitoring.rst#security>`.

Example
^^^^^^^

This example shows how to make a timer for database commands. The timer makes it so
that every time the driver executes a command on your MongoDB instance
you see a message letting you know how long it took to execute the command.

To make a timer, do the following:

- Make a class with timer functionality that implements the ``CommandListener`` interface.
- Add an instance of the new class that implements ``CommandListener`` to a ``MongoClientSettings`` object.
- Configure a ``MongoClient`` instance with the ``MongoClientSettings`` object.

The following code defines the ``CommandTimer`` class which implements the
``CommandListener`` interface:

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start command-listener-impl
   :end-before: end command-listener-impl

The following code adds an instance of the ``CommandTimer`` class to a
``MongoClientSettings`` object, and configures a ``MongoClient`` instance with the
``MongoClientSettings`` object. The code then runs some database commands to test the
timer.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start monitor-command-example
   :end-before: end monitor-command-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Command 'find' took 19 milliseconds
   Command 'aggregate' took 15 milliseconds
   Command 'endSessions' took 14 milliseconds

For more information on the classes and methods mentioned in this section, see
the following API documentation:

- :java-docs:`CommandListener <apidocs/mongodb-driver-core/com/mongodb/event/CommandListener.html>`
- :java-docs:`MongoClientSettings <apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`
- :java-docs:`MongoClient <apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html>`
- :java-docs:`CommandStartedEvent <apidocs/mongodb-driver-core/com/mongodb/event/CommandStartedEvent.html>`
- :java-docs:`CommandSucceededEvent <apidocs/mongodb-driver-core/com/mongodb/event/CommandSucceededEvent.html>`
- :java-docs:`CommandFailedEvent <apidocs/mongodb-driver-core/com/mongodb/event/CommandFailedEvent.html>`

Cluster Events
~~~~~~~~~~~~~~

A cluster event in the driver corresponds to a change in the state of the
MongoDB instance or cluster you have connected the driver to. Cluster events are
also called server discovery and monitoring (SDAM) events. 
 
The driver defines nine cluster events. The driver divides these nine events
between three separate listener interfaces which each listen for three of the
nine events:

- ``ClusterListener``: :spec:`topology </server-discovery-and-monitoring/server-discovery-and-monitoring.rst#topology>`
  related events
- ``ServerListener``: events related to ``mongod`` or ``mongos`` processes
- ``ServerMonitorListener``: heartbeat related events

For a detailed description of all nine cluster events in the driver, see the 
:spec:`MongoDB SDAM monitoring specification </server-discovery-and-monitoring/server-discovery-and-monitoring-monitoring.rst#events>`.

Example
^^^^^^^

This example shows how to make a listener class that prints a message that lets
you know if the driver can read and write to your MongoDB instance.

The following code defines the ``IsReadAndWrite`` class which implements the
``ClusterListener`` interface.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start cluster-listener-impl
   :end-before: end cluster-listener-impl

The following code adds an instance of the ``IsReadAndWrite`` class to a
``MongoClient`` object. The code then runs a find operation to test the
``IsReadAndWrite`` class.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start monitor-cluster-example
   :end-before: end monitor-cluster-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Able to write to server
   Able to read from server

For more information on the classes and methods mentioned in this section, see
the following API documentation:

- :java-docs:`ClusterListener <apidocs/mongodb-driver-core/com/mongodb/event/ClusterListener.html>`
- :java-docs:`ServerListener <apidocs/mongodb-driver-core/com/mongodb/event/ServerListener.html>`
- :java-docs:`ServerMonitorListener <apidocs/mongodb-driver-core/com/mongodb/event/ServerMonitorListener.html>`
- :java-docs:`MongoClientSettings <apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`
- :java-docs:`MongoClient <apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html>`
- :java-docs:`ClusterDescriptionChangedEvent <apidocs/mongodb-driver-core/com/mongodb/event/ClusterDescriptionChangedEvent.html>`

Connection Pool Events
~~~~~~~~~~~~~~~~~~~~~~

Connection pool events are events related to a **connection pool** held by the driver.
A connection pool is a set of open TCP connections your driver maintains with
a MongoDB instance. Connection pools help reduce the number of network handshakes
your application needs to perform with a MongoDB instance, and can help your
application run faster.

To monitor connection pool events, write a class that implements the
``ConnectionPoolListener`` interface and register an instance of that class with your
``MongoClient`` instance.

Example
^^^^^^^

This example shows how to make a listener class that prints a message each time
you check out a connection from your connection pool.

The following code defines the ``ConnectionPoolLibrarian`` class which implements the
``ConnectionPoolListener`` interface.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start cp-listener-impl
   :end-before: end cp-listener-impl

The following code adds an instance of the ``ConnectionPoolLibrarian`` class to a
``MongoClient`` object. The code then runs a database command to test the
librarian.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start monitor-cp-example
   :end-before: end monitor-cp-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Let me get you the connection with id 21...
   Let me get you the connection with id 21...

It looks like our find operation requested two connections from the pool.
If you are curious why the driver uses two connections in one find operation, 
`you can find the answer in this line of the MongoDB driver source code <https://github.com/mongodb/mongo-java-driver/blob/a82ce71d0aa7da9c6455f1b52ae24ed3cd4c1f62/driver-sync/src/main/com/mongodb/client/internal/FindIterableImpl.java#L203>`__.

For more information on the classes and methods mentioned in this section, see
the following API documentation:

- :java-docs:`ConnectionPoolListener <apidocs/mongodb-driver-core/com/mongodb/event/ConnectionPoolListener.html>`
- :java-docs:`MongoClientSettings <apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`
- :java-docs:`MongoClient <apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html>`
- :java-docs:`ConnectionCheckedOutEvent <apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckedOutEvent.html>`
- :java-docs:`ConnectionCheckOutFailedEvent <apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckOutFailedEvent.html>`

.. _monitoring-jmx:

Monitor Connection Pools with JMX
---------------------------------

You can monitor connection pool events using **Java Management Extensions (JMX)**. 
JMX provides tools to monitor applications and devices.

For more information on JMX, see 
`the official Oracle JMX documentation <https://docs.oracle.com/javase/tutorial/jmx/index.html>`__. 

JMX Support in the MongoDB Driver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To enable JMX connection pool monitoring, add an instance of the
``JMXConnectionPoolListener`` class to your ``MongoClient``.

The ``JMXConnectionPoolListener`` class performs the following actions: 

- Creates MXBean instances for each ``mongod`` or ``mongos`` process the driver
  maintains a connection pool with.
- Registers these MXBean instances with the platform MBean server. 

MXBeans registered on the platform MBean server have the following properties:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Property
     - Description

   * - ``clusterId``
     - A client-generated unique identifier. This identifier ensures that
       each MXBean the driver makes has a unique name when an application has 
       multiple ``MongoClient`` instances connected to the same MongoDB deployment.

   * - ``host``
     - The hostname of the machine running the ``mongod`` or ``mongos`` process.

   * - ``port``
     - The port on which the ``mongod`` or ``mongos`` process is listening.

   * - ``minSize``
     - The minimum size of the connection pool, including idle and in-use connections.

   * - ``maxSize``
     - The maximum size of the connection pool, including idle and in-use connections.

   * - ``size``
     - The current size of the connection pool, including idle and in-use connections.

   * - ``checkedOutCount``
     - The current count of connections that are in use.


All MXBean instances created by the driver are under the domain
``"org.mongodb.driver"``.

For more information on the topics discussed in this subsection, see the
following resources:

- `Oracle Platform MBean Server Reference documentation <https://docs.oracle.com/en/java/javase/16/management/overview-java-se-monitoring-and-management.html#GUID-F7B9AB8A-F5A8-472A-AEC6-93B5B7FBE7CE>`__
- `Oracle MXBean documentation <https://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html>`__

JMX and JConsole Example
~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how you can monitor the driver's connection pools using JMX
and **JConsole**. JConsole is a JMX compliant GUI monitoring tool that comes with
the Java Platform.

The following code snippet adds a ``JMXConnectionPoolListener`` to a
``MongoClient`` instance. The code then starts a JMX connection server exposing
the platform MBean server on port 9999 for JConsole to connect to.

.. literalinclude:: /includes/fundamentals/code-snippets/JMXMonitoring.java
   :language: java
   :dedent:
   :start-after: start jmx-example
   :end-before: end jmx-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Start the connector server...
   The connector server started.
   Press <Enter> to stop the server.

Once you have started your server, open JConsole in your terminal using the
following command:

.. code-block:: shell
   
   jconsole

.. note:: Consult the Official JConsole Documentation

   The descriptions of the JConsole GUI on this page are illustrative
   rather than a source of truth. For guaranteed up to date information, consult 
   `the official JConsole documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__. 

Once JConsole is open, perform the following actions in the GUI:

- Select the Java process running the above example code.
- Press :guilabel:`Insecure Connection` in the warning dialog box.
- Click on the :guilabel:`MBeans` tab.
- Inspect your connection pool events under the ``"org.mongodb.driver"`` domain.

When you no longer want to inspect your connection pools in JConsole, do the
following: 

- Exit JConsole
- Disable the JMX connection server by pressing :kbd:`Enter` in the shell used
  to run the above code snippet

For more information on JMX and JConsole, see the following resources from
Oracle:

- `JConsole documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__.
- `Monitoring and Management Guide <https://docs.oracle.com/en/java/javase/16/management/monitoring-and-management-using-jmx-technology.html>`__

For more information on the classes and methods mentioned in this section, see
the following API documentation:

- :java-docs:`JMXConnectionPoolListener <apidocs/mongodb-driver-core/com/mongodb/management/JMXConnectionPoolListener.html>`
- `getPlatformMBeanServer() <https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ManagementFactory.html#getPlatformMBeanServer()>`__
- `JMXConnectorServer <https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServer.html>`__
