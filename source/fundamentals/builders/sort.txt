==============
Sorts Builders
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _sorts-builders:

Overview
--------

In this guide, we show you how to specify **sort criteria** for your
queries using **builders**.

Sort criteria are the rules MongoDB uses to sort your data. Some
examples of sort criteria are:

* Smallest number to largest number
* Earliest time of day to latest time of day
* Alphabetical order by first name 

Builders are classes provided by the MongoDB Java driver that help you construct 
:java-docs:`Bson <apidocs/bson/org/bson/conversions/Bson.html>` objects. 
To learn more, see our :doc:`guide on builders </fundamentals/builders/>`.

You should read this guide if you would like to:

* Use builders to specify sort criteria for your queries.

If you want to learn the fundamentals of sorting in the MongoDB Java
driver, consider reading our
:doc:`guide on sorting </fundamentals/crud/read-operations/sort/>`.

The Sorts Class
---------------

The :java-docs:`Sorts </apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
class is a builder that provides static factory methods for all sort criteria
operators supported by MongoDB. These methods return a
:java-docs:`Bson </apidocs/bson/org/bson/conversions/Bson.html>`
object that you can pass to the 
:java-docs:`sort() </apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#sort(org.bson.conversions.Bson)>`
method of a ``FindIterable`` instance or to 
:java-docs:`Aggregates.sort() </apidocs/mongodb-driver-core/com/mongodb/client/model/Aggregates.html#sort(org.bson.conversions.Bson)>`.
If you want to learn more about ``Aggregates``, see our 
:doc:`guide on the Aggregates builder </fundamentals/builders/aggregates>`.


.. _sorts-builders-sort-example:

The following examples show you how to use the methods
provided by the ``Sorts`` class to sort your queries. The examples use a
sample collection, ``sort_example``, that contains the following documents:

.. code-block:: json

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 6, "letter": "c", "food": "maple donut"}

Ascending
---------

To specify an ascending sort, use the ``Sorts.ascending()`` static
factory method. Pass ``Sorts.ascending()``
the name of the field you need to sort on.

The following example sorts the documents in the 
:ref:`sort_example collection <sorts-builders-sort-example>` by ascending order
on the ``_id`` field:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>

   collection.find().sort(ascending("_id"));

The output of the example above should look something like this: 

.. code-block:: json

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   ...

Descending
----------

To specify a descending sort, use the ``Sorts.descending()`` static factory
method. Pass ``Sorts.descending()`` the name of the field you need to sort on.

The following example sorts the documents in the 
:ref:`sort_example collection <sorts-builders-sort-example>` in descending order
on the ``_id`` field:

.. code-block:: java
   
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("_id"));


The code snippet above returns the documents in the
:ref:`sort_example collection <sorts-builders-sort-example>`  
in the following order: 

.. code-block:: json

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   ...

Combining Criteria
------------------

To combine sort criteria, use the ``Sorts.orderBy()`` static factory
method. The ``orderBy()`` method builds sort criteria that apply passed 
in sort criteria from left to right in the event of ties. 

In the following code snippet, we use the ``orderBy()`` method to combine a
descending sort on the ``letter`` field with an ascending sort on the
``_id`` field.

.. code-block:: java

   import static com.mongodb.client.model.Sorts.orderBy;
   import static com.mongodb.client.model.Sorts.ascending;
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>

   Bson orderBySort = orderBy(descending("letter"), ascending("_id"));
   collection.find().sort(orderBySort);

The code snippet above returns the documents in the
:ref:`sort_example collection <sorts-builders-sort-example>`
in the following order: 

.. code-block:: json

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}

Meta Text Score
---------------

To specify a sort by the text score of a text search, use the
``Sorts.metaTextScore()`` static factory method. For a detailed example of
specifying a sort using ``Sorts.metaTextScore()``, see our 
:doc:`sorting fundamentals guide </fundamentals/crud/read-operations/sort/#text-search>`.

For more information, see the
:java-docs:`Sorts class API documentation </apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`.
