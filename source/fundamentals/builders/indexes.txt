================
Indexes Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _indexes-builders:

Overview 
--------

This guide shows you how to specify **indexes** using the Java Driver
:doc:`builders </fundamentals/builders/>`. Index builders provide
convenient methods for different types of indexes:

- :ref:`Ascending <index-ascending>`
- :ref:`Descending <index-descending>`
- :ref:`Compound Indexes <index-compound-indexes>`
- :ref:`Text Indexes <index-text-indexes>`
- :ref:`Hashed Indexes <index-hashed-indexes>`
- :ref:`Geospatial Indexes <index-geospatial-indexes>`

Indexes store small portions of the collectionâ€™s data set. The index
stores the value of a specific field or set of fields, ordered by the
value of the field. See the :doc:`Indexes </fundamentals/indexes>` page
to see examples of queries on indexes. 

The :java-core-api:`Indexes <com/mongodb/client/model/Indexes.html>`
class provides static factory methods for all the MongoDB index types.
Each method returns a :ref:`Bson <bson>` instance, which you can pass to
:java-sync-api:`createIndex() <com/mongodb/client/MongoCollection.html#createIndex(org.bson.conversions.Bson)>`.

.. tip::

   For brevity, you may choose to import all methods of the
   :java-core-api:`Indexes <com/mongodb/client/model/Indexes.html>`
   class statically: 

   .. code-block:: java

      import static com.mongodb.client.model.Indexes.*;

   The examples below assume this static import.

.. _index-ascending:

Ascending
---------

Create a BSON instance by passing the field name or names you want to
index to the :java-core-api:`ascending() <com/mongodb/client/model/Indexes.html#ascending(java.lang.String...)>`
method. Then, pass the BSON instance into the createIndex() method to
create an ascending index. 

An ascending index sorts the index key from smallest to largest.

.. note:: 

If an ascending or a descending index is on a single field, the sort
operation on the field can be in either direction. 

The following example specifies an ascending index on the ``name`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin ascendingIndex
   :end-before: end ascendingIndex

.. _index-descending:

Descending
----------

Create a BSON instance by passing the field name or names you want to
index to the :java-core-api:`descending() <com/mongodb/client/model/Indexes.html#descending(java.lang.String...)>`
method. Then, pass the BSON instance into the createIndex() method to
create a descending index. 

A descending index sorts the index key from largest to smallest.

The following example specifies a descending index on the ``capacity`` field: 

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin descendingIndex
   :end-before: end descendingIndex

.. _index-compound-indexes:

Compound Indexes
----------------

Create a BSON instance by passing the field names you want to index to
the :java-core-api:`compoundIndex() <com/mongodb/client/model/Indexes.html#compoundIndex(org.bson.conversions.Bson...)>`
method. Then, pass the BSON instance into the createIndex() method to
create a compound index. 

The following example specifies a compound index composed of
descending index on the ``capacity`` and ``year`` field, followed
by an ascending index on the ``name`` field: 

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin compoundIndexExample
   :end-before: end compoundIndexExample

.. _index-text-indexes:

Text Indexes
------------

Create a BSON instance by passing the field name you want to index to
the :java-core-api:`text() <com/mongodb/client/model/Indexes.html#text(java.lang.String)>`
method. Then, pass the BSON instance into the createIndex() method to
create a text index key. 

A text index groups the index key by the word you specify.

The following example specifies a text index key on the "theaters" field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

.. _index-hashed-indexes:

Hashed Indexes
--------------

Create a BSON instance by passing the field name you want to index to
the :java-core-api:`hashed() <com/mongodb/client/model/Indexes.html#hashed(java.lang.String)>`
method. Then, pass the BSON instance into the createIndex() method to
create a hashed index key. 

A hashed index groups the index key by its hash value.

The following example specifies a hashed index on the ``capacity``
field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin hashedIndex
   :end-before: end hashedIndex

.. _index-geospatial-indexes:

Geospatial Indexes
------------------

Create a BSON instance by passing the field name or names you want to
index to the :java-core-api:`geo2dsphere() <com/mongodb/client/model/Indexes.html#geo2dsphere(java.lang.String...)>`
method . Then, pass the BSON instance into the createIndex() method to
create a geo2dsphere index key. 

A geo2dsphere index groups the index key by their coordinates.

The following example specifies a geo2dsphere index on the ``location`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin geo2dsphereIndex
   :end-before: end geo2dsphereIndex
