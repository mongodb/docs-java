================
Indexes Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _indexes-builders:

Overview 
--------

In this guide, you can learn how to specify **indexes** using
:doc:`builders </fundamentals/builders/>` in the MongoDB Java driver.
The ``Indexes`` builder provides helper methods for constructing the
following types of indexes:  

- :ref:`Ascending Indexes <ascending-indexes>`
- :ref:`Descending Indexes <descending-indexes>`
- :ref:`Compound Indexes <index-compound-indexes>`
- :ref:`Text Indexes <index-text-indexes>`
- :ref:`Hashed Indexes <index-hashed-indexes>`
- :ref:`Geospatial Indexes <index-geospatial-indexes>`

Indexes store a subset of the collectionâ€™s data set. The index stores
the value of a specific field or set of fields, ordered by the value of
the field. See our guide on :doc:`Indexes </fundamentals/indexes>` for
examples of queries covered by indexes. 

The ``Indexes`` class provides static factory methods for all the MongoDB index types.
Each method returns a :java-docs:`Bson <apidocs/bson/org/bson/conversions/Bson.html>` 
instance, which you can pass to
:java-docs:`createIndex() <apidocs/mongodb-driver-core/com/mongodb/client/MongoCollection.html#createIndex(org.bson.conversions.Bson)>`.

.. tip::

   For brevity, you may choose to import all methods of the
   :java-docs:`Indexes <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html>`
   class statically: 

   .. code-block:: java

      import static com.mongodb.client.model.Indexes.*;

   The examples below assume this static import.

.. _ascending-indexes:

Ascending Indexes
-----------------

An ascending index enables you to sort query results by the value of the
indexed field(s) from smallest to largest.

In order to create an ascending index, first call the
:java-docs:`ascending() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#ascending(java.lang.String...)>`
builder method to create a ``Bson`` instance that represents the index
document, passing the name or names of the fields you want to index.
Then, call the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

.. note:: 

   If you have an ascending or a descending index on a single field, MongoDB
   can sort using the index in either direction. 

The following example specifies an ascending index on the ``name`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin ascendingIndex
   :end-before: end ascendingIndex

.. _descending-indexes:

Descending Indexes
------------------

A descending index enables you to sort query results by the value of the
indexed field(s) from largest to smallest.

In order to create a descending index, first call the
:java-docs:`descending() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#descending(java.lang.String...)>`
builder method to create a ``Bson`` instance that represents the index
document, passing the name or names of the fields you want to index.
Then, call the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

The following example specifies a descending index on the ``capacity`` field: 

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin descendingIndex
   :end-before: end descendingIndex

.. _index-compound-indexes:

Compound Indexes
----------------

In order to create a compound index, first call the
:java-docs:`compoundIndex() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#compoundIndex(org.bson.conversions.Bson...)>`
builder method to create a ``Bson`` instance that represents the index
document, passing the names of the fields you want to index. Then, call
the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document. 

The following example specifies a compound index composed of
descending index on the ``capacity`` and ``year`` field, followed
by an ascending index on the ``name`` field: 

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin compoundIndexExample
   :end-before: end compoundIndexExample

.. _index-text-indexes:

Text Indexes
------------

A text index groups documents by the text in the indexed field.

In order to create a text index, first call the
:java-docs:`text() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#text(java.lang.String)>`
builder method to create a ``Bson`` instance that represents the index
document, passing the name of the fields you want to index. Then, call
the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document. 

The following example specifies a text index key on the "theaters" field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

.. _index-hashed-indexes:

Hashed Indexes
--------------

A hashed index groups documents by the hash value in the indexed field.

In order to create a hashed index, first call the
:java-docs:`hashed() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#hashed(java.lang.String)>`
builder method to create a ``Bson`` instance that represents the index
document, passing the name of the fields you want to index. Then, call
the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document. 


The following example specifies a hashed index on the ``capacity``
field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin hashedIndex
   :end-before: end hashedIndex

.. _index-geospatial-indexes:

Geospatial Indexes
------------------

A geo2dsphere index groups documents by the coordinates in the indexed field.

In order to create a geo2dsphere index, first call the
:java-docs:`geo2dsphere() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#geo2dsphere(java.lang.String...)>`
builder method to create a ``Bson`` instance that represents the index
document, passing the name or names of the fields you want to index.
Then, call the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

The following example specifies a geo2dsphere index on the ``location`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/builders/Indexes.java
   :language: java
   :dedent:
   :start-after: begin geo2dsphereIndex
   :end-before: end geo2dsphereIndex
