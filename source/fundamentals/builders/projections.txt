====================
Projections Builders
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _projections-builders:

Overview
--------

MongoDB supports **field projection**, specifying which fields to include and exclude when returning results from a
query. Projection in MongoDB follows some basic rules:

- The ``_id`` field is **always** included and must explicitly be excluded
- Specifying a field for inclusion implicitly excludes all other fields **except** the ``_id`` field
- Specifying a field for exclusion removes only that field in a query result

Find more information about projection mechanics :manual:`here </tutorial/project-fields-from-query-results/>`.

The :java-core-api:`Projections <com/mongodb/client/model/Projections.html>` class provides static factory methods for
all the MongoDB projection operators.  Each method returns an instance of the :ref:`Bson <bson>` type which you can pass
to any method that expects a projection.

.. tip::

   For brevity, you may choose to import the methods of the ``Projections`` class statically:

   .. code-block:: java

      import static com.mongodb.client.model.Projections.*;

   The examples below assume this static import.

Inclusion
---------

Use the ``include`` method to specify the inclusion of one or more fields.

The following example includes the ``quantity` field and (implicitly) the :guilabel:`_id`` field:

.. code-block:: java

   include("quantity")

The following example includes the ``quantity` and :guilabel:`totalAmount`` fields and (implicitly) the
``_id`` field:

.. code-block:: java

   include("quantity", "totalAmount")

Exclusion
---------

Use the ``exclude`` method to specify the exclusion of one or more fields.

The following example excludes the ``quantity`` field:

.. code-block:: java

   exclude("quantity")

The following example excludes the ``quantity` and :guilabel:`totalAmount`` fields:

.. code-block:: java

   exclude("quantity", "totalAmount")

Exclusion of ``_id``
----------------------------

Use the ``excludeId`` method to specify the exclusion of the ``_id`` field:

.. code-block:: java

   excludeId()

.. note::

   ``excludeId`` is a convenience method and is shorthand for:

   .. code-block:: java

      exclude("_id")

Project an Array Element Match
------------------------------

Use the ``elemMatch`` methods to specify a positional array projection.

Use the ``elemMatch(String, Bson)`` method variant to specify an array projection that will include the first
element of an array that matches a supplied query filter.

.. note::

   Only the first element that matches the specified query filter will be included, regardless of how many matches there
   may be.

The following example projects the first element of the ``orders` array where the :guilabel:`quantity`` field is
greater that ``3``:

.. code-block:: java

   elemMatch("orders", Filters.gt("quantity", 3))

When you've specified matching criteria in the **query** portion of your operation, use the ``elemMatch(String)`` method
variant to specify a :manual:`positional projection </reference/operator/projection/positional/#projection/>` to include
the first element of an array.

.. warning::

   In MongoDB versions < 4.4, the specified array field must appear in the query document. Beginning in MongoDB 4.4,
   you can use a positional project on an array field that does not appear in the query document.


The following example projects the first element of the ``orders`` array:

.. code-block:: java

   elemMatch("orders")

.. tip::

   Specifying ``elemMatch(String fieldName, Bson filter)`` in the projection causes MongoDB to use the
   :manual:`projection $elemMatch operator </reference/operator/projection/elemMatch/>`. To use the
   :manual:`$elemMatch query operator </reference/operator/query/elemMatch/>` as part of your search criteria, see the
   :ref:`Filters builders page <filters-builders>`.

Slice
-----

Use the ``slice`` methods to project a :manual:`slice </reference/operator/projection/slice/>` of an array.

The following example projects the first **7** elements of the ``tags`` array:

.. code-block:: java

  slice("tags", 7)

The following example skips the first **2** elements of the ``tags`` array and projects the next **5**:

.. code-block:: java

   slice("tags", 2, 5)

Text Score
----------

Use the ``metaTextScore`` method to specify a projection of
:manual:`score of a text query </reference/operator/query/text/#return-the-text-search-score/>`

The following example projects the text score as the value of the ``score`` field:

.. code-block:: java

   metaTextScore("score")

Combining Projections
---------------------

Use the ``fields`` method to combine multiple projections.

The following example includes the ``quantity` and :guilabel:`totalAmount`` fields and excludes the
``_id`` field:

.. code-block:: java

   fields(include("quantity", "totalAmount"), excludeId())

