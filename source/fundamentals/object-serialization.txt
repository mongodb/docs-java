====================
Object Serialization
====================

.. default-domain:: mongodb

Overview
--------

**Object serialization** is the process of translating data between two
mediums. MongoDB stores data as :manual:`MongoDB Extended JSON
<reference/mongodb-extended-json/>` containing fields that correspond
with BSON data types. The driver uses object serializatio to translate
data between Extended JSON and Java objects. You can specify how the
driver should perform serialization using **codecs**.

Codecs implement translation between Extended JSON and Java objects
using methods that encode and decode data. Codecs accomplish this
translation by implementing the ``Codec`` interface.
Each ``CodecRegistry`` contains a list of codecs. Once specified for a
``MongoClient``, ``MongoDatabase``, or ``MongoCollection``, a
``CodecRegistry`` is used for all subsequent operations on that object.
Whenever you send or receive data from a connected MongoDB instance,
the driver selects the first codec that can translate each object in the
``CodecRegistry`` of the ``MongoClient``, ``MongoDatabase``, or
``MongoCollection`` used to communicate with the MongoDB instance.

.. ref:: default-codecs

Default Codecs
--------------

By default, every ``MongoClient`` uses a ``CodecRegistry`` that contains
codecs allowing the serialization of three classes:

.. list-table:: Default Serializable Classes
   :widths: 40 60
   :stub-columns: 1
   :header-rows: 1

   * - Class
     - Codec

   * - :java-docs:`Document <apidocs/bson/org/bson/Document.html>`
     - :java-docs:`DocumentCodec <apidocs/bson/org/bson/codecs/DocumentCodec.html>`

   * - :java-docs:`BasicDBObject <apidocs/mongodb-driver-core/com/mongodb/BasicDBObject.html>`
     - :java-docs:`DBObjectCodec <apidocs/mongodb-driver-core/com/mongodb/DBObjectCodec.html>`

   * - :java-docs:`BsonDocument <apidocs/bson/org/bson/BsonDocument.html>`
     - :java-docs:`BsonDocumentCodec <apidocs/bson/org/bson/codecs/BsonDocumentCodec.html>`

Because the default ``CodecRegistry`` contains the codecs for these
classes, you can use the ``Document``, ``BasicDBObject``, and
``BsonDocument`` classes to represent data in a ``MongoCollection``
without explicitly specifying a codec. For instance, the following
example creates three instances of the ``exampleCollection`` collection
in the ``exampleDatabase`` database, one for each class with
serialization support in the default ``CodecRegistry``:

.. code-block:: java

   MongoClient client = MongoClients.create("mongodb+srv://<user>:<password>@<cluster-url>");
   MongoDatabase database = client.getDatabase("exampleDatabase");
   MongoCollection<Document> documentCollection =
       database.getCollection("exampleCollection", Document.class);
   MongoCollection<BasicDBObject> basicDBObjectCollection =
       database.getCollection("exampleCollection", BasicDBObject.class);
   MongoCollection<BsonDocument> BsonDocumentCollection =
       database.getCollection("exampleCollection", BsonDocument.class);

Custom Codecs
-------------

If the default codecs do not support object serialization for a class
you need (or you need to change the behavior of serialization of a class),
you can specify a **custom codec**. Custom codecs specify how the driver
should serialize data into :ref:`non-default classes <default-codecs>`.
To serialize an unsupported class, you can:

- Use an custom codec included in the driver that is compatible
  with your unsupported class, such as :java-docs:`UuidCodec
  <apidocs/bson/org/bson/codecs/UuidCodec.html>`.

- Create your own codec by implementing the methods in the
  :java-docs:`Codec <apidocs/bson/org/bson/codecs/Codec.html>` interface.
  These methods include the serialization between the BSON data and your
  unsupported class.

Codec Providers
---------------

You can also enable object serialization for an unsupported
class using a **codec provider**. A codec provider is a factory for
codec instances. To serialize an unsupported class using a codec
provider:

- Use a codec provider that is compatible
  with your unsupported class, such as :java-docs:`PojoCodecProvider
  <apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.html>`, which
  provides a codec for any :wikipedia:`POJO <Plain_old_Java_object>`.

- Create your own codec provider by implementing the methods in the
  :java-docs:`CodecProvider
  <apidocs/bson/org/bson/codecs/configuration/CodecProvider.html>`
  interface.

You can add a codec provider to a ``CodecRegistry`` using the
:java-docs:`CodecRegistries.fromProviders()
<apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html#fromProviders(java.util.List)>`
method. The following example creates a ``CodecRegistry`` from the
``PojoCodecProvider`` included in the driver:

.. code-block::

   CodecRegistry codecRegistry =
      CodecRegistries.fromProviders(PojoCodecProvider.builder().automatic(true).build());

Use a Custom Codec
------------------

To use a custom codec to represent data in a ``MongoCollection``, add
your custom codec to a :java-docs:`CodecRegistry
<apidocs/bson/org/bson/codecs/configuration/CodecRegistry.html>`
and configure the ``CodecRegistry`` containing your codec as the codec
provider for your ``MongoClient``, ``MongoDatabase``, or
``MongoCollection``.

``MongoDatabase`` instances inherit their
``CodecRegistry`` from the ``MongoClient`` used to create them.
``MongoCollection`` instances inherit their ``CodecRegistry`` from
the ``MongoDatabase`` used to create them.

.. note::

   You can specify a custom ``CodecRegistry`` by creating a new instance
   of either a ``MongoDatabase`` or a ``MongoCollection`` and passing
   your registry to the ``withCodecRegistry()`` method. This is
   demonstrated in the examples below.

Use a Custom Codec with a Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To customize the ``CodecRegistry`` of a ``MongoClient``, pass a
``CodecRegistry`` to the :java-docs:`MongoClientSettings.Builder.codecRegistry()
<apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.Builder.html#codecRegistry(org.bson.codecs.configuration.CodecRegistry)>` method in the
``MongoClientSettings`` builder object and pass the
:java-api-sync:`MongoClientSettings <com/mongodb/MongoClientSettings.html>`
generated by the ``build()`` method to the ``MongoClients.create()``
method.

The following example creates a ``MongoClient``  with a
``CodecRegistry`` containing a custom codec of
type ``ExampleCodec``. This process requires two steps:

1. Create a new ``CodecRegistry`` that contains your custom codec(s)
   using the :java-docs:`CodecRegistries
   <apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html>`
   helper class.

#. Configure the new ``CodecRegistry`` as the codec provider for your
   ``MongoClient`` using the ``codecRegistry()`` method of
   ``MongoClientSettings.Builder``.

.. code-block:: java

   CodecRegistry codecRegistry = CodecRegistries.fromCodecs(new ExampleCodec());
   MongoClientSettings settings = MongoClientSettings.builder()
                .codecRegistry(codecRegistry).build();
   MongoClient client = MongoClients.create(settings);

All ``MongoDatabase`` objects created from the ``MongoClient``
(and all ``MongoCollection`` objects created from those ``MongoDatabase``
objects) use the customized ``CodecRegistry`` unless overridden.

Use a Custom Codec with a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``MongoDatabase`` objects inherit their ``CodecRegistry`` from the
``MongoClient`` used to create them. You can create a new
``MongoDatabase`` instance with a custom ``CodecRegistry`` from an
existing ``MongoDatabase`` instance using the
:java-sync-api:`MongoDatabase.withCodecRegistry()
<com/mongodb/client/MongoDatabase.html#withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)>`
method.

The following example creates a ``MongoDatabase`` with a
``CodecRegistry`` containing a custom codec of
type ``ExampleCodec``. This process requires two steps:

1. Create a new ``CodecRegistry`` that contains your custom codec(s)
   using the :java-docs:`CodecRegistries
   <apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html>`
   helper class.

#. Configure the new ``CodecRegistry`` as the codec provider for your
   ``MongoDatabase`` using the ``withCodecRegistry()`` method.

.. code-block:: java

   CodecRegistry codecRegistry = CodecRegistries.fromCodecs(new ExampleCodec()));
   MongoDatabase database = client.getDatabase("exampleDatabase")
                .withCodecRegistry(codecRegistry);

All ``MongoCollection`` objects created from the ``MongoDatabase``
use the customized ``CodecRegistry`` unless overridden.

Use a Custom Codec with a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``MongoCollection`` objects inherit their ``CodecRegistry`` from the
``MongoDatabase`` used to create them. You can create a new
``MongoCollection`` instance with a custom ``CodecRegistry`` from an
existing ``MongoCollection`` instance using the
:java-sync-api:`MongoCollection.withCodecRegistry()
<com/mongodb/client/MongoCollection.html#withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)>`
method.

The following example creates a ``MongoCollection``  with a
``CodecRegistry`` containing a custom codec of
type ``ExampleCodec``. This process requires two steps:

1. Create a new ``CodecRegistry`` that contains your custom codec(s)
   using the :java-docs:`CodecRegistries
   <apidocs/bson/org/bson/codecs/configuration/CodecRegistries.html>`
   helper class.

#. Configure the new ``CodecRegistry`` as the codec provider for your
   ``MongoCollection`` using the ``withCodecRegistry()`` method.

.. code-block:: java

   CodecRegistry codecRegistry =
       CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(),
                fromCodecs(new ExampleCodec()));
   MongoCollection<Example> collection = database.getCollection("exampleCollection")
                .withCodecRegistry(codecRegistry);

All queries executed on the ``MongoCollection`` use the customized
``CodecRegistry``. The ``ExampleCodec`` serializes and deserializes
objects of type ``Example``, allowing the ``MongoCollection`` to represent
MongoDB documents with the ``Example`` class.
