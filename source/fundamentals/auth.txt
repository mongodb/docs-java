=========================
Authentication Mechanisms
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In this guide, we show you how to authenticate with MongoDB using each
**authentication mechanism** available in the MongoDB Community Edition.
Authentication mechanisms are processes by which the driver and server
confirm identity and establish trust to ensure security.

The mechanisms that you can use with the latest version of MongoDB Community
Edition are as follows:

* :ref:`Default <default-auth-mechanism>`
* :ref:`SCRAM-SHA-256 <scram-sha-256-auth-mechanism>`
* :ref:`SCRAM-SHA-1 <scram-sha-1-auth-mechanism>`
* :ref:`MONGODB-CR <mongodb-cr-auth-mechanism>`
* :ref:`MONGODB-AWS <mongodb-aws-auth-mechanism>`
* :ref:`X.509 <x509-auth-mechanism>`

To authenticate using ``Kerberos`` or ``LDAP``, see the
:doc:`Enterprise Authentication Mechanisms guide </fundamentals/enterprise-auth>`.
For more information on establishing a connection to your MongoDB cluster,
read our :doc:`Connection Guide </fundamentals/connection>`.

Specify an Authentication Mechanism
-----------------------------------

.. include:: /includes/fundamentals/auth-specify.rst

Mechanisms
----------

.. _default-auth-mechanism:

Default
~~~~~~~

The default authentication mechanism setting uses one of the following
authentication mechanisms depending on what your MongoDB server supports:

#. ``SCRAM-SHA-256``
#. ``SCRAM-SHA-1``
#. ``MONGODB-CR``

Server versions 3.6 and earlier use ``MONGODB-CR`` as the default
mechanism. Newer versions of the server use one of the mechanisms for
which they advertise support.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your MongoDB username
* ``password`` - your MongoDB user's password
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the default authentication mechanism using a connection
      string, omit the mechanism. Your code to instantiate a ``MongoClient``
      should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>");

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism using the
      ``MongoCredential`` class, use the ``createCredential()`` method. Your
      code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-default.rst

For more information on the challenge-response (CR) and salted
challenge-response authentication mechanisms (SCRAM) that MongoDB supports,
see the :manual:`SCRAM </core/security-scram/>` section of the server manual.

.. _scram-sha-256-auth-mechanism:

``SCRAM-SHA-256``
~~~~~~~~~~~~~~~~~

.. note::

   ``SCRAM-SHA-256`` is the default authentication method for MongoDB starting
   in MongoDB 4.0.

``SCRAM-SHA-256`` is a salted challenge-response authentication mechanism
(SCRAM) that uses your username and password, encrypted with the ``SHA-256``
algorithm to authenticate your user.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your MongoDB username
* ``password`` - your MongoDB user's password
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-256`` authentication mechanism using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-256`` in your connection string. Your code to instantiate
      a ``MongoClient`` should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-256");

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism using the
      ``MongoCredential`` class, use the
      :java-docs:`createScramSha256Credential() </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createScramSha256Credential(java.lang.String,java.lang.String,char[])>`
      method. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-sha256.rst

.. _scram-sha-1-auth-mechanism:

``SCRAM-SHA-1``
~~~~~~~~~~~~~~~

.. note::
   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions
   3.0, 3.2, 3.4, and 3.6.

``SCRAM-SHA-1`` is a salted challenge-response mechanism (SCRAM) that uses your
username and password, encrypted with the ``SHA-1`` algorithm to authenticate
your user.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your MongoDB username
* ``password`` - your MongoDB user's password
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-1`` authentication mechanism using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-1`` in your connection string. Your code to instantiate
      a ``MongoClient`` should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-1");

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism using the
      ``MongoCredential`` class, use the
      :java-docs:`createScramSha1Credential() </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createScramSha1Credential(java.lang.String,java.lang.String,char[])>`
      method. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-sha1.rst


.. _mongodb-cr-auth-mechanism:

``MONGODB-CR``
~~~~~~~~~~~~~~

``MONGODB-CR`` is a challenge-response authentication mechanism that uses your
username and password to authenticate your user. This authentication
mechanism was deprecated starting in MongoDB 3.6 and is no longer
supported as of MongoDB 4.0.

You cannot specify this method explicitly; refer to the fallback provided
by the :ref:`Default authentication mechanism <default-auth-mechanism>` to
connect using ``MONGODB-CR``.

.. _mongodb-aws-auth-mechanism:

``MONGODB-AWS``
~~~~~~~~~~~~~~~

.. note::
   The MONGODB-AWS authentication mechanism is only available in MongoDB
   versions 4.4 and later.

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - value of your ``AWS_ACCESS_KEY_ID``
* ``password`` - value your ``AWS_SECRET_ACCESS_KEY``
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.
* ``awsSessionToken`` - value of your ``AWS_SESSION_TOKEN`` *(optional)*

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``MONGODB-AWS`` authentication mechanism using a
      connection string, assign the ``authMechanism`` parameter the value
      ``MONGODB-AWS`` in your connection string. Your code to instantiate
      a ``MongoClient`` should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=MONGODB-AWS");

      If you need to specify an AWS session token, include it in the
      ``authMechanismProperties`` parameter as follows using the format
      ``AWS_SESSION_TOKEN:<awsSessionToken>``. Your code to instantiate
      a ``MongoClient`` with a session token should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<awsSessionToken>");


   .. tab::
      :tabid: MongoCredential

      To specify the ``MONGODB-AWS`` authentication mechanism using the
      ``MongoCredential`` class, use the
      :java-docs:`createAwsCredential() </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createAwsCredential(java.lang.String,char%5B%5D)>`
      method. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-aws.rst

      If you need to specify an AWS session token, you can add it using
      one of the following choices:

      - **Specify your AWS session token in a connection string.**

        If you prefer to pass the AWS session token in the connection string
        alongside your MongoCredential specify your authentication mechanism 
        in the ``authMechanism`` parameter and your session token in the 
        ``authMechanismProperties`` parameter. Then, add it to your
        ``MongoClientSettings`` by calling the 
        :java-docs:`applyConnectionString() </apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.Builder.html#applyConnectionString(com.mongodb.ConnectionString)>`
        method as follows:

        .. include:: /includes/fundamentals/code-snippets/auth-credentials-aws-session.rst

      - **Specify your AWS session token in a MongoCredential.**

        You can include your AWS session token in your ``MongoCredential``
        instance by specifying it in a call to the
        :java-docs:`withMechanismProperty() </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#withMechanismProperty(java.lang.String,T)>`
        method as shown below:

        .. code-block:: java

           MongoCredential.createAwsCredential("<username>", "<password>".toCharArray()) .withMechanismProperty("AWS_SESSION_TOKEN", "<awsSessionToken>");

      - **Specify your AWS session token in an environment variable.**

        In your client execution environment, set an environment variable
        called ``AWS_SESSION_TOKEN`` and assign your token to it. The value is
        automatically picked up by your MongoClient when you specify the
        ``MONGODB-AWS`` authentication mechanism.

.. _x509-auth-mechanism:

``X.509``
~~~~~~~~~

The ``X.509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate your user, identified by the relative distinguished names
(RDNs) of your client certificate. When you specify the ``X.509``
authentication mechanism, the server authenticates the connection using
the subject name of the client certificate.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``X.509`` authentication mechanism using a connection
      string, assign the ``authMechanism`` parameter the value ``MONGODB-X509``
      value to the ``authMechanism`` and enable TLS by assigning the ``tls``
      parameter a ``true`` value. Your code to instantiate a ``MongoClient``
      should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=MONGODB-X509&tls=true");

   .. tab::
      :tabid: MongoCredential

      To specify the ``X.509`` authentication mechanism using the
      ``MongoCredential`` class, use the
      :java-docs:`createMongoX509Credential() </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createMongoX509Credential(java.lang.String)>`
      method. Also, enable TLS by calling the
      :java-sync-api:`applyToSslSettings() <com/mongodb/MongoClientSettings.Builder.html#applyToSslSettings(com.mongodb.Block)>`
      method and setting the ``enabled`` property to ``true`` in the
      :java-docs:`SslSettings.Builder </apidocs/mongodb-driver-core/com/mongodb/connection/SslSettings.Builder.html>`
      block. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-x509.rst

For additional information on configuring your application to use
certificates as well as TLS/SSL options, see our
:doc:`TLS/SSL guide </fundamentals/connection/tls>`.
