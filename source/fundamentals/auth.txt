.. _authentication-mechanisms:

=========================
Authentication Mechanisms
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _authentication-mechanisms-java:

Overview
--------

In this guide, you can learn how to authenticate with MongoDB using each
**authentication mechanism** available in the MongoDB Community Edition.
Authentication mechanisms are processes by which the driver and server
confirm identity and establish trust to ensure security.

The mechanisms that you can use with the latest version of MongoDB Community
Edition are as follows:

* :ref:`Default <default-auth-mechanism>`
* :ref:`SCRAM-SHA-256 <scram-sha-256-auth-mechanism>`
* :ref:`SCRAM-SHA-1 <scram-sha-1-auth-mechanism>`
* :ref:`MONGODB-CR <mongodb-cr-auth-mechanism>`
* :ref:`MONGODB-AWS <mongodb-aws-auth-mechanism>`
* :ref:`X.509 <x509-auth-mechanism>`

To authenticate using ``Kerberos`` or ``LDAP``, see the
:doc:`Enterprise Authentication Mechanisms guide </fundamentals/enterprise-auth>`.
For more information on establishing a connection to your MongoDB cluster,
read our :doc:`Connection Guide </fundamentals/connection>`.

Specify an Authentication Mechanism
-----------------------------------

.. include:: /includes/fundamentals/auth-specify.rst

Mechanisms
----------

.. _default-auth-mechanism:

Default
~~~~~~~

The default authentication mechanism setting uses one of the following
authentication mechanisms depending on what your MongoDB server supports:

#. ``SCRAM-SHA-256``
#. ``SCRAM-SHA-1``
#. ``MONGODB-CR``

Server versions 3.6 and earlier use ``MONGODB-CR`` as the default
mechanism. Newer versions of the server use one of the mechanisms for
which they advertise support.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your MongoDB username
* ``password`` - your MongoDB user's password
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. _mongo-client-setting-with-mongo-credential-example:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the default authentication mechanism using a connection
      string, omit the mechanism. Your code to instantiate a ``MongoClient``
      should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>");

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism using the
      ``MongoCredential`` class, use the ``createCredential()`` method. Your
      code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-default.rst

For more information on the challenge-response (CR) and salted
challenge-response authentication mechanisms (SCRAM) that MongoDB supports,
see the :manual:`SCRAM </core/security-scram/>` section of the server manual.

.. _scram-sha-256-auth-mechanism:

``SCRAM-SHA-256``
~~~~~~~~~~~~~~~~~

.. note::

   ``SCRAM-SHA-256`` is the default authentication method for MongoDB starting
   in MongoDB 4.0.

``SCRAM-SHA-256`` is a salted challenge-response authentication mechanism
(SCRAM) that uses your username and password, encrypted with the ``SHA-256``
algorithm, to authenticate your user.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your MongoDB username.
* ``password`` - your MongoDB user's password.
* ``hostname`` - network address of your MongoDB server, accessible by your client.
* ``port`` - port number of your MongoDB server.
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-256`` authentication mechanism using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-256`` in your connection string. Your code to instantiate
      a ``MongoClient`` should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-256");

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism using the
      ``MongoCredential`` class, use the
      `createScramSha256Credential() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createScramSha256Credential(java.lang.String,java.lang.String,char[])>`__
      method. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-sha256.rst

.. _scram-sha-1-auth-mechanism:

``SCRAM-SHA-1``
~~~~~~~~~~~~~~~

.. note::
   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions
   3.0, 3.2, 3.4, and 3.6.

``SCRAM-SHA-1`` is a salted challenge-response mechanism (SCRAM) that uses your
username and password, encrypted with the ``SHA-1`` algorithm, to authenticate
your user.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your MongoDB username.
* ``password`` - your MongoDB user's password.
* ``hostname`` - network address of your MongoDB server, accessible by your client.
* ``port`` - port number of your MongoDB server.
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-1`` authentication mechanism using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-1`` in your connection string. Your code to instantiate
      a ``MongoClient`` should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-1");

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism using the
      ``MongoCredential`` class, use the
      `createScramSha1Credential() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createScramSha1Credential(java.lang.String,java.lang.String,char[])>`__
      method. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-sha1.rst

.. _mongodb-cr-auth-mechanism:

``MONGODB-CR``
~~~~~~~~~~~~~~

``MONGODB-CR`` is a challenge-response authentication mechanism that uses your
username and password to authenticate your user. This authentication
mechanism was deprecated starting in MongoDB 3.6 and is no longer
supported as of MongoDB 4.0.

You cannot specify this method explicitly; refer to the fallback provided
by the :ref:`default authentication mechanism <default-auth-mechanism>` to
connect using ``MONGODB-CR``.

.. _mongodb-aws-auth-mechanism:

``MONGODB-AWS``
~~~~~~~~~~~~~~~

.. note::

   The MONGODB-AWS authentication mechanism is available for MongoDB
   deployments on MongoDB Atlas.

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user. To learn more about configuring MongoDB Atlas, see the
:atlas:`Set Up Passwordless Authentication with AWS IAM Roles <security/passwordless-authentication/#set-up-passwordless-authentication-with-aws-iam-roles>`
guide.

You can authenticate using the ``MONGODB-AWS`` mechanism by providing
your AWS IAM credentials in one of the following ways:

1.  Use the AWS SDK (v1 or v2) to authenticate an IAM role.
#. Specify your AWS credentials in a ``MongoCredential`` instance or connection
   string.
#. Specify your AWS credentials in environment variables.
#. Specify an ECS/EC2 endpoint that hosts your container credentials.

.. important::

   The driver uses the preceding order to check for your credentials and uses
   the first method that it finds.

To learn how to refresh your AWS IAM credentials, see the
:ref:`<java-mongodb-aws-refresh-credentials>` section.

.. _java-mongodb-aws-sdk:

Authenticate using the AWS SDK
+++++++++++++++++++++++++++++++

You can authenticate with your AWS IAM role using the `AWS SDK for Java <https://docs.aws.amazon.com/sdk-for-java/index.html>`__
versions 1 or 2.

If your project includes AWS SDK for Java **v1**, the driver uses the `DefaultAWSCredentialsProviderChain <https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html>`__
class to specify the credentials.

If your project includes AWS SDK for Java **v2**, the driver uses the `DefaultCredentialsProvider <https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/auth/credentials/DefaultCredentialsProvider.html>`__
class to specify the credentials.

To learn more about the AWS SDK, see the
`AWS SDK for Java <https://aws.amazon.com/sdk-for-java/>`__ Amazon
documentation.

Authenticate using AWS IAM Credentials
++++++++++++++++++++++++++++++++++++++

You authenticate with your AWS IAM role by specifying your credentials in
a connection string, a ``MongoCredential`` instance, or in environment
variables.

The examples in this section use the following placeholders:

* ``awsKeyId`` - value of your AWS access key ID
* ``awsSecretKey`` - value of your AWS secret access key
* ``atlasUri`` - network address of your MongoDB Atlas deployment
* ``hostname`` - hostname of your MongoDB Atlas deployment
* ``port`` - port of your MongoDB Atlas deployment
* ``awsSessionToken`` - value of your AWS session token *(optional)*

.. _mongodb-aws-connection-string-example:

Connection String Example
^^^^^^^^^^^^^^^^^^^^^^^^^

To authenticate using a connection string, assign the ``authMechanism``
parameter the value ``"MONGODB-AWS"`` and replace the placeholders with your
credentials in your connection string. The following code example shows how
you can instantiate a ``MongoClient`` using your connection string:

.. literalinclude:: /includes/fundamentals/code-snippets/MongoDbAwsAuth.java
   :language: java
   :dedent:
   :start-after: start connectionString
   :end-before: end connectionString

If you need to specify an AWS session token, include it in the
``authMechanismProperties`` parameter using the format
``AWS_SESSION_TOKEN:<awsSessionToken>``. The following code example shows
how you can instantiate a ``MongoClient`` that includes an AWS session token
using your connection string:

.. literalinclude:: /includes/fundamentals/code-snippets/MongoDbAwsAuth.java
   :language: java
   :dedent:
   :start-after: start connectionStringSessionToken
   :end-before: end connectionStringSessionToken

.. important:: URL-encode Your Credentials

   Make sure to URL-encode your credentials to prevent backslash or other
   characters from causing parsing errors. The following code example
   shows you how to URL-encode a sample string, represented by the placeholder
   ``fieldValue``:

   .. literalinclude:: /includes/fundamentals/code-snippets/MongoDbAwsAuth.java
      :language: java
      :dedent:
      :start-after: start urlEncode
      :end-before: end urlEncode

.. _mongodb-aws-mongocredential-example:

MongoCredential Example
^^^^^^^^^^^^^^^^^^^^^^^

To authenticate using a ``MongoCredential`` instance, specify your
credentials in the `createAwsCredential() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createAwsCredential(java.lang.String,char%5B%5D)>`__
method of the ``MongoCredential`` class.

The following code example shows how you can specify your credentials
using a ``MongoCredential`` instance:

.. literalinclude:: /includes/fundamentals/code-snippets/MongoDbAwsAuth.java
   :language: java
   :dedent:
   :start-after: start mongoCredential
   :end-before: end mongoCredential

If you need to specify an AWS session token, you can add it using one of the
following ways:

- Append the session token to your connection string parameters as shown in
  the :ref:`Connection String Example <mongodb-aws-connection-string-example>`.

- Add the session token to your ``MongoCredential``. Specify your AWS session
  token in your ``MongoCredential`` instance by passing it to the
  `withMechanismProperty() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#withMechanismProperty(java.lang.String,T)>`__
  method as shown below:

  .. literalinclude:: /includes/fundamentals/code-snippets/MongoDbAwsAuth.java
     :language: java
     :dedent:
     :start-after: start mongoCredentialSessionTokenCredential
     :end-before: end mongoCredentialSessionTokenCredential
     :emphasize-lines: 1,2,6,7

- Add the session token to an environment variable. In your client execution
  environment, set an environment variable called ``AWS_SESSION_TOKEN`` and
  assign the value of your token to it. This value is automatically discovered
  by your ``MongoClient`` when you specify the ``MONGODB-AWS`` authentication
  mechanism.

.. _mongodb-aws-environment-vars-example:

Environment Variables Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To authenticate using environment variables, specify the following
information:

- Specify the ``MONGODB-AWS`` authentication mechanism in your connection
  string as shown in the following example:

  .. code-block:: none

     mongodb://<atlasUri>/?authMechanism=MONGODB-AWS

- Set your AWS IAM role credentials in environment variables in your
  client execution environment. The following example shows how you can set
  them in a bash or similar shell:

  .. code-block:: bash

     export AWS_ACCESS_KEY_ID=<awsKeyId>
     export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
     export AWS_SECRET_TOKEN=<awsSessionToken>

  You can omit the line containing ``AWS_SECRET_TOKEN`` if you do not use
  an AWS session token for that role.

AWS ECS/EC2 Endpoint Example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To authenticate, specify the ECS or EC2 container relative URI in an
environment variable called ``AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`` and
assign the value of your container relative URI to it.

When using bash or a similar shell in your client execution environment, you
can set the environment variable, replacing the value of the placeholder
with your relative URI:

.. code-block:: bash

   export AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=<your ECS/EC2 endpoint>

.. important::

   To authenticate using an ECS/EC2 endpoint, you must unset the following
   environment variables because the driver otherwise attempts to authenticate
   using them:

   - ``AWS_ACCESS_KEY_ID``
   - ``AWS_SECRET_ACCESS_KEY``
   - ``AWS_SESSION_TOKEN``

To learn more about the AWS container credential provider and container
credentials, see the AWS documentation on `Container credentials <https://docs.aws.amazon.com/sdkref/latest/guide/feature-container-credentials.html>`__.

.. _java-mongodb-aws-refresh-credentials:

Refresh your Credentials
++++++++++++++++++++++++

The driver supports refreshing credentials to support assuming roles
or using the `Elastic Kubernetes Service <https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html>`__.
The following code example shows how you can specify a ``Supplier`` instance
that refreshes your credentials.

.. literalinclude:: /includes/fundamentals/code-snippets/MongoDbAwsAuth.java
   :language: java
   :dedent:
   :start-after: start refreshCredentials
   :end-before: end refreshCredentials
   :emphasize-lines: 5,9

.. _x509-auth-mechanism:

``X.509``
~~~~~~~~~

The ``X.509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate your user, identified by the relative distinguished names
(RDNs) of your client certificate. When you specify the ``X.509``
authentication mechanism, the server authenticates the connection using
the subject name of the client certificate.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``hostname`` - network address of your MongoDB server, accessible by your client.
* ``port`` - port number of your MongoDB server.
* ``authenticationDb`` - MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``X.509`` authentication mechanism using a connection
      string, assign the ``authMechanism`` parameter the value ``MONGODB-X509``
      and enable TLS by assigning the ``tls``
      parameter a ``true`` value. Your code to instantiate a ``MongoClient``
      should look something like this:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("mongodb://<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=MONGODB-X509&tls=true");

   .. tab::
      :tabid: MongoCredential

      To specify the ``X.509`` authentication mechanism using the
      ``MongoCredential`` class, use the
      `createMongoX509Credential() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#createMongoX509Credential(java.lang.String)>`__
      method. Also, enable TLS by calling the
      `applyToSslSettings() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.Builder.html#applyToSslSettings(com.mongodb.Block)>`__
      method and setting the ``enabled`` property to ``true`` in the
      `SslSettings.Builder <{+api+}/apidocs/mongodb-driver-core/com/mongodb/connection/SslSettings.Builder.html>`__
      block. Your code to instantiate a ``MongoClient`` should look something like this:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-x509.rst

For additional information on configuring your application to use
certificates as well as TLS/SSL options, see our
:doc:`TLS/SSL guide </fundamentals/connection/tls>`.
