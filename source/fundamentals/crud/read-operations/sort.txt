============
Sort Results
============

.. default-domain:: mongodb

Overview
--------

In this guide, we show you how to **sort** your queries.

Sorting orders the documents returned from your query by your specified 
**sort criteria**. Sort criteria are the rules you give MongoDB that describe
how you would like your data ordered. Some examples of sort criteria are:

* Smallest number to largest number
* Earliest time of day to latest time of day
* Alphabetical order by first name 

You should read this guide if you would like to:

* Perform ascending sorts and descending sorts.
* Combine sort criteria.
* Sort on the text score of a
  :manual:`text search </core/text-search-operators/>`.

.. _sorts-crud-sort-example:

The examples in this guide use a sample collection, ``sort_example``, that
contains the following documents:
  
.. code-block:: json
  
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


.. code-block:: java


.. code-block:: java
  :emphasize-lines: 5

    import static com.mongodb.client.model.Sorts.ascending;

    // define a cursor that can iterate through the results of the query
    MongoCursor<Document> cursor = collection.find()
        .sort(ascending("title")).iterator();
    // print out items in alphabetical order
    try {
      while (cursor.hasNext()) {
        System.out.println(cursor.next());
      }
    // close the cursor
    } finally {
      cursor.close();
    }

This sample code prints the documents in ascending order on the ``title`` field as follows:

.. code-block:: java

    Document{{_id=6, title=A Dance with Dragons, length=1104, author=Martin}}
    Document{{_id=3, title=Atlas Shrugged, length=1088, author=Rand}}
    Document{{_id=5, title=Cryptonomicon, length=918, author=Stephenson}}
    Document{{_id=4, title=Infinite Jest, length=1104, author=Wallace}}
    Document{{_id=2, title=Les Misérables, length=1462, author=Hugo}}
    Document{{_id=1, title=The Brothers Karamazov, length=824, author=Dostoyevsky}}

Sometimes, the order of two or more documents is ambiguous using a
specified sort. Consider the case of sorting by length: in the above case, 
both "A Dance with Dragons" and "Infinite Jest" have ``1104`` pages, so 
the order in which ``sort()`` returns them is not guaranteed. To resolve ties in 
your sorted results in a repeatable way, add additional fields to the 
``Sorts.ascending()`` function call. 
Call the ``sort()`` method, specifying ``length`` as 
the first field by which to sort and the ``title`` field as the second field. In the event 
that the ``length`` field comparison results in a tie, the operation compares the tied results 
using the ``title`` field:


.. code-block:: java
  :emphasize-lines: 3
    
    // sort first by length, then title
    MongoCursor<Document> cursor = collection.find()
        .sort(ascending("length", "title")).iterator();

This sample code prints your query results in ascending order by length. 
When there are two documents with the same ``length`` value, it resolves the tie using the 
``title`` field you specified as the second parameter.

.. code-block:: java

    Document{{_id=1, title=The Brothers Karamazov, length=824, author=Dostoyevsky}}
    Document{{_id=5, title=Cryptonomicon, length=918, author=Stephenson}}
    Document{{_id=3, title=Atlas Shrugged, length=1088, author=Rand}}
    Document{{_id=6, title=A Dance with Dragons, length=1104, author=Martin}}
    Document{{_id=4, title=Infinite Jest, length=1104, author=Wallace}}
    Document{{_id=2, title=Les Misérables, length=1462, author=Hugo}}

You can also sort by multiple fields in different orders, using ``Sorts.orderBy()``. 
Consider this example where you first sort on ``length`` in an ascending order, and then on
``title`` in a descending order:

.. code-block:: java
  :emphasize-lines: 7
    
    import static com.mongodb.client.model.Sorts.ascending;
    import static com.mongodb.client.model.Sorts.descending;
    import static com.mongodb.client.model.Sorts.orderBy;

    // sort first by length ascending, then title descending
    MongoCursor<Document> cursor = collection.find()
        .sort(orderBy(ascending("length"), descending("title")))
        .iterator();

In the returned documents, notice how the two books with the same 
length - "Infinite Jest" and "A Dance with Dragons" -
appear in the reverse of the order shown in the previous example:

.. code-block:: java

    Document{{_id=1, title=The Brothers Karamazov, length=824, author=Dostoyevksy}}
    Document{{_id=5, title=Cryptonomicon, length=918, author=Stephenson}}
    Document{{_id=3, title=Atlas Shrugged, length=1088, author=Rand}}
    Document{{_id=4, title=Infinite Jest, length=1104, author=Wallace}}
    Document{{_id=6, title=A Dance with Dragons, length=1104, author=Martin}}
    Document{{_id=2, title=Les Misérables, length=1462, author=Hugo}}

For additional information on the classes and methods mentioned on this
page, see the following API documentation:

- :java-sync-api:`FindIterable <com/mongodb/client/FindIterable.html>`
- :java-sync-api:`MongoCursor <com/mongodb/client/MongoCursor.html>`
- :java-docs:`Sorts </apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
