==============
Retrieve Data
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
database. To retrieve data, use read operations.

Read operations allow you to do the following:

- Retrieve a subset of documents from your collection using the :ref:`find operation <retrieve-find>` 
- Perform transformations on retrieved documents from your collection using the :ref:`aggregate operation <retrieve-aggregate>`
- Monitor real-time changes to your database using the :ref:`change stream <retrieve-watch>` 

Sample Data for Examples
~~~~~~~~~~~~~~~~~~~~~~~~

The following sections feature examples about how the owner of a paint
store manages their customers' orders. For each order, the owner keeps
track of the color and quantity, which corresponds to the ``color`` and
``qty`` fields in their ``paint_order`` collection: 

.. code-block:: json

    { "_id": 1, "color": "purple", "qty": 10 }
    { "_id": 2, "color": "green", "qty": 8 }
    { "_id": 3, "color": "purple", "qty": 4 }
    { "_id": 4, "color": "green", "qty": 11 }

Read operations
---------------

.. _retrieve-find:

Find
~~~~

Use the find operation to retrieve a subset of your existing data in
MongoDB. To further specify which documents to retrieve, you can sort,
skip, and limit the documents or fields.

To perform a find operation, call the ``find()`` method on an instance
of a ``MongoCollection``. This method searches a collection for documents that
match the query filter you provide. For more information on how to
specify a query, see our :doc:`Specify a Query
</fundamentals/crud/query-document>` guide. 

To access the results, you can iterate through the results using a
cursor. For more information on query filters, see our :doc:`Access Data
From a Cursor </fundamentals/crud/read-operations/cursor>` guide. 

Example
```````

The paint store would like to know which orders contain more than three, but
less than ten cans of paint.

To address this scenario, the paint store needs to find orders where the
quantity of paint ordered is greater than "3", but less than "10" : 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

For more information how to build filters, see our :doc:`Filters Builders
</fundamentals/builders/filters>` guide.

The following shows the output of the query specified above:

.. code-block:: json

    { "_id": 2, "color": "green", "qty": 8 }
    { "_id": 3, "color": "purple", "qty": 4 }

After the paint store runs this query, they find that orders with
``_id`` "2" and "3" contain more than three, but less than ten cans
of paint.

For a runnable ``find()`` example, see our :doc:`Find Multiple
Documents </usage-examples/find>` page. 

.. _retrieve-aggregate:

Aggregate
~~~~~~~~~

Use the aggregate operation to perform the stages in an aggregation
pipeline.  An aggregation pipeline is a multi-staged transformation that
produces an aggregated result. 

To perform an aggregate operation, call the ``aggregate()`` method on an
instance of a ``MongoCollection``. This method accepts aggregation
expressions to run in sequence. To perform transformations, you can
define aggregation stages that specify how to match documents, rename
fields and group values. For more information on aggregation, see our
:doc:`Aggregation  </fundamentals/aggregation>` guide.

Example
```````

The paint store would like to know which color is the most purchased
(highest quantity sold).

To address the scenario, the paint store needs to create an aggregation
pipeline that:

- Matches all the documents in the ``paint_order`` collection
- Groups orders by colors 
- Sums up the quantity field by color
- Sorts the results in descending order by quantity

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin aggregateExample
   :end-before: end aggregateExample

The following shows the output of the query specified above:

.. code-block:: json

    { "_id": "green", "qty": 19 }
    { "_id": "purple", "qty": 14 }

After the paint store runs the query, they find that "green" is the most
purchased color.

For more information on how to construct an aggregation pipeline, see
the MongoDB server manual page on :manual:`Aggregation </aggregation>`.

.. _retrieve-watch:

Change Streams
~~~~~~~~~~~~~~

Open a change stream to monitor real-time changes to a collection.
Change streams can subscribe to types of data changes specified and 
immediately produce change events. For more information on change
streams, see the MongoDB server manual page on :manual:`Change Streams
</changeStreams>`. 

To open a change stream, call the ``watch()`` method on an instance of a
``MongoCollection``, ``MongoDatabase`` or ``MongoClient``. You can pass
an aggregation pipeline to this method to notify you and react as soon as a
change occurs.

Example
```````

The owner would like to receive notifications for when customers submit new
orders or update their orders.

To address this scenario, the owner needs to:

- Create an aggregation pipeline that filters for "insert" and "update" operation types
- Create a change stream on the aggregation pipeline
- Print changes picked up by the change stream

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin watchExample
   :end-before: end watchExample

After creating the change stream, the owner gets notifications for
future inserts or updates to their collection.

An insert notification for the owner looks similar to the following:

.. code:: json

   Received a change to the collection: ChangeStreamDocument{
      operationType=OperationType{value='insert'},
      resumeToken={"_data": "825EC..."},
      namespace=database.collection,
      destinationNamespace=null,
      fullDocument=Document{{_id=5, color=blue, qty=8}},
      documentKey={"_id": 5},
      clusterTime=Timestamp{...},
      updateDescription=null,
      txnNumber=null,
      lsid=null
   }

For a runnable ``watch()`` example, see our :doc:`Watch For
Changes </usage-examples/watch>` page.
