==============
Retrieve Data
==============

.. default-domain:: mongodb


In this guide, you learn how to use read operations to retrieve data from
your MongoDB database. 

Read operations allow you to do the following:

- Retrieve a subset of documents from your collection
- Perform transformations on matched documents from your collection
- Monitor real-time changes to your database

The following examples use documents in the ``paint_orders`` collection
which represent invoices of a paint store:

.. code-block:: json

    { "_id": 1, "color": "red", "qty": 16 }
    { "_id": 2, "color": "purple", "qty": 10 }
    { "_id": 3, "color": "green", "qty": 8 }
    { "_id": 4, "color": "purple", "qty": 4 }
    { "_id": 5, "color": "red", "qty": 9 }
    { "_id": 6, "color": "green", "qty": 11 }

Find
----

A find operation is useful if you want a subset of the existing data
based on your query filter. You can further specify how to retrieve
documents such as how to sort results, skip results, limit results and 
limit the fields to return. 

You can perform a find operation by using the ``find()`` method on a
collection. This method searches a collection for documents that
match the query filter you provide. For more information, see our
:doc:`Specify a Query </fundamentals/crud/query-document>` guide. 

To access the results, you can iterate through the results using a
cursor. For more information, see our :doc:`Access Data From a Cursor
</fundamentals/crud/read-operations/cursor>` guide. 

Example
~~~~~~~

The following example filters for invoices where their quantity is
greater than ``9``, but less than ``15`` in the ``paint_orders``
collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

The following shows the output of the query above:

.. code-block:: json

    { "_id": 2, "color": "purple", "qty": 10 }
    { "_id": 6, "color": "green", "qty": 11 }

For fully-runnable ``find()`` example, see our :doc:`Find Multiple
Documents </usage-examples/find>` page. 

Aggregate
---------

An aggregate operation is useful if you want to perform an ordered
pipeline of transformations to your matched documents. You can perform
transformations such as matching documents, renaming fields and grouping
values. 

You can perform an aggregation operation by using the ``aggregate()``
method on a collection. This method accepts aggregation expressions to
run in sequence. For more information, see our :doc:`Aggregation 
</fundamentals/aggregation>` guide.

Example
~~~~~~~

The following example uses an aggregation pipeline to group invoices by
colors and sums up their quantity for the documents in the
``paint_orders`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin aggregateExample
   :end-before: end aggregateExample

The following shows the output of the query above:

.. code-block:: json

    { "_id": "green", "qty": 19 }
    { "_id": "red", "qty": 25 }
    { "_id": "purple", "qty": 14 }

For more information on how to construct an aggregation pipeline, see
the MongoDB server manual page on :manual:`Aggregation </aggregation>`.

Watch
-----

A watch operation is useful if you want to monitor write operations to
the collection in real-time. You can monitor the operations using a
change stream. For more information on change streams, see the MongoDB
server manual page on :manual:`Change Streams </changeStreams>`. 

You can perform a watch operation using the ``watch()`` method on a
``MongoCollection``, ``MongoDatabase`` or ``MongoClient``. You can pass
this method to an aggregation pipeline to perform actions as soon as a
write operation occurs on the collection.

Example
~~~~~~~

The following example creates a watch stream for ``insert`` and ``update``
operations on an aggregation pipeline with the documents in the
``paint_orders`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin watchExample
   :end-before: end watchExample

For a fully-runnable ``watch()`` example, see our :doc:`Watch For
Changes </usage-examples/watch>` page.
