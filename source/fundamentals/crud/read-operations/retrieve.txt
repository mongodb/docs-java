==============
Retrieve Data
==============

.. default-domain:: mongodb


Read operations allow you to retrieve data from your MongoDB database.

You can retrieve data using find, aggregate, and watch operations.

A find operation is useful if you want a subset of the existing data
based on your query filter. You can further specify which documents to
retrieve such as how to sort results, skip results, limit results and
limit the fields to return. 

An aggregate operation is useful if you want to perform an ordered
pipeline of transformations to the matched data. You can perform all
find operations, rename fields, calculate fields, summarize data and
group values.

A watch operation is useful if you want to monitor the database in
real-time. You can specify which write operations to monitor such as
insert, update and delete.

The following examples use documents in the ``paint_orders`` collection
which represent invoices of a paint store:

.. code-block:: json

    { "_id": 1, "color": "red", "qty": 16 }
    { "_id": 2, "color": "purple", "qty": 10 }
    { "_id": 3, "color": "green", "qty": 8 }
    { "_id": 4, "color": "purple", "qty": 4 }
    { "_id": 5, "color": "red", "qty": 9 }
    { "_id": 6, "color": "green", "qty": 11 }

Find
----

The find operation allows you to specify a query to show specific results
using the ``find()`` method. This method makes a call to the collection
specified with the query filter you provide. For more information, see
our :doc:`Specify a Query </fundamentals/crud/query-document>` guide. 

To access the results, you can iterate through the results using a
cursor. For more information, see our :doc:`Access Data From a Cursor
</fundamentals/crud/read-operations/cursor>` guide. 

The following example filters for orders where their quantity is greater
than 9, but less than 15 in the ``paint_orders`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

The following shows the output of the query above:

.. code-block:: json

    { "_id": 2, "color": "purple", "qty": 10 }
    { "_id": 6, "color": "green", "qty": 11 }

See :doc:`find a document </usage-examples/find>` and :doc:`find
multiple documents </usage-examples/findOne>` for fully-runnable
``find()`` and ``findOne()`` examples.

Aggregate
---------

The aggregate operation allows you to run a custom processing pipeline
to retrieve data from your collection using the ``aggregate()`` method.
This method accepts aggregation expressions to run in sequence. These
expressions let you filter, group, and arrange the result data from a
collection. For more information, see our :doc:`Aggregation
<../../aggregation>` guide.

The following example groups orders by colors and sums up their
quantity in the ``paint_orders`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin aggregateExample
   :end-before: end aggregateExample

The following shows the output of the query above:

.. code-block:: json

    { "_id": "green", "qty": 19 }
    { "_id": "red", "qty": 25 }
    { "_id": "purple", "qty": 14 }

See the MongoDB server manual pages on :manual:`aggregation </aggregation>`
for more information on how to construct an aggregation pipeline.

Watch
-----

The watch operation allows you to monitor write operations to documents
in a collection using the ``watch()`` method. For more information on
write operations, see our :doc:`Write Operation
<../write-operations>` page. 

You can pass this method to an aggregation pipeline to perform actions
as soon as a write operation occurs on the collection. 

The following example creates a watch stream for insert and update
operations in the ``paint_orders`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin watchExample
   :end-before: end watchExample

See :doc:`watch for changes <../../../usage-examples/watch>` for a
fully-runnable ``watch()`` example.
