==============
Retrieve Data
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
database. To retrieve data, use read operations.

Read operations allow you to do the following:

- :ref:`Retrieve a subset of documents from your collection <retrieve-find>`
- :ref:`Perform transformations on retrieved documents from your collection <retrieve-aggregate>`
- :ref:`Monitor real-time changes to your database <retrieve-watch>`

Paint Orders
~~~~~~~~~~~~~

The examples in the following sections are about a paint store that
keeps track of orders they need to fulfill. The paint store keeps track
of orders with the ``color`` and ``qty`` fields in their
``paint_orders`` collection: 

.. code-block:: json

    { "_id": 1, "color": "purple", "qty": 10 }
    { "_id": 2, "color": "green", "qty": 8 }
    { "_id": 3, "color": "purple", "qty": 4 }
    { "_id": 4, "color": "green", "qty": 11 }

Read operations
---------------

.. _retrieve-find:

Find
~~~~

Use the find operation to retrieve a subset of your existing data in
MongoDB. To further specify which documents to retrieve, you can sort,
skip, and limit the documents or fields.

To perform a find operation, use the ``find()`` method on a
collection. This method searches a collection for documents that
match the query filter you provide. For more information on how to
specify a query, see our :doc:`Specify a Query
</fundamentals/crud/query-document>` guide. 

To access the results, you can iterate through the results using a
cursor. For more information on query filters, see our :doc:`Access Data
From a Cursor </fundamentals/crud/read-operations/cursor>` guide. 

Example
```````

The paint store would like to know which orders contain at least three, but
less than ten cans of paint.

To address this scenario, the paint store needs to query the
``paint_orders`` collection with a filter for orders where their
quantity is greater than "3", but less than "10" : 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

For more information how to use filters, see our :doc:`Filters Builders
</fundamentals/builders/filters>` guide.

The following shows the output of the query specified above:

.. code-block:: json

    { "_id": 2, "color": "green", "qty": 8 }
    { "_id": 3, "color": "purple", "qty": 4 }

After the paint store runs this query, they find that orders with
``_id`` "2" and "3" contain at least three, but less than ten cans
of paint.

For a runnable ``find()`` example, see our :doc:`Find Multiple
Documents </usage-examples/find>` page. 

.. _retrieve-aggregate:

Aggregate
~~~~~~~~~

Use the aggregate operation to perform an aggregation pipeline.  An
aggregation pipeline is a multi-staged transformation that produces an
aggregated result. To perform transformations, you can define in stages
how to match documents, rename fields and group values. 

To perform an aggregate operation, use the ``aggregate()`` method on a
collection. This method accepts aggregation expressions to run in
sequence. For more information on aggregation, see our :doc:`Aggregation
</fundamentals/aggregation>` guide.

Example
```````

The paint store would like to know which color is the most purchased.

To address the scenario, the paint store needs to create an aggregation
pipeline that:

- matches all the documents in the ``paint_orders`` collection
- groups orders by colors 
- sums up their quantity for the documents
- sorts the results in descending order by quantity

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin aggregateExample
   :end-before: end aggregateExample

The following shows the output of the query above:

.. code-block:: json

    { "_id": "green", "qty": 19 }
    { "_id": "purple", "qty": 14 }

After the paint store runs the query, they find that green is the most
purchased color.

For more information on how to construct an aggregation pipeline, see
the MongoDB server manual page on :manual:`Aggregation </aggregation>`.

.. _retrieve-watch:

Change Streams
~~~~~~~~~~~~~~

Open a change stream to monitor real-time changes to a collection.
Change streams subscribe to all data changes specified and 
immediately react to them. For more information on change streams, see
the MongoDB server manual page on :manual:`Change Streams </changeStreams>`. 

To open a change stream, use the ``watch()`` method on a
``MongoCollection``, ``MongoDatabase`` or ``MongoClient``. You can pass
this method to an aggregation pipeline to notify you and react as soon as a
change occurs on the collection.

Example
```````

The paint store would like notifications for when customers send in new
orders or update their order.

To address this scenario, the paint store needs to create a watch stream
in the ``paint_orders`` collection for the ``insert`` and ``update``
operations on an aggregation pipeline with the documents: 

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin watchExample
   :end-before: end watchExample

After the paint store runs the query, they will get notifcations for any
future inserts or updates to thier collection.

For a runnable ``watch()`` example, see our :doc:`Watch For
Changes </usage-examples/watch>` page.
