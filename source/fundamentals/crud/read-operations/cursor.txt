=========================
Access Data From a Cursor
=========================

.. default-domain:: mongodb

Read operations that return multiple documents do not immediately return
all values matching the query. Because a query can potentially match
large sets of documents, these operations rely upon an object called a
:java-docs:`MongoCursor </apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html>`.

A ``MongoCursor`` fetches documents in batches to reduce both memory
consumption and network bandwidth usage. It can iterate through the
fetched documents and ensures that the cursor closes if there is an
early termination. 

This page uses an initiating method, ``find()`` to show how to access
data from a cursor. In each example, we call the terminal method,
``cursor()`` to allow us to perform operations on the database. 

The following shows the ``find()`` method as a cursor:

.. code-block:: java
   :copyable: true
   
   MongoCursor<Document> cursor = collection.find().cursor();

Usage Patterns
--------------

Work with cursors using **cursor paradigms**. Cursor paradigms
allow you to access query results one document at a time, abstracting
away network and caching logic. 

Functional Iteration
~~~~~~~~~~~~~~~~~~~~~

Pass a function to the 
`forEachRemaining() <https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Iterator.html?is-external=true#forEachRemaining(java.util.function.Consumer)>`_ 
method of any cursor to iterate through results in a functional style:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin forEachRemainingIteration
   :end-before: end forEachRemainingIteration

.. note::

   Initiating methods implement the Iterable interface. We sometimes
   use an enhanced for-each loop to iterate through results:

   .. code-block:: java

      for (Document cur : collection.find()) {
         ..
      }

   Iterating this way is not preferable because if an exception is
   thrown before the loop completes, the cursor will not close. Using a
   ``MongoCursor`` allows us to ensure the cursor as shown in the
   :ref:`cursor cleanup section <cursor_cleanup>`.


Conditional Iteration
~~~~~~~~~~~~~~~~~~~~~

Use the :java-docs:`hasNext() </apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html#hasNext()>`
method to check if there are any documents available in the cursor, and then use the
:java-docs:`next() </apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html#next()>`
method to retrieve the next available document from the cursor:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin manualIteration
   :end-before: end manualIteration

.. _cursor_cleanup:

Cursor Cleanup
--------------

Close
~~~~~

Use the
:java-docs:`close() </apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html#close()>`
method to free up a cursor's consumption of resources in both the client
application and the MongoDB server:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin explicitCloseExample
   :end-before: end explicitCloseExample
   
You can also use a `try-with-resources statement <https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html>`_:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin implicitCloseExample
   :end-before: end implicitCloseExample

The cursor here is automatically closed when execution is complete or if
an exception occurs.
