=========================
Access Data From a Cursor
=========================

.. default-domain:: mongodb

Read operations that return multiple documents do not immediately return
all values matching the query. Because a query can potentially match
large sets of documents, these operations rely upon a
:java-docs:`FindIterable
<apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html>`.

A ``FindIterable`` iterates through all the documents in your collection
to find documents that match your search criteria. It also allows you to
further specify which documents you see by setting paramaters though methods. 

This page uses an initiating method, ``find()`` to show how to access
data from a ``FindIterable``. 

Terminal Methods
----------------

Execute database operations on a ``FindIterable`` using terminal
methods. Terminal methods return a single value after iterating thorugh
all the results.

First
~~~~~

Use the :java-docs:`first() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#first()>`
method to retireve the first document in your query results:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin firstExample
   :end-before: end firstExample

Into
~~~~

Use the :java-docs:`into() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#into(A)>`
method to store your query results in an ``ArrayList``: 

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin intoExample
   :end-before: end intoExample
   
Cursor
~~~~~~

Use the :java-docs:`cursor() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#cursor()>`
method to iterate through fetched documents and ensure that the cursor
closes if there is an early termination.

.. code-block:: java
   :copyable: true
   
   MongoCursor<Document> cursor = collection.find().cursor();

Usage Patterns
--------------

Work with cursors using **cursor paradigms**. Cursor paradigms
allow you to access query results one document at a time, abstracting
away network and caching logic. 

Functional Iteration
~~~~~~~~~~~~~~~~~~~~~

Pass a function to the 
`forEach() <https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Iterable.html?is-external=true#forEach(java.util.function.Consumer)>`_ 
method of a ``FindIterable`` to iterate through results in a functional style:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin forEachIteration
   :end-before: end forEachIteration

.. warning::

   Initiating methods implement the Iterable interface which allows you
   to iterate using iterator methods. Sometimes, we use an enhanced
   for-each loop to iterate through results: 

   .. code-block:: java

      for (Document cur : collection.find()) {
         ...
      }

   Iterating this way is not preferable because if an exception is
   thrown before the loop completes, the cursor will not close. Using a
   ``MongoCursor`` allows us to ensure the cursor closes as shown in the
   :ref:`cursor cleanup section <cursor_cleanup>`.

Conditional Iteration
~~~~~~~~~~~~~~~~~~~~~

Use the :java-docs:`hasNext() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html#hasNext()>`
method to check if there are any documents available in the cursor, and then use the
:java-docs:`next() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html#next()>`
method to retrieve the next available document from the cursor:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin manualIteration
   :end-before: end manualIteration

.. _cursor_cleanup:

Cursor Cleanup
--------------

Close
~~~~~

Use the
:java-docs:`close() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html#close()>`
method to free up a cursor's consumption of resources in both the client
application and the MongoDB server:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin explicitCloseExample
   :end-before: end explicitCloseExample
   
Try with Resources Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use a `try-with-resources statement
<https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html>`_
to automatically free up a cursor's consumption of resources in both the
client application and the MongoDB server:

.. literalinclude:: /includes/fundamentals/code-snippets/Cursor.java
   :language: java
   :dedent:
   :start-after: begin implicitCloseExample
   :end-before: end implicitCloseExample
