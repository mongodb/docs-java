===========
Search text
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you will learn how to perform a text search in MongoDB.

Text search allows you to search a string field in your collection for
terms or phrases. This is useful for searching unstructured text such as
transcripts, resumes, essays, or web pages. 

Sample Documents
~~~~~~~~~~~~~~~~

In the following examples, a junior year student is browsing through
computer science courses to take at their college. The documents in the
``junior_courses`` collection represents the courses available for the
student to pick from: 

.. code-block:: json

    { "_id": 1, "course": "Artificial Intelligence" }
    { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science" }
    { "_id": 3, "course": "Web Database Applications" }
    { "_id": 4, "course": "Computer Science Seminar" }
    { "_id": 5, "course": "Computer Hacking Revealed" }
    { "_id": 6, "course": "Advanced Computer Game Programming" }
    { "_id": 7, "course": "Image Processing in Computer Science" }

Text Index
----------

Before you preform a text search, you must specify the search field in a
text index on your collection. 

The text index specifies the fields to query in a text search. There can
only be one text index per collection with a field whose value is a
string or an array of string elements. 

For the following examples, we perform text searches on the ``course``
field in the ``junior_courses`` collection. To enable text searches on
the ``course`` field, create a text index using the following snippet: 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

If there was another field, ``description`` that contains a description of
the course, you can create a compound index to perform a text search in
both fields using the following snippet:

.. code-block:: java

    collection.createIndex(Indexes.compoundIndex(Indexes.text("course"), Indexes.text("description")));

For more information, see our server manual entry on :manual:`text
indexes </core/index-text/>`.

Searching
---------

To perform a text search, use the ``text()`` method of the ``Filters``
builder. 

The ``text()`` method performs a text search on the fields indexed with
a text index. The text search matches documents which contain a
specified search term. 

You can pass in ``TextSearchOptions`` as the second parameter to specify
additional text search options to handle case sensitivity, diacritic
sensitivity and language. 

For more information, see the API Documentation on the
:java-core-api:`text()
<com/mongodb/client/model/Filters.html#text(java.lang.String)>` method
and :java-core-api:`TextSearchOptions<com/mongodb/client/model/TextSearchOptions.html>`.

By a Term
~~~~~~~~~

To search for a term in your text index, pass the term as a string
to the ``text()`` method. 

If you want to match multiple terms in your text index, separate your
terms with spaces. The ``text()`` method performs a logical OR search on
each term and returns documents that contains any of the terms. 

Example 
```````

The student would like to see which courses mention "Computer" in their
name. 

To address this scenario, the student performs a text search on
documents that contain the term "Computer": 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin wordExample
   :end-before: end wordExample

The following shows the output of the code above:

.. code-block:: json
   :copyable: false

   { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science" }
   { "_id": 4, "course": "Computer Science" }
   { "_id": 5, "course": "Computer Hacking Revealed" }
   { "_id": 6, "course": "Advanced Computer Game Programming" }
   { "_id": 7, "course": "Image Processing in Computer Science" }

.. note::

    The output of the snippet above is equivalent to performing the
    following text search:

    .. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
       :language: java
       :dedent:
       :start-after: begin multiWordExample
       :end-before: end multiWordExample

By a Phrase
~~~~~~~~~~~

To search for a phrase in your text index, pass the phrase with escaped quotes
to the ``text()`` method.  

If you don't add escaped quotes, the method performs a logical OR on the
terms listed.

Example 
```````

The student would like to know which courses mention "Computer Science"
in their name. 

To address this scenario, the student performs a text search on
documents that contain the phrase "Computer Science":

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin phraseExample
   :end-before: end phraseExample

The following shows the output of the code above:

.. code-block:: json
   :copyable: false

   { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science" }
   { "_id": 4, "course": "Computer Science" }
   { "_id": 7, "course": "Image Processing in Computer Science" }

Excluding a Term
~~~~~~~~~~~~~~~~

To exclude a term in your text search, prefix a minus sign, ``-``, to
each term you want to omit. 

Example 
```````
The student would like to know which courses only mention "Computer".

To address this scenario, the student performs a text search on
documents that contain the term "Computer", but not contain the term
"Science": 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin negateExample
   :end-before: end negateExample

The following shows the output of the code above:

.. code-block:: json
   :copyable: false

   { "_id": 5, "course": "Computer Hacking Revealed" }
   { "_id": 6, "course": "Advanced Computer Game Programming" }

Sort by Relevance
~~~~~~~~~~~~~~~~~

Text search assigns a ``metsTextScore`` to each match that represents
the relevance of a document to the specified text search query filter.
A high score resembles a high relevance and a low score resembles a low
relevance. 

Example 
```````
The student would like to see which course mentioning "Computer Science"
is the most relevant. 

To address this scenario, the student performs the following actions:

- A text search for the term "Computer Science"
- A projection to calculate the ``metaTextScore``
- A sort to display the results in descending order

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin scoreExample
   :end-before: end scoreExample

The following shows the output of the code above:

.. code-block:: json
   :copyable: false

   { "_id": 4, "course": "Computer Science", "score": 1.5 }
   { "_id": 7, "course": "Image Processing in Computer Science", "score": 1.25 }
   { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science", "score": 1.2 }

After the student runs the query, the course with the ``_id`` as 4 is
the most relevant to their search.

For more information, see our server manual entry on :manual:`meta
</reference/operator/aggregation/meta/#mongodb-expression-exp.-meta>`.
