===========
Search text
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you will learn how to perform a text search in MongoDB.

Text search allows you to search a string field in your collection for
words or phrases. Before you preform a text search, you must specify the
search field in a text index on your collection. 

You can also specify additional options to the operator to handle case
sensitivity, word stemming (e.g. plural forms, tense) and words for
a supported language. This is useful for unstructured text such as
transcripts, resumes, essays, or web pages. 

Sample Documents
~~~~~~~~~~~~~~~~

In the following examples, a junior year student is browsing through
some computer science courses at their college. The ``junior_courses``
collection represents the courses available for the student to pick
from: 

.. code-block:: json

    { "_id": 1, "course": "Artificial Intelligence" }
    { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science" }
    { "_id": 3, "course": "Web Database Applications" }
    { "_id": 4, "course": "Computer Science Seminar" }
    { "_id": 5, "course": "Computer Hacking Revealed" }
    { "_id": 6, "course": "Advanced Computer Game Programming" }
    { "_id": 7, "course": "Image Processing in Computer Science" }

Text Index
----------

The text index specifies the fields to query in a text search. There can
only be one text index per collection with a field whose value is a
string or an array of string elements. 

For the following examples, we perform text searches on the ``course``
field. To enable text searches on the ``course`` field, create a text
index using the following snippet: 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

If there was another field, ``description`` that contains a description of
the course, you can create a compound index to perform a text search in
both fields using the following snippet:

.. code-block:: java

    collection.createIndex(Indexes.compoundIndex(Indexes.text("course"), Indexes.text("description")));

Searching
---------

To perform a text search, use the ``text()`` method of the ``Filters``
builder. 

The ``text()`` method performs a text search on the fields indexed with
a text index. The text search matches documents which contain a
specified search term. 

You can pass in ``TextSearchOptions`` as the second parameter to specify
text search options such as case sensitivity, diacritic sensitivity and
language. 

By a Word
~~~~~~~~~

To search for one word in your text index, pass the word as a string
to the ``text()`` method. 

If you want to match multiple words in your text index, separate your
words with spaces. The ``text()`` method performs a logical OR search on
each term and returns documents that contains any of the terms. 

The following example performs a text search on documents that contain
the term "Computer": 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin wordExample
   :end-before: end wordExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

   { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science" }
   { "_id": 4, "course": "Computer Science" }
   { "_id": 5, "course": "Computer Hacking Revealed" }
   { "_id": 6, "course": "Advanced Computer Game Programming" }
   { "_id": 7, "course": "Image Processing in Computer Science" }

By a Phrase
~~~~~~~~~~~

To search for a phrase in your text index, pass the phrase with escaped quotes
to the ``text()`` method.  

If you don't add escaped quotes, the method performs a logical OR on the
words listed.

The following example performs a text search on documents that contain
the phrase "Computer Science":

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin phraseExample
   :end-before: end phraseExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

   { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science" }
   { "_id": 4, "course": "Computer Science" }
   { "_id": 7, "course": "Image Processing in Computer Science" }

Excluding a Word
~~~~~~~~~~~~~~~~

To exclude a word in your text search, prefix a minus sign ``-`` to the text you
want to omit. 

The following example performs a text search on documents that contain
the term "Computer", but do not contain the term "Science":

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin negateExample
   :end-before: end negateExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

   { "_id": 5, "course": "Computer Hacking Revealed" }
   { "_id": 6, "course": "Advanced Computer Game Programming" }

Sort by Relevance
~~~~~~~~~~~~~~~~~

Text search assigns a score to each match that represents the relevance
of a document to the specified text search query filter.

The following example performs a text search for the term "Computer
Science" and sorts the results in descending order:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin scoreExample
   :end-before: end scoreExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

   { "_id": 4, "course": "Computer Science", "score": 1.5 }
   { "_id": 7, "course": "Image Processing in Computer Science", "score": 1.25 }
   { "_id": 2, "course": "Discrete Mathematical Structures for Computer Science", "score": 1.2 }
