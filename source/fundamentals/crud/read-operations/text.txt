===========
Search Text
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you will learn how to run a **text search** in MongoDB.

In MongoDB, you can use a text search to retrieve documents that
contain a **term** or a **phrase** in a specified field. 

A term is a sequence of characters that excludes whitespace characters.
A phrase is a sequence of terms that with any number of whitespace
characters. 

The following sections show you how to perform the following types of
text searches:

- Search Text by a Term
- Search Text by a Phrase
- Search Text with Terms Excluded

If you want to sort by relevance, see our :doc:`Sorts
<sorts-crud-text-search>` page.

Sample Documents
~~~~~~~~~~~~~~~~

The following sections feature examples that run text searches on the
``fast_and_furious_movies`` collection. Each section uses a variable
named "collection" to refer to the ``MongoCollection`` instance of the
``fast_and_furious_movies`` collection. 

The collection contains documents with the title and tags associated
with one of the several movies that are part of the Fast and Furious
movie franchise: 

.. code-block:: json

   { "_id": 1, "title": "2 Fast 2 Furious ", "tags": ["undercover", "drug dealer"] } 
   { "_id": 2, "title": "Fast 5", "tags": ["bank robbery", "full team"] }
   { "_id": 3, "title": "Furious 7", "tags": ["emotional"] }
   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }

Text Index
----------

You must create a **text index** before running a text search. A text
index specifies the string or string array field on which to run a text
search. A collection can only contain one text index.

In the following examples, you run text searches on the ``title``
field in the ``fast_and_furious_movies`` collection. To enable text
searches on the ``title`` field, create a text index using the
:ref:`Indexes <index-text-indexes>` builder with the following 
snippet: 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

Multiple Indexes
~~~~~~~~~~~~~~~~

If you want to run text searches on both the ``title`` and
``tags`` field in the ``fast_and_furious_movies`` collection, you
need to create an text index to include them.

You can create a :ref:`compound index <index-compound-indexes>`. A
compound index is a single index that refers to multiple
fields within a collection's documents. This allows you to specify
multiple text fields using one text index.

To enable text searches on the ``title`` and ``tag`` fields, create a
compound index using the following snippet:  

.. code-block:: java

   collection.createIndex(Indexes.compoundIndex(Indexes.text("title"), Indexes.text("tags")));

.. note::

   If you have an existing text index on the collection, you need to drop
   it. You can drop an index by calling the ``dropIndex()`` method,
   specifying name of the text index as shown in the following snippet:

   .. code-block:: java

      collection.dropIndex("field_name");
   
   If you want to delete all existing indexes, specify "*" instead of
   the name. Note that this does not delete the required index on the
   ``_id`` field. 

Text Search
-----------

Use the ``Filters.text()`` method to specify a text search. 

The ``Filters.text()`` method uses the :doc:`Filters builder
</fundamentals/builders/filters>` to create an instance of a :ref:`Bson
<bson>` type. The instance is a query filter that specifies how the text
search should operate, which you pass to the ``find()`` method. 

When you execute the ``find()`` method, MongoDB runs a text search on
the fields indexed with the text index on the collection. The text
search returns documents that contain one or more of the search terms
and a relevance score for each result. For more information on relevance
scores, see the :ref:`Sort by Relevance <sort_by_relevance>` section. 

You can include ``TextSearchOptions`` as the second parameter of the
``Filters.text()`` method to specify text search options such as case
sensitivity. By default, text searches run without case sensitivity
which means the search matches lowercase and uppercase values.

To specify a case sensitive search, use the following snippet:

.. code-block:: java

   TextSearchOptions options = new TextSearchOptions().caseSensitive(true);
   Bson filter = Filters.text("SomeText", options);

For more information, see the following API documentation:

- :java-core-api:`Filters.text() <com/mongodb/client/model/Filters.html#text(java.lang.String)>`
- :java-core-api:`TextSearchOptions <com/mongodb/client/model/TextSearchOptions.html>`

.. _term_search:

Search Text by a Term
~~~~~~~~~~~~~~~~~~~~~

Pass the term as a string to the ``Filters.text()`` method to specify a
term in your text search. 

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
term "Fast".

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin termExample
   :end-before: end termExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 1, "title": "2 Fast 2 Furious ", "tags": ["undercover", "drug dealer"] }
   { "_id": 2, "title": "Fast 5", "tags": ["bank robbery", "full team"] }

If you want to match multiple terms in your text search, separate them
with spaces in the ``Filters.text()`` builder method. When you pass the 
text search query returned by the builder method to the
``find()`` method, it returns documents that match any of the terms. 

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
terms "Fate" or "7".

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin multipleTermExample
   :end-before: end multipleTermExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 3, "title": "Furious 7", "tags": ["emotional"] }
   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }

Search Text by a Phrase
~~~~~~~~~~~~~~~~~~~~~~~

Pass a phrase with escaped quotes to the ``Filters.text()`` method to
specify the phrase in your text search. If you don't add escaped quotes,
the method runs a :ref:`term search <term_search>`. 

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
phrase "Fate of the Furious". 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin phraseExample
   :end-before: end phraseExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }
 
Search Text with Terms Excluded
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pass a term prefixed with a minus sign ``-`` to the ``Filters.text()``
method to specify each term you want to exclude in your text search.

You must have at least one term to include to specify terms to exclude.
If you have multiple text indexes, the search applies to all indexes.

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
term "Furious", but do not contain the term "Fast".

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin negateExample
   :end-before: end negateExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 3, "title": "Furious 7", "tags": ["emotional"] }
   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }

For more information, see the server manual entry on :manual:`Text
Indexes </core/index-text/>`. 
