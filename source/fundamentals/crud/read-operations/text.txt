===========
Search Text
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you will learn how to perform a **text search** in MongoDB.

A text search allows you to search for partial or exact matches from a set
of words. You can use this for searching through unstructured text, which is
text without a predefined format such as resumes and websites. 

In MongoDB, you can perform a text search on a string field in your
collection. 

Sample Documents
~~~~~~~~~~~~~~~~

In the following examples, a student is browsing through courses to
enroll in at their college. The documents in the ``junior_courses``
collection represents the courses available with their intended majors: 

.. code-block:: json

    { "_id": 1, "name": "Forensic Science", "major": ["Forensic Science", "Criminal Justice"] }
    { "_id": 2, "name": "Discrete Mathematical Structures for Computer Science", "major": ["Computer Science", "Mathematics"] }
    { "_id": 3, "name": "Environmental Science", "major": ["Environmental Science", "Sustainable Management"] }
    { "_id": 4, "name": "Image Processing in Computer Science", "major": ["Artificial Intelligence", "Computer Science"] }

Text Index
----------

Create a **text index** using the ``Indexes`` builder before you perform
a text search. A text index specifies the string or string array field
to query during a text search. 

In the following examples, the student performs text searches on the ``name``
field in the ``junior_courses`` collection. To enable text searches on
the ``name`` field, the student creates a text index using the following
snippet: 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

If the student wanted to index both the ``name`` and ``major`` field,
the student can modify the previous index to a compound index. A
compound index is a single index structure holds references to multiple
fields within a collection's documents. To enable text searches on
the ``name`` and ``major`` field, the student creates a compound index
using the following snippet: 

.. code-block:: java

    collection.createIndex(Indexes.compoundIndex(Indexes.text("name"), Indexes.text("major")));

.. note::

   The student cannot create a second index because there can only be one
   text index per collection. 

For more information, see the following documentation:

- :manual:`Text Indexes </core/index-text/>` Server Manual Entry
- :ref:`Text Indexes <index-text-indexes>` in our Indexes builder guide
- :ref:`Compound Indexes <index-compound-indexes>` in our Indexes builder guide

Searching
---------

Use the ``Filters.text()`` method to perform a text search. 

The ``Filters.text()`` method uses the :doc:`Filters builder
</fundamentals/builders/filters>` to perform the text search on the
fields indexed with the text index on the collection. The text search
matches documents which contain one or more search terms.

You can include ``TextSearchOptions`` as the second parameter to specify
text search options such as case sensitivity. By default, there is no
case sensitivity, meaning MongoDB matches documents regardless if the
value is lowercase or uppercase. 

For more information, see the following API documentation:

- :java-core-api:`Filters.text() <com/mongodb/client/model/Filters.html#text(java.lang.String)>`
- :java-core-api:`TextSearchOptions <com/mongodb/client/model/TextSearchOptions.html>`

.. _term_search:

Search Text By a Term
~~~~~~~~~~~~~~~~~~~~~

Pass the term as a string to the ``Filters.text()`` method to search for
a term in your text search. 

If you want to match multiple terms in your text index, separate your
terms with spaces. The ``Filters.text()`` method performs a logical OR on
each term and returns documents that contain any of the terms. 

Example 
```````

The student wants to find Science courses with case sensitivity on
the first letter being capital.

To address this scenario, the student performs the following:

- Specify to have the search be case sensitive though ``TextSearchOptions``
- Perform a text search on documents that contain the term "Science" with the ``Filters.text()`` method

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin caseSensitiveExample
   :end-before: end caseSensitiveExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 2, "name": "Discrete Mathematical Structures for Computer Science", "major": ["Computer Science", "Mathematics"] }
   { "_id": 3, "name": "Environmental Science", "major": ["Environmental Science", "Sustainable Management"] }

.. note::

   The output would consist of all the documents in the
   ``junior_courses`` collection if the search was not case sensitive
   because each document contains the term "Science" in the ``name``
   field. 

Search Text By a Phrase
~~~~~~~~~~~~~~~~~~~~~~~

Pass the phrase with escaped quotes to the ``Filters.text()`` method to
search for a phrase in your text search. If you don't add escaped quotes,
the method performs a :ref:`term search <term_search>`. 

Example 
```````

The student wants to find Computer Science courses.

To address this scenario, the student performs a text search on
documents that contain the phrase "Computer Science":

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin phraseExample
   :end-before: end phraseExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 2, "name": "Discrete Mathematical Structures for Computer Science", "major": ["Computer Science", "Mathematics"], "score": 1.2 }
   { "_id": 4, "name": "Image Processing in Computer science", "major": ["Artificial Intelligence", "Computer Science"], "score": 1.25 }
 
Search Text With Terms Excluded
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Prefix a minus sign ``-`` to each term you want to exclude in your text
search. 

Example 
```````
The student wants to only find Science courses.

To address this scenario, the student performs a text search on
documents that contain the term "Science", but do not contain the term
"Computer": 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin negateExample
   :end-before: end negateExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 1, "name": "Forensic science", "major": ["Forensic Science", "Criminal Justice"] }
   { "_id": 3, "name": "Environmental Science", "major": ["Environmental Science", "Sustainable Management"] }
  
Sorting by Relevance
~~~~~~~~~~~~~~~~~~~~

You can retrieve a score to see how relevant the returned documents are
in your text search. To retrieve a score, project the ``metaTextScore``
in your query.

Example 
```````

The student wants to find Computer Science courses and view the courses
in order of relevance to their search.

To address this scenario, the student performs the following:

- Perform a text search for the phrase "Computer Science"
- Specify a :doc:`Projections builder <fundamentals/builders/projections>` to calculate the ``metaTextScore`` and place the score in a field called ``score``
- Specify a :doc:`Sorts builder <fundamentals/builders/sort>` to display the results in descending order

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin scoreExample
   :end-before: end scoreExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 4, "name": "Image Processing in Computer science", "major": ["Artificial Intelligence", "Computer Science"], "score": 1.25 }
   { "_id": 2, "name": "Discrete Mathematical Structures for Computer Science", "major": ["Computer Science", "Mathematics"], "score": 1.2 }
   
After the student runs the query, the course with the ``_id`` value of 4
is the most relevant to their search. Although both documents matched
have the search phrase, MongoDB ranks based on the string length of
the indexed field.

For more information, see the following documentation:

- :java-docs:`Projections.metaTextScore() <apidocs/mongodb-driver-core/com/mongodb/client/model/Projections.html#metaTextScore(java.lang.String)>` API documentation
- :manual:`Meta operator </reference/operator/aggregation/meta/#mongodb-expression-exp.-meta>` Server Manual Entry 
- :manual:`Text search score </reference/operator/query/text/#return-the-text-search-score/>` Server Manual Entry 
- :java-docs:`Sorts.descending() <apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html#descending(java.lang.String...)>` API documentation
