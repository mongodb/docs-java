===========
Search Text
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you will learn how to run a **text search** in MongoDB.

You can use a text search to search documents for a term or a phrase. A
term is a sequence of characters that excludes whitespace characters. A
phrase is a sequence of terms that with any number of whitespace
characters. In MongoDB, a text search retrieves documents that contain a
matching term or phrase in the specified fields.

Sample Documents
~~~~~~~~~~~~~~~~

In the following examples, we use the documents in the
``fast_and_furious_movies`` collection which represent a few of the Fast
and Furious movies: 

.. code-block:: json

   { "_id": 1, "title": "2 Fast 2 Furious ", "tags": ["undercover", "drug dealer"] } 
   { "_id": 2, "title": "Fast 5", "tags": ["bank robbery", "full team"] }
   { "_id": 3, "title": "Furious 7", "tags": ["emotional"] }
   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }

Text Index
----------

You must create a **text index** before running a text search. You can
create one using the ``Indexes`` builder. A text index specifies the
string or string array field for the query to run a text search. A
collection can only contain one index.

In the following examples, we run text searches on the ``title``
field in the ``fast_and_furious_movies`` collection. To enable text searches on
the ``title`` field, create a text index using the following
snippet: 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin textIndex
   :end-before: end textIndex

If we wanted to run text searches on both the ``title`` and
``tags`` field in the ``fast_and_furious_movies`` collection, we need to
drop the index for the ``title`` field with the following snippet:

.. code-block:: java

   collection.dropIndex("title");

Then, we can create a compound index. A compound index is a
single index structure holds references to multiple fields within a
collection's documents. This allows us to specify multiple text indexes
without violating the constraint for a collection to contain one 
index. 

To enable text searches on the ``title`` and ``tag`` field, create a
compound index using the following snippet: 

.. code-block:: java

   collection.createIndex(Indexes.compoundIndex(Indexes.text("title"), Indexes.text("tags")));

For more information, see the following documentation:

- :manual:`Text Indexes </core/index-text/>` Server Manual Entry
- :ref:`Text Indexes <index-text-indexes>` in our Indexes Builder Guide
- :ref:`Compound Indexes <index-compound-indexes>` in our Indexes Builder Guide

Text Search
-----------

Use the ``Filters.text()`` method to specify a text search. 

The ``Filters.text()`` method uses the :doc:`Filters builder
</fundamentals/builders/filters>` to match documents containing a
specified term or phrase. Upon passing this method into the ``find()``
method, MongoDB runs a text search on the fields indexed with the text
index on the collection. The text search returns documents that 
contain one or more of the search terms with a relevance score. For more
information on relevance scores, see the :ref:`Sort by Relevance
<sort_by_relevance>` section. 

You can include ``TextSearchOptions`` as the second parameter of the
``Filters.text()`` method to specify a text search options such as case
sensitivity. By default, there is no case sensitivity, meaning MongoDB
matches documents regardless of whether the value is lowercase or
uppercase. 

To specify a case sensitive search, use the following snippet:

.. code-block:: java

   TextSearchOptions options = new TextSearchOptions().caseSensitive(true);

The following sections show you how to run a text search with a
term, phrase, certain terms, and how to sort the relevance of your text
search. 

For more information, see the following API documentation:

- :java-core-api:`Filters.text() <com/mongodb/client/model/Filters.html#text(java.lang.String)>`
- :java-core-api:`TextSearchOptions <com/mongodb/client/model/TextSearchOptions.html>`

.. _term_search:

Search Text by a Term
~~~~~~~~~~~~~~~~~~~~~

Pass the term as a string to the ``Filters.text()`` method to search for
a term in your text search. 

If you want to match multiple terms in your text index, separate your
terms with spaces. The ``Filters.text()`` method performs a logical OR on
each term and returns documents that contain any of the terms. 

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
term "Fast".

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin caseSensitiveExample
   :end-before: end caseSensitiveExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 1, "title": "2 Fast 2 Furious ", "tags": ["undercover", "drug dealer"] }
   { "_id": 2, "title": "Fast 5", "tags": ["bank robbery", "full team"] }

Search Text by a Phrase
~~~~~~~~~~~~~~~~~~~~~~~

Pass the phrase with escaped quotes to the ``Filters.text()`` method to
search for a phrase in your text search. If you don't add escaped quotes,
the method runs a :ref:`term search <term_search>`. 

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
phrase "Fate of the Furious". 

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin phraseExample
   :end-before: end phraseExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }
 
Search Text with Terms Excluded
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Prefix each term you want to exclude in your text search with a minus
sign ``-``. 

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the
term "Furious", but do not contain the term "Fast".

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin negateExample
   :end-before: end negateExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 3, "title": "Furious 7", "tags": ["emotional"] }
   { "_id": 4, "title": "The Fate of the Furious", "tags": ["betrayal"] }

.. _sort_by_relevance:

Sort by Relevance
~~~~~~~~~~~~~~~~~

The text search assigns a numerical text score to indicate how relevant
each result matches the search string. Often, you want to know which
results are the most relevant.  

To sort by relevance, you use the :doc:`Projections
</fundamentals/builders/projections>`  and :doc:`Sorts
</fundamentals/builders/sort>` builders.

First, create a project document to retrieve a text score by using the
``Projections.metaTextScore()`` method. Upon passing this document to the
``projection()`` method generates a new field with the specified name
and returns the documents text score. 

Then, specify a sort criteria to sort by the text score by using the
``Sorts.metaTextScore()`` method. Upon passing this to the ``sort()``
method, MongoDB sorts the results from the most to least relevant. By
default, the method returns the results unsorted. 

Example 
```````

The following example runs a text search on the documents in the
``fast_and_furious_movies`` collection for titles that contain the term
"Fast". 

To view them in order of relevance to the search, perform the following
actions: 

- Project the text scores of the query results as the ``score`` field
- Sort the results by text score (most relevant match first)

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin scoreExample
   :end-before: end scoreExample

The following shows the output of the preceding code:

.. code-block:: json
   :copyable: false

   { "_id": 2, "title": "Fast 5", "tags": ["bank robbery", "full team"], "score": 0.75 }
   { "_id": 1, "title": "2 Fast 2 Furious ", "tags": ["undercover", "drug dealer"], "score": 0.625 }
   
The movie with the ``_id`` value of 2 is the most relevant to our
search. Although both documents contain what the search phrase we
were looking for, MongoDB then ranks based on the string length of the
``title`` field. 

For more information, see the following documentation:

- :java-docs:`Projections.metaTextScore() <apidocs/mongodb-driver-core/com/mongodb/client/model/Projections.html#metaTextScore(java.lang.String)>` API documentation
- :java-docs:`Sorts.metaTextScore() <apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html#metaTextScore(java.lang.String)>` API documentation
- :manual:`Text score metadata </reference/operator/aggregation/meta/#mongodb-expression-exp.-meta>` Server Manual Entry 
- :manual:`Text search score </reference/operator/query/text/#return-the-text-search-score/>` Server Manual Entry 
