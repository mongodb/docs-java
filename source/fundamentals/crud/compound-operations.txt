===================
Compound Operations
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page you will learn how to perform **compound operations**. 

Compound operations combine a read operation and a write operation into a single
**atomic operation**.

An atomic operation is an operation that happens all at once from the perspective of
other processes and threads running on a computer.

Atomic operations can fix certain kinds of **race conditions** in your code.

A race condition occurs when your code's behavior is dependent on the order of
uncontrollable events.

The following compound operations are available in the MongoDB Java driver as
instance methods of the ``MongoCollection`` class:

- ``findOneAndUpdate()``
- ``findOneAndDelete()``
- ``findOneAndReplace()``

Compound Operations Use Case
----------------------------

In this section, we will go through an example that demonstrates the use case
for compound operations.

Our example contains a race condition. We show how to use a compound
operation to fix the race condition.

For this example, lets imagine that we run a hotel with one room, and we have a
small Java application to help us check out this room to a guest.  

We represent our one room with this document in MongoDB. 

.. code-block:: json

    {"_id":1, "guest":null, "room":"Blue Room", "reserved":false}

`The full code for this example is available on Github here. <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/CompoundOperators.java>`__

Example - Unsafe
~~~~~~~~~~~~~~~~

Lets say our app uses this unsafe ``bookARoom`` method to check out our room to guests.

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperators.java
   :language: java
   :dedent:
   :start-after: start the-unsafe-book-a-room
   :end-before: end the-unsafe-book-a-room

Now imagine two separate guests, Jan and Pat, use this method to book
our room from two different computers at the same time.

Jan sees this output:

.. code-block:: none

   You got the Blue Room Jan

And Pat sees this output:

.. code-block:: none

   You got the Blue Room Pat

When we look at our database, we see the following: 

.. code-block:: json

    {"_id":1, "guest":"Jan", "room":"Blue Room", "reserved":true}

Pat will be pretty unhappy. When Pat shows up to our hotel, Jan will be
occupying her room. What went wrong?

Here is the sequence of events that happened from the perspective of our MongoDB
instance:

- Find and return an empty room for Jan
- Find and return an empty room for Pat
- Update the room to booked for Pat
- Update the room to booked for Jan

Pat's reservation was incorrectly overwritten. Let's see how we can
use compound operations to fix this race condition and always give our users the
correct message. 

Example - Safe
~~~~~~~~~~~~~~

Lets fix our ``bookARoom`` method using a compound operator.

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperators.java
   :language: java
   :dedent:
   :start-after: start the-safe-book-a-room
   :end-before: end the-safe-book-a-room

Now imagine Jan and Pat use this method to book
our room from two different computers at the same time.

Jan sees the following output:

.. code-block:: none

   You got the Blue Room Jan

And Pat sees the following output:

.. code-block:: none

   Sorry, we are booked Pat

When we look at our database, we see the following: 

.. code-block:: json

    {"_id":1, "guest":"Jan", "room":"Blue Room", "reserved":true}
 
Pat got the correct message. While she might be sad she didn't get the
reservation, at least she will know to not travel to the hotel.

Here is the sequence of events that happened from the perspective of our MongoDB
instance:

- Find an empty room for Jan and reserve it.
- Try to find an empty room for Pat and reserve it. As there are not any rooms
  left, return null. 

Available Compound Operations
-----------------------------

Here are the available compound operators in the MongoDB Java Driver.

Find and Update a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~

Find and Replace a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Find and Remove a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~

Transactions
------------

If you need to perform more complex tasks atomically, such as reading and
writing to more than one document, use **transactions**.

Transactions are a feature of MongoDB and other databases that let you define
arbitrary database operations as atomic statements.  

For more information on transactions, 
:manual:`see the MongoDB manual entry for transactions </core/transactions/>`.
