===================
Compound Operations
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page you will learn how to perform **compound operations** with the
MongoDB Java driver. 

Compound operations consist of a read and write operation performed as one
**atomic operation**. An atomic operation is an operation that happens all at
once from the perspective of other programs that interact with that operation.

Atomic operations can help avoid certain kinds of **race conditions** in your code. A
race condition occurs when your code's behavior is dependent on the order of
uncontrollable events.

MongoDB supports the following compound operations:

- Find and update one document
- Find and replace one document
- Find and delete one document


Compound Operations in the MongoDB Java Driver
----------------------------------------------

This section shows how to use each compound operation in the MongoDB Java Driver.

The following examples use a collection containing these two sample documents.

.. code-block:: json

    {"_id":1, "food":"donut", "color":"green"}
    {"_id":2, "food":"pear", "color":"yellow"}

`The full code for the following examples is available on Github here. <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/CompoundOperatorsIndividualExamples.java>`__

Find and Update a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~

To find and update a document, use the ``findOneAndUpdate()`` method of the
``MongoCollection`` class.

The following example uses the ``findOneAndUpdate()`` method to find a
document with the ``color`` field set to ``"green"`` and  updates the
``food`` field in that document to ``"pizza"``. 

The example also uses a ``FindOneAndUpdateOptions`` instance to specify the
following options:

- Exclude the ``_id`` field from the found document
- Specify to insert a document if no documents match our query, known as an "upsert".
- Set a maximum execution time of 5 seconds for this operation on the MongoDB
  instance. If the operation takes longer, the ``findOneAndUpdate()`` method
  will throw a ``MongoExecutionTimeoutException``.  

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperatorsIndividualExamples.java
   :language: java
   :dedent:
   :start-after: start findOneAndUpdate-example
   :end-before: end findOneAndUpdate-example

The output of the above code should look like this:

.. code-block:: json

   {"color": "green", "food": "pizza"}

For more information on the ``Projections`` class, see our
:doc:`guide on the Projections builder </fundamentals/builders/projections/>`.

For more information on the methods and classes in this section, see the
following API documentation pages:

- :java-docs:`findOneAndUpdate() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndUpdate(org.bson.conversions.Bson,java.util.List,com.mongodb.client.model.FindOneAndUpdateOptions)>`
- :java-docs:`FindOneAndUpdateOptions <apidocs/mongodb-driver-core/com/mongodb/client/model/FindOneAndUpdateOptions.html>`
- :java-docs:`MongoExecutionTimeoutException <apidocs/mongodb-driver-core/com/mongodb/MongoExecutionTimeoutException.html>`


Find and Replace a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To find and replace a document, use the ``findOneAndReplace()`` method of the
``MongoCollection`` class.

In the following example we use the ``findOneAndReplace()`` method to find a
document with the ``color`` field set to ``"green"`` and  replace it
with the following document:

.. code-block:: json

    {"music":"classical", "color":"green"}

We use a ``FindOneAndReplaceOptions`` instance to specify that we would like our
returned document to be in the state after our replace operation.

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperatorsIndividualExamples.java
   :language: java
   :dedent:
   :start-after: start findOneAndReplace-example
   :end-before: end findOneAndReplace-example

The output of the code above should look like this:

.. code-block:: json

   {"_id": 1, "music": "classical", "color": "green"}

For more information on the methods and classes in this section, see the
following API documentation pages:

- :java-docs:`findOneAndReplace() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndReplace(org.bson.conversions.Bson,TDocument,com.mongodb.client.model.FindOneAndReplaceOptions)>`
- :java-docs:`FindOneAndReplaceOptions <apidocs/mongodb-driver-core/com/mongodb/client/model/FindOneAndReplaceOptions.html>`

Find and Delete a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~

To find and delete a document, use the ``findOneAndDelete()`` method of the
``MongoCollection`` class.

In the following example we use the ``findOneAndDelete()`` method to find and
delete the document with the largest value in the ``_id`` field.

We use a ``FindOneAndDeleteOptions`` instance to specify a descending sort on
the ``_id`` field.

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperatorsIndividualExamples.java
   :language: java
   :dedent:
   :start-after: start findOneAndDelete-example
   :end-before: end findOneAndDelete-example

The output of the code above should look like this:

.. code-block:: json

   {"_id": 2, "food": "pear", "color": "yellow"}

For more information on the ``Sorts`` class, see our
:doc:`guide on the Sorts builder </fundamentals/builders/sort/>`.

For more information on the methods and classes in this section, see the
following API documentation pages:

- :java-docs:`findOneAndDelete() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndDelete(org.bson.conversions.Bson,com.mongodb.client.model.FindOneAndDeleteOptions)>`
- :java-docs:`FindOneAndDeleteOptions <apidocs/mongodb-driver-core/com/mongodb/client/model/FindOneAndDeleteOptions.html>`

Transactions
------------

If you need to perform more complex tasks atomically, such as reading and
writing to more than one document, use **transactions**.

Transactions are a feature of MongoDB and other databases that lets you define
an arbitrary sequence of database commands as an atomic operation.  

For more information on transactions, 
:manual:`see the MongoDB manual entry for transactions </core/transactions/>`.


Avoiding A Race Condition
-------------------------

In this section, we will go through an example that demonstrates how we can
avoid race conditions using compound operators.

For this example, let's imagine that we run a hotel with one room and that we
have a small Java program to help us check out this room to a guest.  

We represent our one room with this document in MongoDB. 

.. code-block:: json

    {"_id":1, "guest":null, "room":"Blue Room", "reserved":false}

`The full code for this example is available on Github here. <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/CompoundOperators.java>`__

Example With Race Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's say our app uses this unsafe ``bookARoom`` method to check out our room to
a guest.

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperators.java
   :language: java
   :dedent:
   :emphasize-lines: 3,11
   :start-after: start the-unsafe-book-a-room
   :end-before: end the-unsafe-book-a-room

Imagine two separate guests, Jan and Pat, try to book the room with this method
at the same time.

Jan sees this output:

.. code-block:: none

   You got the Blue Room Jan

And Pat sees this output:

.. code-block:: none

   You got the Blue Room Pat

When we look at our database, we see the following: 

.. code-block:: json

    {"_id":1, "guest":"Jan", "room":"Blue Room", "reserved":true}

Pat will be unhappy. When Pat shows up to our hotel, Jan will be
occupying her room. What went wrong?

Here is the sequence of events that happened from the perspective of our MongoDB
instance:

- Find and return an empty room for Jan
- Find and return an empty room for Pat
- Update the room to booked for Pat
- Update the room to booked for Jan

Notice that for a brief moment Pat had reserved the room, but as Jan's update
operation was the last to execute our document has ``"Jan"`` as the guest. 

Let's see how we can use compound operations to avoid this race condition and
always give our users the correct message. 

Example Avoiding Race Condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's fix our ``bookARoom`` method using a compound operation.

.. literalinclude:: /includes/fundamentals/code-snippets/CompoundOperators.java
   :language: java
   :dedent:
   :emphasize-lines: 4
   :start-after: start the-safe-book-a-room
   :end-before: end the-safe-book-a-room

Imagine two separate guests, Jan and Pat, try to book the room with this method
at the same time.

Jan sees this output:

.. code-block:: none

   You got the Blue Room Jan

And Pat sees this output:

.. code-block:: none

   Sorry, we are booked Pat

When we look at our database, we see the following: 

.. code-block:: json

    {"_id":1, "guest":"Jan", "room":"Blue Room", "reserved":true}
 
Pat got the correct message. While she might be sad she didn't get the
reservation, at least she will know not to travel to our hotel.

Here is the sequence of events that happened from the perspective of our MongoDB
instance:

- Find an empty room for Jan and reserve it.
- Try to find an empty room for Pat and reserve it. As there are not any rooms
  left, return ``null``. 

.. note:: Write Lock

   Your MongoDB instance places a write lock on the document you are modifying
   for the duration of your compound operation. 

For information on the ``Updates`` class, see our
:doc:`guide on the Updates builder </fundamentals/builders/updates/>`.

For more information of the ``Filters`` class, see our
:doc:`guide on the Filters builder </fundamentals/builders/filters/>`.

For more information on the ``findOneAndUpdate()`` method, see 
:java-docs:`the API documentation for the MongoCollection class <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndUpdate(org.bson.conversions.Bson,java.util.List,com.mongodb.client.model.FindOneAndUpdateOptions)>`.
