=================
Change a Document
=================

.. default-domain:: mongodb

In this page, you can learn how to change documents in a MongoDB collection
using two distinct operation types: 

- :ref:`Update <update-operation>`
- :ref:`Replace <replace-operation>`

Update operations specify the field and value to change in one or more
documents. A replace operation specifies the fields and values to replace
a single document from your collection. 

In the following examples, a paint store sells five different
colors of paint. The ``paint_inventory`` collection represents their
current inventory: 

.. code-block:: json

    { "_id": 1, "color": "red", "qty": 5 }
    { "_id": 2, "color": "purple", "qty": 8 }
    { "_id": 3, "color": "yellow", "qty": 0 }
    { "_id": 4, "color": "green", "qty": 6 }
    { "_id": 5, "color": "pink", "qty": 0 }

.. _update-operation:

Update
------

Update operations can change the field and value. They apply changes
specified in an update document to one or more documents that match your
query filter. 

The :java-docs:`updateOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,org.bson.conversions.Bson)>` 
method changes the first document your query filter matches and the
:java-docs:`updateMany() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,org.bson.conversions.Bson)>` 
method changes all the documents your query filter matches. 

You can call the ``updateOne()`` and ``updateMany()`` methods on a
``MongoCollection`` instance as follows: 

.. code-block:: java

    collection.updateOne(query, updateDocument);

    collection.updateMany(query, updateDocument);
    
Update Operation Parameters:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- ``query`` specifies the document you want to update in your collection
- ``updateDocument`` specifies the field and value to change in the matching document or documents. For this example, we use the :doc:`Updates builder </fundamentals/builders/updates>` to create the update document.

You can create the ``updateDocument`` using an ``Updates`` builder as
follows:

.. code-block:: java

    Bson updateDocument = Updates.<update operator>("<field>", "<value>");

See the MongoDB API documentation for a :java-core-api:`complete list of
update operators and their usage <com/mongodb/client/model/Updates.html>`.

Example
~~~~~~~

The paint store receives a fresh shipment and needs to update their inventory.
The shipment contains 20 cans of each paint color.

To update the inventory, call the ``updateMany()`` method specifying the
following:

- A query filter that matches all the colors 
- An update document that contains instructions to increment the ``qty`` field by "20"

.. literalinclude:: /includes/fundamentals/code-snippets/Update.java
   :language: java
   :dedent:
   :start-after: begin updateManyExample
   :end-before: end updateManyExample

The method returns:

.. code-block:: json   

    AcknowledgedUpdateResult{ matchedCount=5, modifiedCount=5, upsertedId=null } 

The ``AcknowledgedUpdateResult`` tells us that five documents matched
the query, five documents got modified and there was no upsert.

The following shows the updated documents in the ``paint_inventory`` collection:

.. code-block:: json 

    { "_id": 1, "color": "red", "qty": 25 }
    { "_id": 2, "color": "purple", "qty": 28 }
    { "_id": 3, "color": "yellow", "qty": 20 }
    { "_id": 4, "color": "green", "qty": 26 }
    { "_id": 5, "color": "pink", "qty": 20 }

If zero documents match the query filter in the update operation,
there are no changes to documents in the collection. See our :doc:`upsert
guide </fundamentals/crud/write-operations/upsert>` to learn how to insert
a new document instead of updating one if no documents match. 

.. note::

    The ``updateOne()`` and ``updateMany()`` methods cannot make changes
    to a document that  violate unique index constraints on the
    collection. See the MongoDB server manual for more information on
    :manual:`unique indexes </core/index-unique/>`. 

.. _replace-operation:

Replace
-------

A replace operation substitutes one document from your collection. The
substitution occurs between a document your query filter matches and a
replacement document. 

The :java-docs:`replaceOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,TDocument)>` 
method removes all the existing fields and values in the
matching document (except the ``_id`` field) and substitutes it with the
replacement document. 

You can call the ``repalceOne()`` method on a ``MongoCollection``
instance as follows: 

.. code-block:: java

    collection.replaceOne(query, replacementDocument);
    
Replace Operation Parameters:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- ``query`` specifies the document you want to replace in your collection
- ``replacementDocument`` specifies fields and values of a new ``Document`` object to replace the matched document 

Example
~~~~~~~

The paint store realizes they need to update their inventory again.  What they
thought was 20 cans of pink paint is actually 25 cans of orange paint. 

To update the inventory, call the ``replaceOne()`` method specifying the
following:

- A query filter that matches the ``color`` is "pink" 
- A replacement document that contains: ``color`` is "orange" and ``qty`` is "25"

.. literalinclude:: /includes/fundamentals/code-snippets/Update.java
   :language: java
   :dedent:
   :start-after: begin replaceOneExample
   :end-before: end replaceOneExample

The method returns:

.. code-block:: json   

    AcknowledgedUpdateResult{ matchedCount=1, modifiedCount=1, upsertedId=null }

The ``AcknowledgedUpdateResult`` tells us that one document matched
the query, one document got modified and there was no upsert.

The following shows the updated document:

.. code-block:: json

    { "_id": 5, "color": "orange", "qty": 25 }

If zero documents match the query filter in the replace operation,
there are no changes to documents in the collection. See our
:doc:`upsert guide </fundamentals/crud/write-operations/upsert>` to
learn how to insert a new document instead of replacing one if no
documents match. 

If multiple documents match the query filter specified in
the ``replaceOne()`` method, it replaces the first result. 

.. note::

    The ``replaceOne()`` method cannot make changes to a document that
    violate unique index constraints on the collection. See the MongoDB
    server manual for more information on :manual:`unique indexes </core/index-unique/>`.
