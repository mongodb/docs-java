=================
Change a Document
=================

.. default-domain:: mongodb

In this page, you can learn change documents in a MongoDB collection
using two distinct operation types: 

- :ref:`Update <update-operation>`
- :ref:`Replace <replace-operation>`

Update operations change the value of the specified field in one or
more documents using the 
:java-docs:`updateOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,org.bson.conversions.Bson)>` 
or :java-docs:`updateMany() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,org.bson.conversions.Bson)>` 
method. A replace operation substitutes one document with a new
specified document using the
:java-docs:`replaceOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,TDocument)>` 
method.
    
Each method returns an ``AcknowledgedUpdateResult`` that tells us:

- The number of documents that matched the query filter
- The number of documents that got modified
- The ``_id`` of the document that got upserted

In the following examples, a paint store sells five different
colors of paint. The``paint_inventory`` collection represents their
current inventory: 

.. code-block:: json

    { "_id": 1, "color": "red", "qty": 5 }
    { "_id": 2, "color": "purple", "qty": 8 }
    { "_id": 3, "color": "yellow", "qty": 0 }
    { "_id": 4, "color": "green", "qty": 6 }
    { "_id": 5, "color": "pink", "qty": 0 }

.. _update-operation:

Update
------

Update operations specify an update document with the field and value to
change in one or more documents that match your query filer using the 
:java-docs:`updateOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,org.bson.conversions.Bson)>` 
or :java-docs:`updateMany() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,org.bson.conversions.Bson)>` 
method. The query filter specifies the document you want to update in
your collection. The update document uses an :doc:`Updates builder
</fundamentals/builders/updates>` to specify the update to perform. 

The update document uses the following format:

.. code-block:: java

    Bson update = Updates.<update operator>("<field>", "<value>");

See the MongoDB API documentation for a :java-core-api:`complete list of
update operators and their usage <com/mongodb/client/model/Updates.html>`.

The ``updateOne()`` and ``updateMany()`` method uses the following format: 

.. code-block:: java

    collection.updateOne(<query filter>, <update document>);

    collection.updateMany(<query filter>, <update document>);

Example
~~~~~~~

The paint store received a fresh shipment and needs to update their inventory.
The shipment contains 20 cans of each paint color.

To update the inventory, call the ``reaplceMany()`` method specifying the
following:

- A query filter that matches all the colors in the ``paint_inventory``
collection
- An update document that specifies to increment the ``qty`` field by "20"

.. literalinclude:: /includes/fundamentals/code-snippets/Update.java
   :language: java
   :dedent:
   :start-after: begin updateManyExample
   :end-before: end updateManyExample

The method returns:

.. code-block:: json   

    AcknowledgedUpdateResult{ matchedCount=5, modifiedCount=5, upsertedId=null } 

The following shows the updated documents in the ``paint_inventory`` collection:

.. code-block:: json 

    { "_id": 1, "color": "red", "qty": 25 }
    { "_id": 2, "color": "purple", "qty": 28 }
    { "_id": 3, "color": "yellow", "qty": 20 }
    { "_id": 4, "color": "green", "qty": 26 }
    { "_id": 5, "color": "pink", "qty": 20 }

If zero documents matched the query filter in the update operation,
there are no changes to the collection. See our :doc:`upsert
page</fundamentals/crud/write-operations/upsert>` to learn how you can
change the collection with zero documents matched. 

.. note::

    You cannot modify the unique index of a document. See the MongoDB
    server manual for more information on :manual:`unique indexes
    </core/index-unique/>`.

.. _replace-operation:

Replace
-------

A replace operation substitutes one document that matches your query
filter with a replacement document using the
:java-docs:`replaceOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,TDocument)>` 
method.

The query filter specifies the document you want to replace in your
collection. The replacement document is a new ``Document`` with the
fields and values that you would like to insert in place of the document
that matches your query filter.

The ``repalceOne()`` method uses the following format: 

.. code-block:: java

    collection.replaceOne(<query filter>, <new Document>);

Example
~~~~~~~

The paint store realizes they need to update their inventory again.  What they
thought was 20 cans of pink paint is actually 25 cans of orange paint. 

To update the inventory, call the ``replaceOne()`` method specifying the
following:

- A query filter that matches the ``color`` is "pink" in the
``paint_inventory``collection
- A replacement document that contains: ``color`` is "orange" and
``qty`` is "25" 

.. literalinclude:: /includes/fundamentals/code-snippets/Update.java
   :language: java
   :dedent:
   :start-after: begin replaceOneExample
   :end-before: end replaceOneExample

The method returns:

.. code-block:: json   

    AcknowledgedUpdateResult{ matchedCount=1, modifiedCount=1, upsertedId=null }

The following shows the updated document:

.. code-block:: json

    { "_id": 5, "color": "orange", "qty": 25 }

If zero documents matched the query filter in the replace operation,
there are no changes to the collection. See our :doc:`upsert
page</fundamentals/crud/write-operations/upsert>` to learn how you can
change the collection with zero documents matched. 

If multiple documents match the ``replaceOne()`` method, the method
replaces the first matched document matched by the query. 

.. note::

    You cannot modify the unique index of a document. See the MongoDB
    server manual for more information on :manual:`unique indexes
    </core/index-unique/>`.
