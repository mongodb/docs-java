===========================
Update Arrays in a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you will learn how to match and update embedded arrays in
a document.

An embedded array is an array within another array.

The following snippet shows ``inner_array1`` and ``inner_array2`` as
embedded arrays of ``outer_array``:

.. code-block:: json
   :copyable: false

    "outer_array": [
        { "inner_array1": [ val1, val2 ] }, 
        { "inner_array2": [ val3, val4 ] },
        ... ]

To access elements in an embedded array, concatenate the array name and
the embedded array name using the dot notation. For example, to access
``inner_array2`` elements from the snippet above, you must say
``outer_array.inner_array2``. 

To update an embedded array, you must first specify which embedded
arrays to update with positional operators. Positional operators specify
the embedded arrays we want to match. In MongoDB, you can specify the
first embedded array, all embedded arrays, or certain embedded arrays. 

Then, you can perform the update using Updates builders as the second
parameter in the ``updateOne()`` and ``updateMany()`` methods. 

Sample Document for Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following sections feature examples on how to update the ``instock``
array in this document:

.. code-block:: json

    { "_id": 1, 
      "color": "green", 
      "instock": [
        { "qty": 8, "warehouse": ["A", "E"] }, 
        { "qty": 13, "warehouse": ["B", "C"] }, 
        { "qty": 15, "warehouse": ["B", "F"] } ]}

Updates Builders
----------------

Updates builders provide helper methods to update fields and arrays in a
document. To update a non-embedded array, you pass the field and value
you want to an array helper method. 

For embedded arrays, you must pass the field and a document that
represents an embedded array to the following array helper methods:

- ``pull()``, which removes all embedded arrays with the values in the document
- ``push()``, which appends the document to the array regardless if it exists
- ``addToSet()`` , which appends the document to an array if the document is not already present

Example
~~~~~~~

The following example adds a document to the ``instock`` array where the
``qty`` is "11" and ``warehouse`` is "D" by: 

- Creating a document where ``qty`` is "11" and ``warehouse`` is "D"
- Using the ``push()`` method to add the document

.. literalinclude:: /includes/fundamentals/code-snippets/UpdateArray.java
   :language: java
   :dedent:
   :start-after: begin pushElementsExample
   :end-before: end pushElementsExample
   :emphasize-lines: 2

Your output should look something like this:

.. code-block:: json
   :copyable: false

    { "_id": 1, 
      "color": "green", 
      "instock": [
        { "qty": 8, "warehouse": ["A", "E"] }, 
        { "qty": 13, "warehouse": ["B", "C"] }, 
        { "qty": 15, "warehouse": ["B", "F"] }, 
        { "qty": 11, "warehouse": ["D"] } ]}

Matching the First Array Element
--------------------------------

To update the first element that matches your query filter, use the
positional ``$`` operator. 

This positional operator references the array matched by the query
filter and cannot reference a nested array. If you want to access a
nested array, use the :ref:`filtered positional operator <filtered_positional_operator>`. 

Example
~~~~~~~

The following example filters for the first embedded arrays where "B" is
in the ``warehouse`` array and decrements the ``qty`` field by "3" by:

- Querying for embedded arrays where "B" exists in warehouses
- Using the ``inc()`` method with a positional ``$`` operator

.. literalinclude:: /includes/fundamentals/code-snippets/UpdateArray.java
   :language: java
   :dedent:
   :start-after: begin updateValueExample
   :end-before: end updateValueExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

    { "_id": 1, 
      "color": "green", 
      "instock": [
        { "qty": 8, "warehouse": ["A", "E"] }, 
        { "qty": 10, "warehouse": ["B", "C"] }, 
        { "qty": 15, "warehouse": ["B", "F"] } ]}

Matching All Array Elements
---------------------------

To update each embedded array in the document, use the all positional
``$[]`` operator. 

Example
~~~~~~~

The following example increments the ``qty`` field for each embedded
array by "5" by: 

- Using the ``inc()`` method with an all positional operator

.. literalinclude:: /includes/fundamentals/code-snippets/UpdateArray.java
   :language: java
   :dedent:
   :start-after: begin updateAllElementsExample
   :end-before: end updateAllElementsExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

    { "_id": 1, 
      "color": "green", 
      "instock": [
        {"qty": 13, "warehouse": ["A", "E"]}, 
        {"qty": 18, "warehouse": ["B", "C"]}, 
        {"qty": 20, "warehouse": ["B", "F"]} ]}

.. _filtered_positional_operator:

Filtered Positional Operator
----------------------------

To update certain embedded arrays in a document, specify a
``UpdateOptions.arrayFilters`` condition and use the filtered positional
``$[<identifier>]`` operator. 

The ``<identifier>`` is the placeholder value you give to represent an
element of the array field. This value is the prefix of the array
variable in your ``arrayFilters``. 

.. note::

    The <identifier> must begin with a lowercase letter and contain only
    alphanumeric characters.

Example
~~~~~~~

The following example removes "B" from the ``warehouse`` array in each
embedded array by:

- Setting a ``UpdateOptions.arrayFilters`` condition to search for "B"
 in the warehouse array
- Using the ``pull()`` method with a filtered positional operator to remove "B"

.. literalinclude:: /includes/fundamentals/code-snippets/UpdateArray.java
   :language: java
   :dedent:
   :start-after: begin updateValueExample
   :end-before: end updateValueExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

    {  "_id": 1, 
      "color": "green", 
      "instock": [
        { "qty": 8, "warehouse": ["A", "E"] }, 
        { "qty": 13, "warehouse": ["C"] }, 
        { "qty": 15, "warehouse": ["F"] } ]}

Summary
-------

There are three positional operators that can specify which embedded
array to update:

- ``$`` updates the first embedded array that matches your query filter
- ``$[]`` updates all embedded arrays that match your query filter
- ``$[<identifier>]`` updates the embedded arrays that match your ``UpdateOptions.arrayFilters`` condition

Additional Resources
--------------------

For additional information on the classes and methods mentioned on this
page, see the following resources: 

API Documentation
~~~~~~~~~~~~~~~~~

- :java-docs:`updateOne() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,org.bson.conversions.Bson)>>`
- :java-docs:`updateMany() <apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,org.bson.conversions.Bson)>`
- :java-core-api:`push() <com/mongodb/client/model/Updates.html#push(java.lang.String,TItem)>`
- :java-core-api:`pull() <com/mongodb/client/model/Updates.html#pull(java.lang.String,TItem)>`
- :java-core-api:`addToSet() <com/mongodb/client/model/Updates.html#addToSet(java.lang.String,TItem)>`

Further Explanation From Our Manual
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :manual:`Dot Notation </core/document/#std-label-document-dot-notation>`
- :manual:`Positional $ Operator </reference/operator/update/positional>`
- :manual:`Positional $[] Operator </reference/operator/update/positional-all/>`
- :manual:`Positional $[\<identifier\>] Operator </reference/operator/update/positional-filtered/>`

Other Doc's Pages
~~~~~~~~~~~~~~~~~

- :doc:`Update a Document </usage-examples/updateOne>` 
- :doc:`Update Multiple Documents </usage-examples/updateMany>`
- :doc:`Updates builders </fundamentals/builders/updates>`
