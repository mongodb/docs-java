=================
Insert Operations
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you will learn how to insert documents into MongoDB. 

You can use MongoDB to retrieve, update and delete information. To
perform any of those operations, that information, such as user profiles
and orders, needs to exist in MongoDB. For that information to exist,
you need to first perform an insert operation.

An insert operation inserts a single or multiple documents in MongoDB
using the  ``insertOne()``, ``insertMany()`` and ``bulkWrite()``
methods. 

The following sections focus on ``insertOne()`` and
``insertMany()``. For information on how to use the ``bulkWrite()``
method, see our ``Bulk Operations <TODO>`` page. 

Uniqueness
----------

MongoDB expects all documents to be unique. To achieve this, the
``_id`` field acts like the primary key.

Typically, the ``_id`` field should be one type. Although MongoDB allows
you to have multiple types in a collection, this weakens your mechanism
for uniqueness. You can address this by providing the same type for
``_id`` or by omitting the ``_id`` field to let MongoDB automatically
generate unique values. 

A unique ``_id`` from the driver should look something like this:

.. code-block:: json
   :copyable: false

   "_id": { "$oid": "60905ef9865e2105ceb7f7b8" }

If your ``_id`` isn't unique, the insertion fails and a ``writeError``
occurs. 
 
Insert a Single Document
------------------------

Use the ``insertOne()`` method when you want to insert a single
document. This method inserts a single document if the ``_id`` is
unique. 

If the insertion is successful, the method returns an
``InsertOneResult`` instance representing the ``_id`` of the new
document. 

Example
~~~~~~~

The following example creates and inserts a document using the
``insertOne()`` method: 

.. literalinclude:: /includes/fundamentals/code-snippets/Insert.java
   :language: java
   :dedent:
   :start-after: begin insertOneExample
   :end-before: end insertOneExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

   Inserted a document with the following id: 1

Insert Multiple Documents
-------------------------

Use the ``insertMany()`` method when you want to insert multiple
documents. This method inserts documents in the order you list the
documents and stops inserting at the first document with a duplicated
``_id``. 

For example, assume you have the following documents:

.. code-block:: json

   { "_id": 5, "color": "red", "qty": 5 }
   { "_id": 5, "color": "purple", "qty": 10 }
   { "_id": 6, "color": "yellow", "qty": 3 }

If you insert these documents, a ``writeError`` occurs and only the
document where the ``color`` is "red" appears in your collection. 

If the insertion is successful for all the documents, the method returns
an ``InsertManyResult`` instance representing the ``_id`` of each new
document. 

Example
~~~~~~~

The following example creates and adds two documents to a ``List`` , and
inserts the ``List`` using the ``insertMany()`` method: 

.. literalinclude:: /includes/fundamentals/code-snippets/Insert.java
   :language: java
   :dedent:
   :start-after: begin insertManyExample
   :end-before: end insertManyExample

Your output should look something like this:

.. code-block:: json
   :copyable: false

   Inserted documents with the following ids: [1, 2]  

Summary
-------

An insert operation is the first step you perform in MongoDB. After
performing this operation, you can perform other operations such as
retrieving, updating and deleting. 

There are three ways to perform an insert operation, but we focused on two:

- The ``insertOne()`` method inserts a single document.
- The ``insertMany()`` method inserts multiple documents.

For both methods, MongoDB expects all documents to have a unique ``_id``
field. If this field is not unique, the insertion fails and a
``writeError`` occurs. To guarantee uniqueness, you can provide the same
type for ``_id`` or omit the field to let the driver automatically
generate unique values. 

If the insertion is successful, both methods return an instance
representing the ``_id`` of each new document.

Additional Resources
--------------------

For additional information on the classes and methods mentioned on this
page, see the following resources: 

API Documentation
~~~~~~~~~~~~~~~~~

- :java-sync-api:`insertOne() <com/mongodb/client/MongoCollection.html#insertOne(TDocument)>` 
- :java-sync-api:`insertMany() <com/mongodb/client/MongoCollection.html#insertMany>`
- :java-docs:`InsertOneResult <apidocs/mongodb-driver-core/com/mongodb/client/result/InsertOneResult.html>`
- :java-docs:`InsertManyResult <apidocs/mongodb-driver-core/com/mongodb/client/result/InsertManyResult.html>`

Further Explanation From Our Manual
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :manual:`insertOne() </reference/method/db.collection.insertOne/>`
- :manual:`insertMany() </reference/method/db.collection.insertMany/>`

Runnable Examples
~~~~~~~~~~~~~~~~~

- :doc:`Insert a Document </usage-examples/insertOne>` 
- :doc:`Insert Multiple Documents </usage-examples/insertMany>`
