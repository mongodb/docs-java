======
GridFS
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This guide shows you how to store and retrieve large files in MongoDB using
**GridFS**. GridFS is a specification implemented by the driver that describes
how to split files into chunks to store them and reassemble them to retrieve
them. The driver implementation of GridFS is an abstraction that manages the
operations and organization of the file storage.

You should use GridFS if the size of your files exceed the BSON document limit
of 16MB. For more information on whether GridFS is suitable for your use case,
see the :manual:`GridFS server manual page </core/gridfs>`.

See the following sections which describe GridFS operations and how to perform
them:

- :ref:`Create a GridFS bucket <gridfs-create-bucket>`
- :ref:`Store Files <gridfs-store-files>`
- :ref:`Retrieve File Information <gridfs-retrieve-file-info>`
- :ref:`Download Files <gridfs-download-files>`
- :ref:`Rename Files <gridfs-rename-files>`
- :ref:`Delete Files <gridfs-delete-files>`

How GridFS Works
----------------

GridFS organizes files in a **bucket**, a group of MongoDB collections
that contain the chunks of files and information describing them. The
bucket contains the following collections, named using the convention
defined in the GridFS specification:

- The ``chunks`` collection stores the binary file chunks.
- The ``files`` collection stores the file metadata.

When you create a new GridFS bucket, the driver creates the collections
referenced above, prefixed with the default bucket name ``fs``, unless
you specify a different name. The driver also creates an index on the
collections to ensure efficient retrieval of the files and related
metadata.

When storing files with GridFS, the driver splits the files into smaller
chunks, each represented by a separate document in the ``chunks`` collection.
It also creates a document in the ``files`` collection that contains file
metadata and references to each of the chunks. You can upload the file from
memory or from a stream. See the following diagram to see how the files are
split when uploaded to a bucket.

.. figure:: /includes/figures/GridFS-upload.png
   :alt: A diagram describing the purpose of each collection in the GridFS bucket

When retrieving files, GridFS fetches the metadata from the ``files``
collection in the specified bucket and uses the information to reconstruct
the file from documents in the ``chunks`` collection. You can read the file
into memory or output it to a stream.

.. _gridfs-create-bucket:

Create a GridFS Bucket
----------------------

To use GridFS, first create a bucket or reference an existing one on
a MongoDB database. Call the ``GridFSBuckets.create()`` helper method with
a database instance as the parameter to instantiate a ``GridFSBucket``.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start createGridFSBucket
   :end-before: end createGridFSBucket

See the :docs-java:`GridFSBuckets <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBuckets.html>`
API documentation for more information.

.. _gridfs-store-files:

Store Files
-----------

To store a file in a GridFS bucket, you can either upload it from an instance
of ``InputStream`` or write its data to a ``GridFSUploadStream``.

For either type of upload, you can specify configuration information such
as file chunk size and other field/value pairs to store as metadata. You
can specify this information on an instance of ``GridFSUploadOptions`` as
shown in the following code snippet:

.. code-block:: java

   GridFSUploadOptions options = new GridFSUploadOptions()
       .chunkSizeBytes(1048576) // 1MB chunk size
       .metadata(new Document("myField", "myValue"));

See the :java-docs:`GridFSUploadOptions <TODO>` API documentation for more
information.

See the following sections TODO

Upload a File Using InputStream
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following code snippet, you can learn how to upload a file using
an ``InputStream`` with the following ???:

- Read from the filesystem using a ``FileInputStream``
- Set the chunk size using ``GridFSUploadOptions``
- Set a custom metadata field called ``type`` to the value "zip archive"
- Upload the file, specifying the file name as "myProject.zip"
- Output the ObjectId of the stored file

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start uploadFromInputStream
   :end-before: end uploadFromInputStream

Upload a File Using OutputStream
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following code snippet, you can learn how to upload a file from
to a ``GridFSUploadStream``. The ``GridFSUploadStream`` reads data into a
buffer until it reaches the limit specified in the ``chunkSize`` setting,
and inserts it as a new chunk in the ``chunks`` collection.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start uploadFromOutputStream
   :end-before: end uploadFromOutputStream

.. _gridfs-retrieve-file-info:

Retrieve File Information
-------------------------

In this section, you can learn how to retrieve file metadata stored in the
``files`` portion of the GridFS bucket. The metadata includes information
about the file it refers to including:

- Id of the file
- Name of the file
- Length/size of the file
- Upload date and time

The following code example shows you how to retrieve and print file metadata
from all your files in a GridFS bucket:

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start findAllFiles
   :end-before: end findAllFiles

The next code example shows you how to retrieve file metadata for
a specific file by providing a query filter that matches the file id:

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start findMatchingFiles
   :end-before: end findMatchingFiles

For more information on the methods available to access the metadata, see
???.


.. _gridfs-download-files:

Download Files
--------------

You can download a file from GridFS directly to a stream or you can save it
to memory from a stream. You can specify the file to retrieve using either
the file id or file name.

If you uploaded multiple files that share the same file name, GridFS
chooses the most recently uploaded version of the file by default. Each
file uploaded with the same filename is assigned a revision number,
ordered by upload time. For example, the original file revision number is "0"
and the next most recent file revision number is "1". You can also specify
"-1" for the most recent revision of the file or "-2" for the next most
recent revision.

The following code snippet shows how you can specify the second revision
of a file in an instance of ``GridFSDownloadOptions``:

.. code-block:: java

   GridFSDownloadOptions downloadOptions = new GridFSDownloadOptions().revision(1);

For more information on the enumeration of revisions, see the API
documentation for :java-docs:`GridFSDownloadOptions <apidocs/mongodb-driver-core/com/mongodb/client/gridfs/model/GridFSDownloadOptions.html>`.

Download a File to a Stream
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can download a file in a GridFS bucket to an output stream. The following
code example shows you how you can call the ``downloadToStream()`` method to
download the first revision of the file named "myProject.zip" to an
``OutputStream``.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start downloadToStream
   :end-before: end downloadToStream

Download a File to Memory
~~~~~~~~~~~~~~~~~~~~~~~~~

You can download a file in a GridFS bucket into memory by using an input
stream. You can call the ``openDownloadStream()`` method on the GridFS
bucket to open a ``GridFSDownloadStream``, an input stream from which you
can read the file.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start downloadToMemory
   :end-before: end downloadToMemory

.. _gridfs-rename-files:

Rename Files
------------

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start renameFile
   :end-before: end renameFile

.. _gridfs-delete-files:

Delete Files
------------

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start deleteFile
   :end-before: end deleteFile

Additional Resources
--------------------

- Runnable example
  `GridFSTour.java <https://github.com/mongodb/mongo-java-driver/blob/master/driver-sync/src/examples/gridfs/GridFSTour.java>`__
  from the MongoDB Java Driver repository.

