======
GridFS
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This guide shows you how to store and retrieve large files in MongoDB using
**GridFS**. GridFS is a specification implemented by the driver that describes
how to split files into chunks when storing them and reassemble them when
retrieving them. The driver implementation of GridFS is an abstraction that
manages the operations and organization of the file storage.

You should use GridFS if the size of your files exceed the BSON document
size limit of 16MB. For more detailed information on whether GridFS is
suitable for your use case, see the :manual:`GridFS server manual page </core/gridfs>`.

See the following sections which describe GridFS operations and how to
perform them:

- :ref:`Create a GridFS bucket <gridfs-create-bucket>`
- :ref:`Store Files <gridfs-store-files>`
- :ref:`Retrieve File Information <gridfs-retrieve-file-info>`
- :ref:`Download Files <gridfs-download-files>`
- :ref:`Rename Files <gridfs-rename-files>`
- :ref:`Delete Files <gridfs-delete-files>`
- :ref:`Delete a GridFS bucket <gridfs-delete-bucket>`

How GridFS Works
----------------

GridFS organizes files in a **bucket**, a group of MongoDB collections
that contain the chunks of files and information describing them. The
bucket contains the following collections, named using the convention
defined in the GridFS specification:

- The ``chunks`` collection stores the binary file chunks.
- The ``files`` collection stores the file metadata.

When you create a new GridFS bucket, the driver creates the collections
referenced above, prefixed with the default bucket name ``fs``, unless
you specify a different name. The driver also creates an index on each
collection to ensure efficient retrieval of the files and related
metadata. For more information on GridFS indexes, see our server manual
page on :manual:`GridFS Indexes </core/gridfs/#gridfs-indexes>`.

When storing files with GridFS, the driver splits the files into smaller
chunks, each represented by a separate document in the ``chunks`` collection.
It also creates a document in the ``files`` collection that contains file
metadata and references to each of the chunks. You can upload the file from
memory or from a stream. See the following diagram to see how the files are
split when uploaded to a bucket.

.. figure:: /includes/figures/GridFS-upload.png
   :alt: A diagram that shows how a file is uploaded to a GridFS bucket

When retrieving files, GridFS fetches the metadata from the ``files``
collection in the specified bucket and uses the information to reconstruct
the file from documents in the ``chunks`` collection. You can read the file
into memory or output it to a stream.

.. _gridfs-create-bucket:

Create a GridFS Bucket
----------------------

To use GridFS, first create a bucket or reference an existing one on
a MongoDB database. Call the ``GridFSBuckets.create()`` helper method with
a database instance as the parameter to instantiate a ``GridFSBucket``.
You can use the ``GridFSBucket`` instance to call read and write operations on 
your bucket.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start createGridFSBucket
   :end-before: end createGridFSBucket

For more 
See the :java-docs:`GridFSBuckets <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBuckets.html>`
API documentation for more information.


:java-docs:`GridFSBucket <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html>`


.. _gridfs-store-files:

Store Files
-----------

To store a file in a GridFS bucket, you can either upload it from an instance
of ``InputStream`` or write its data to a ``GridFSUploadStream``.

For either type of upload, you can specify configuration information such
as file chunk size and other field/value pairs to store as metadata. You
can specify this information on an instance of ``GridFSUploadOptions`` as
shown in the following code snippet:

.. code-block:: java

   GridFSUploadOptions options = new GridFSUploadOptions()
       .chunkSizeBytes(1048576) // 1MB chunk size
       .metadata(new Document("myField", "myValue"));

See the :java-docs:`GridFSUploadOptions <apidocs/mongodb-driver-core/com/mongodb/client/gridfs/model/GridFSUploadOptions.html>`
API documentation for more information.

See the following sections TODO

Upload a File Using InputStream
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This section shows you how to upload a file to a GridFS bucket using an input
stream. The code example below shows how you can use a ``FileInputStream`` to
read data from a file in your filesystem by performing the following
operations:

- Read from the filesystem using a ``FileInputStream``.
- Set the chunk size using ``GridFSUploadOptions``.
- Set a custom metadata field called ``type`` to the value "zip archive".
- Upload the file, specifying the file name as "myProject.zip".
- Output the ObjectId of the stored file.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start uploadFromInputStream
   :end-before: end uploadFromInputStream

:java-docs:`uploadFromStream <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#uploadFromStream(java.lang.String,java.io.InputStream,com.mongodb.client.gridfs.model.GridFSUploadOptions)>`

Upload a File Using OutputStream
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This section shows you how to upload a file to a GridFS bucket by writing to
an output stream. The code example below shows how you can write to a
``GridFSUploadStream`` to send data to GridFS by performing the following
operations:

- Read a file from the filesystem into a byte array.
- Set the chunk size using ``GridFSUploadOptions``.
- Set a custom metadata field called ``type`` to the value "zip archive".
- Write the bytes to a ``GridFSUploadStream``. The stream reads data into
  a buffer until it reaches the limit specified in the ``chunkSize``
  setting, and inserts it as a new chunk in the ``chunks`` collection.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start uploadFromOutputStream
   :end-before: end uploadFromOutputStream

apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSUploadStream.html

.. _gridfs-retrieve-file-info:

Retrieve File Information
-------------------------

In this section, you can learn how to retrieve file metadata stored in the
``files`` portion of the GridFS bucket. The metadata includes information
about the file it refers to including:

- Id of the file
- Name of the file
- Length/size of the file
- Upload date and time

TODO: mention the Consumer interface; iterates over GridFSIterable

The following code example shows you how to retrieve and print file metadata
from all your files in a GridFS bucket:

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start findAllFiles
   :end-before: end findAllFiles

The next code example shows you how to retrieve and print the file names
for all files that match the metadata fields specified in the query filter:

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start findMatchingFiles
   :end-before: end findMatchingFiles

For more information on the classes and methods mentioned in this section,
see the following API documentation:

- :java-docs:`GridFSFindIterable <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSFindIterable.html>`
- :java-docs:`GridFSBucket.find() <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#find(org.bson.conversions.Bson)>`

.. _gridfs-download-files:

Download Files
--------------

You can download a file from GridFS directly to a stream or you can save it
to memory from a stream. You can specify the file to retrieve using either
the file id or file name.

File Revisions
~~~~~~~~~~~~~~

When your bucket contains multiple files that share the same file name,
GridFS chooses the most recently uploaded version of the file by default.
To differentiate between each file that shares the same name, GridFS
assigns files that share the same filename a revision number, ordered by
upload time.

The original file revision number is "0" and the next most recent file
revision number is "1". You can also specify negative values which
correspond to the recency of the revision. The revision value "-1"
references the most recent revision and "-2" references the next most
recent revision.

The following code snippet shows how you can specify the second revision
of a file in an instance of ``GridFSDownloadOptions``:

.. code-block:: java

   GridFSDownloadOptions downloadOptions = new GridFSDownloadOptions().revision(1);

For more information on the enumeration of revisions, see the API
documentation for :java-docs:`GridFSDownloadOptions <apidocs/mongodb-driver-core/com/mongodb/client/gridfs/model/GridFSDownloadOptions.html>`.

Download a File to a Stream
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can download a file in a GridFS bucket to an output stream. The following
code example shows you how you can call the ``downloadToStream()`` method to
download the first revision of the file named "myProject.zip" to an
``OutputStream``.

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start downloadToStream
   :end-before: end downloadToStream

For more information on this method, see the
:java-docs:`downloadToStream() <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#downloadToStream(java.lang.String,java.io.OutputStream,com.mongodb.client.gridfs.model.GridFSDownloadOptions)>`
API documentation.

Download a File to Memory
~~~~~~~~~~~~~~~~~~~~~~~~~

You can download a file in a GridFS bucket to memory by using an input
stream. You can call the ``openDownloadStream()`` method on the GridFS
bucket to open a ``GridFSDownloadStream``, an input stream from which you
can read the file.

The following code example shows you how to download a file referenced by
the ``fileId`` variable into memory:

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start downloadToMemory
   :end-before: end downloadToMemory

.. _gridfs-rename-files:

For more information on this method, see the
:java-docs:`openDownloadStream()
<apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#openDownloadStream(java.lang.String,com.mongodb.client.gridfs.model.GridFSDownloadOptions)>`.
API documentation.

Rename Files
------------

You can update the name of a GridFS file in your bucket by calling the
``rename()`` method. You must specify the file that you are renaming by the
value of its file id rather than its file name.

.. note::

   The ``rename()`` method only supports updating a single file name. To
   rename multiple files, retrieve a full list of files in the bucket, extract
   the file id values from the files you want to rename, and pass each file id
   in separate calls to the ``rename()`` method.

The code example below shows you how to update the name of the file referenced
by the ``fileId`` variable to "mongodbTutorial.zip":

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start renameFile
   :end-before: end renameFile

For more information on this method, see the
:java-docs:`rename() <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#rename(org.bson.types.ObjectId,java.lang.String)>`
API documentation.

.. _gridfs-delete-files:

Delete Files
------------

You can remove a file from your GridFS bucket by calling the ``delete()``
method. You must specify the file by the value of its file id rather than
its file name.

.. note::

   The ``delete()`` method only supports deleting one file at a time. To
   delete multiple files, retrieve a full list of files in the bucket, extract
   the file id values from the files you want to delete, and pass each file id
   in separate calls to the ``delete()`` method.

The code example below shows you how to delete the file referenced by the
``fileId`` variable:

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start deleteFile
   :end-before: end deleteFile

For more information, see the
:java-docs:`delete() <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#delete(org.bson.types.ObjectId)>`
API documentation.

.. _gridfs-delete-bucket:

Delete a GridFS Bucket
----------------------

.. literalinclude:: /includes/fundamentals/code-snippets/GridFSOperations.java
   :language: java
   :dedent:
   :start-after: start dropBucket
   :end-before: end dropBucket

:java-docs:`drop() <apidocs/mongodb-driver-sync/com/mongodb/client/gridfs/GridFSBucket.html#drop()>`


Additional Resources
--------------------

- `MongoDB GridFS specification <https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst>`__
- Runnable example
  `GridFSTour.java <https://github.com/mongodb/mongo-java-driver/blob/master/driver-sync/src/examples/gridfs/GridFSTour.java>`__
  from the MongoDB Java Driver repository.

