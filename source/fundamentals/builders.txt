========
Builders
========

.. default-domain:: mongodb

.. toctree::

   /fundamentals/builders/aggregates
   /fundamentals/builders/filters
   /fundamentals/builders/indexes
   /fundamentals/builders/projections
   /fundamentals/builders/sort
   /fundamentals/builders/updates

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This section includes guides on how to use each of the available builders, and demonstrates the utility the Java driver
builder classes provide.

Overview
--------

The Java driver provides classes to make it easier to use CRUD operations and the Aggregation API. The static utility methods
allow you to build a query more succinctly.


Imagine we want to send a marketing email to all users in our users collection that identify as "female" gender and are older than "29".
We only need their email address, so we'll ensure our query doesn't return data we pay bandwidth
costs for but don't need.

Using JSON and the MongoDB shell, the query would look something like:

.. code-block:: js

   collection.find({ "gender": "female", "age" : { "$gt": 29 }}, { "_id": 0, "email": 1 })

Without builders, we construct the query in Java as:

.. code-block:: java

   Bson filter = new Document().append("gender", "female").append("age", new Document().append("$gt", 28));
   Bson projection = new Document().append("_id", 0).append("email", 1);
   collection.find(filter).projection(projection);

With builders, the query becomes:

.. code-block:: java

   import static com.mongodb.client.model.Filters.*;
   import static com.mongodb.client.model.Projections.*;
   ...

   Bson filter = and(eq("gender", "female"), gt("age", 29));
   Bson projection = fields(excludeId(), include("email"));
   collection.find(filter).projection(projection);

Available Builders
------------------

- :ref:`Filters <filters-builders>` for building query filters.
- :ref:`Projections <projections-builders>` for building projections.
- :ref:`Sorts <sorts-builders>` for building sort criteria.
- :ref:`Updates <updates-builders>` for building updates.
- :ref:`Aggregates <aggregates-builders>` for building aggregation pipelines.
- :ref:`Indexes <indexes-builders>` for creating index keys.
