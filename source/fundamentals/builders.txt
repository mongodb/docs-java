========
Builders
========

.. default-domain:: mongodb

.. toctree::

   /fundamentals/builders/aggregates
   /fundamentals/builders/filters
   /fundamentals/builders/indexes
   /fundamentals/builders/projections
   /fundamentals/builders/sort
   /fundamentals/builders/updates

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This section includes guides on how to use each of the available builders, and demonstrates the utility the Java driver
builder classes provide.

Overview
--------

The Java driver provides classes to make it easier to use CRUD
operations and the Aggregation API. The static utility methods 
allow you to build a query more efficiently.

Example
-------

Imagine we want to send a marketing email to all users in our ``users``
collection with the following criteria:

- Users that identify as "female" gender 
- Users are older than "29"

We only need their email address, so we'll ensure our query doesn't return data we pay bandwidth
costs for but don't need.

Using the MongoDB Shell
~~~~~~~~~~~~~~~~~~~~~~~

The following query shows how to perform our criteria using JSON and the MongoDB shell:

.. code-block:: js

   collection.find({ "gender": "female", "age" : { "$gt": 29 }}, { "_id": 0, "email": 1 })

Without Using Builders
~~~~~~~~~~~~~~~~~~~~~~

The following query shoes how to perform our criteria in Java without
using builders:

.. code-block:: java

   Bson filter = new Document().append("gender", "female").append("age", new Document().append("$gt", 28));
   Bson projection = new Document().append("_id", 0).append("email", 1);
   collection.find(filter).projection(projection);

Using Builders
~~~~~~~~~~~~~~

The following query shoes how to perform our criteria in Java using
builders:

.. code-block:: java

   import static com.mongodb.client.model.Filters.*;
   import static com.mongodb.client.model.Projections.*;
   ...

   Bson filter = and(eq("gender", "female"), gt("age", 29));
   Bson projection = fields(excludeId(), include("email"));
   collection.find(filter).projection(projection);

Why Use Builders?
-----------------

Using the builders class, you leverage the power of:

- The IDE to do discovery and code completion
- The Java compiler and the IDE to find errors during development

The builder classes simplify the process for Java developers to use the
CRUD API without having to refer to MongoDB reference documentation.
While coding, they can look at a Java API that is already loaded into
their IDE.

Furthermore, the IDE catches errors early on. A common error we face is
misspelling method names. When using the MongoDB shell or plain Java,
you get no visual indication of a problem and will only find it if you
run the code. But with the builder class, the IDE will underline and
give you a red bar on the right telling you something is wrong.


Available Builders
------------------

- :ref:`Filters <filters-builders>` for building query filters.
- :ref:`Projections <projections-builders>` for building projections.
- :ref:`Sorts <sorts-builders>` for building sort criteria.
- :ref:`Updates <updates-builders>` for building updates.
- :ref:`Aggregates <aggregates-builders>` for building aggregation pipelines.
- :ref:`Indexes <indexes-builders>` for creating index keys.
