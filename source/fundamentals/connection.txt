================
Connection Guide
================

.. default-domain:: mongodb

.. toctree::

   /fundamentals/connection/tls
   /fundamentals/connection/jndi

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to a MongoDB instance or
replica set deployment using the MongoDB Java driver.

For information about authenticating with a MongoDB instance,
see :doc:`Authentication </fundamentals/auth>`. To learn more about using
the driver with the Java Naming and Directory Interface (JNDI), see
:doc:`JNDI </fundamentals/connection/jndi>`. To configure TLS/SSL security
for connections to your MongoDB instance, see :doc:`TLS/SSL
</fundamentals/connection/tls>`.

.. _mongoclient:

MongoClient
-----------

Use the ``MongoClients.create()`` method to construct a
``MongoClient``. As each ``MongoClient`` represents a threadsafe pool of
connections to the database, most applications only require a single
instance of a ``MongoClient``, even across multiple threads. All resource
usage limits, such as max connections, apply to individual
``MongoClient`` instances.

.. tip::

   Always call ``MongoClient.close()`` to clean up resources when an
   instance is no longer needed.

.. _connection-uri:

Connection URI
--------------

The **connection URI** provides a set of instructions that the driver uses to
connect to a MongoDB deployment. It instructs the driver on how it should
connect to MongoDB and how it should behave while connected. The following
example explains each part of a sample connection URI:

.. figure:: /includes/figures/connection_uri_parts.png
   :alt: Connection String parts figure

In this example, we use the :manual:`Standard Connection String Format
</reference/connection-string/#std-label-connections-standard-connection-string-format>`,
``mongodb`` for the protocol. You can also use the :manual:`DNS Seed
List Connection Format </reference/connection-string/#dns-seed-list-connection-format>`,
``mongodb+srv``, if you want more flexibility of deployment and the
ability to change the servers in rotation without reconfiguring clients.

.. note::

   If your deployment is on MongoDB Atlas, see the
   :atlas:`Atlas driver connection guide </driver-connection?jmp=docs_driver_java>`
   and select Java from the language dropdown to retrieve your connection string.

The next part of the connection URI contains your credentials if you are
using a password-based authentication mechanism. Replace the value of ``user``
with your username and ``pass`` with your password. If your
authentication mechanism does not require credentials, omit this part of
the connection URI.

The next part of the connection URI specifies the hostname or IP
address, followed by the port of your MongoDB instance. In the example,
we use ``sample.host`` as the hostname and ``27017`` as the port.
Replace these values to refer to your MongoDB instance.

The last part of the connection URI contains connection options as parameters. In the
example, we set two connection options: ``maxPoolSize=20`` and
``w=majority``. For more information on connection options, skip to the
:ref:`connection-options` section of this guide.

.. _connect-atlas-java-driver:

The following code shows how you can use the sample connection URI in a client to
connect to MongoDB.

.. literalinclude:: /includes/fundamentals/code-snippets/srv.java
   :language: java
   :emphasize-lines: 17

.. _java-other-ways-to-connect:

Other Ways to Connect to MongoDB
--------------------------------

If you are connecting to a single MongoDB server instance or replica set
that is not hosted on Atlas, see the following sections to find out how to
connect.

Connect to a MongoDB Server on Your Local Machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fundamentals/localhost-connection.rst

To test whether you can connect to your server, replace the connection
string in the :ref:`Connect to MongoDB Atlas <connect-atlas-java-driver>` code
example and run it.

.. _connect-replica-set:

Connect to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~

A MongoDB replica set deployment is a group of connected instances that
store the same set of data. This configuration of instances provides data
redundancy and high data availability.

To connect to a replica set deployment, specify the hostname (or IP address)
and port numbers of one or more members of the replica set separated by commas.
By default, specifying the hostname and port number of a single MongoDB
instance only connects to the specified member of the replica set.
However, you can automatically discover and connect to all members of the
replica set in several different ways. To create a replica set connection:

- specify the name of the replica set using the ``replicaSet`` parameter

- specify the ``directConnection`` parameter with a value of ``false``

- specify multiple hosts, instead of a single host

Each of these methods causes the driver to discover any unspecified
hosts in the replica set.

The following connection string specifies three hosts in the cluster and
replica set named "myRs".

.. code-block:: none

   mongodb://host1:27017,host2:27017,host3:27017

.. _mongo-client-settings-multiple-hosts:

The following examples show how to specify multiple hosts to a ``MongoClient``
instance using either the ``ConnectionString`` or ``MongoClientSettings`` class.
Select the tab corresponding to the code snippet you would like to see:

.. tabs::

   .. tab:: ConnectionString
      :tabid: connectionstring

      .. code-block:: java

         ConnectionString connectionString = new ConnectionString("mongodb://host1:27017,host2:27017,host3:27017/");
         MongoClient mongoClient = MongoClients.create(connectionString);

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      .. code-block:: java

         ServerAddress seed1 = new ServerAddress("host1", 27017);
         ServerAddress seed2 = new ServerAddress("host2", 27017);
         ServerAddress seed3 = new ServerAddress("host3", 27017);
         MongoClientSettings settings = MongoClientSettings.builder()
                 .applyToClusterSettings(builder ->
                        builder.hosts(Arrays.asList(seed1, seed2, seed3)))
                 .build();
         MongoClient mongoClient = MongoClients.create(settings);


.. tip::

   Although it is possible to connect to a replica set deployment by
   providing only a single host, you should provide the driver with the
   full list to ensure that it is able to connect even if one host fails.

.. note::

   The :manual:`replicaSet option </reference/connection-string/#replica-set-option>`
   is not necessary to connect to a replica set, since the driver automatically
   detects and handles multiple hosts in the connection string as a
   replica set.

.. _compression:

Compression
-----------

You can compress messages passing between your MongoDB instance and the
driver. MongoDB drivers support up to three different algorithms
depending on release version:

1. `Snappy <https://google.github.io/snappy/>`__: available in MongoDB 3.4 and later.

2. `Zlib <https://zlib.net/>`__: available in MongoDB 3.6 and later.

3. `Zstandard <https://github.com/facebook/zstd/>`__: available in MongoDB 4.2 and later.

You can specify one or more compression algorithms, but the driver uses
the first compressor in the list supported by the connected
MongoDB instance.

.. note::

   Applications that require Snappy or Zstandard compression must
   :ref:`add explicit dependencies <compression-dependencies>` for those
   algorithms.

.. _enable-compression:

Enable Compression
~~~~~~~~~~~~~~~~~~

You can enable compression for the connection to your MongoDB instance
in two different ways: through a parameter in your connection string, or
using a method in the ``MongoClientSettings.Builder`` class.

.. tabs::

   .. tab:: ConnectionString
      :tabid: connectionstring

      To enable compression with a `ConnectionString
      <{+api+}/apidocs/mongodb-driver-core/com/mongodb/ConnectionString.html>`__, use the parameter ``compressors``
      in the connection string passed to
      ``MongoClients.create()``. You can specify one or more compression
      algorithms, separating multiple algorithms with commas:

      .. code-block:: java

         ConnectionString connectionString = new ConnectionString("mongodb+srv://<user>:<password>@<cluster-url>/?compressors=snappy,zlib,zstd");
         MongoClient mongoClient = MongoClients.create(connectionString);

      Specify compression algorithms using the following strings:

      - "snappy" for `Snappy <https://google.github.io/snappy/>`__ compression.

      - "zlib" for `Zlib <https://zlib.net/>`__ compression.

      - "zstd" for `Zstandard <https://github.com/facebook/zstd/>`__ compression.

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      To enable compression with
      `MongoClientSettings <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`__,
      pass the
      `compressorList() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.Builder.html#compressorList(java.util.List)>`__
      builder method a list of
      `MongoCompressor <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoCompressor.html>`__
      instances. You can specify one or more compression algorithms in the list:

      .. code-block:: java
         :emphasize-lines: 2-4

         MongoClientSettings settings = MongoClientSettings.builder()
              .compressorList(Arrays.asList(MongoCompressor.createSnappyCompressor(),
                                            MongoCompressor.createZlibCompressor(),
                                            MongoCompressor.createZstdCompressor()))
              .build();
         MongoClient client = MongoClients.create(settings);

.. _compression-dependencies:

Compression Algorithm Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The JDK supports `Zlib <https://zlib.net/>`__ compression natively, but
`Snappy <https://google.github.io/snappy/>`__ and
`Zstandard <https://github.com/facebook/zstd/>`__ depend upon open source
implementations. See
`snappy-java <https://github.com/xerial/snappy-java>`__ and
`zstd-java <https://github.com/luben/zstd-jni>`__ for details.

.. _connection-options:

Connection Options
------------------

This section explains MongoDB connection and authentication options
supported by the driver. You can pass the connection options as
parameters of the connection URI to specify the behavior of the client.

.. list-table::
   :header-rows: 1
   :widths: 20 10 20

   * - Option Name
     - Type
     - Description

   * - **minPoolSize**
     - integer
     - Specifies the minimum number of connections that must exist at
       any moment in a single connection pool.

   * - **maxPoolSize**
     - integer
     - Specifies the maximum number of connections that a connection
       pool may have at a given time.

   * - **waitQueueTimeoutMS**
     - integer
     - Specifies the maximum amount of time, in milliseconds, that a
       thread may wait for a connection to become available.

   * - **serverSelectionTimeoutMS**
     - integer
     - Specifies the maximum amount of time, in milliseconds, the driver
       will wait for server selection to succeed before throwing an
       exception.

   * - **localThresholdMS**
     - integer
     - When communicating with multiple instances of MongoDB in a replica
       set, the driver will only send requests to a server whose
       response time is less than or equal to the server with the fastest
       response time plus the local threshold, in milliseconds.

   * - **heartbeatFrequencyMS**
     - integer
     - Specifies the frequency, in milliseconds, that the driver will
       wait between attempts to determine the current state of each
       server in the cluster.

   * - **replicaSet**
     - string
     - Specifies that the :ref:`connection string <connection-uri>`
       provided includes multiple hosts. When specified, the driver
       attempts to find all members of that set.

   * - **ssl**
     - boolean
     - Specifies that all communication with MongoDB instances should
       use TLS/SSL. Superseded by the **tls** option.

   * - **tls**
     - boolean
     - Specifies that all communication with MongoDB instances should
       use TLS. Supersedes the **ssl** option.

   * - **tlsInsecure**
     - boolean
     - Specifies that the driver should allow invalid hostnames for TLS
       connections. Has the same effect as setting
       **tlsAllowInvalidHostnames** to ``true``. To configure TLS security
       constraints in other ways, use a
       :ref:`custom SSLContext <tls-custom-sslContext>`.

   * - **tlsAllowInvalidHostnames**
     - boolean
     - Specifies that the driver should allow invalid hostnames in the
       certificate for TLS connections. Supersedes
       **sslInvalidHostNameAllowed**.

   * - **connectTimeoutMS**
     - integer
     - Specifies the maximum amount of time, in milliseconds, the Java
       driver will wait for a connection to open before timing out.

   * - **socketTimeoutMS**
     - integer
     - Specifies the maximum amount of time, in milliseconds, the Java
       driver will wait to send or receive a request before timing out.

   * - **maxIdleTimeMS**
     - integer
     - Specifies the maximum amount of time, in milliseconds, the Java
       driver will allow a pooled connection to idle before closing the
       connection.

   * - **maxLifeTimeMS**
     - integer
     - Specifies the maximum amount of time, in milliseconds, the Java
       driver will continue to use a pooled connection before closing the
       connection.
   
   * - **journal**
     - boolean
     - Specifies that the driver must wait for the connected MongoDB
       instance to group commit to the journal file on disk for all writes.

   * - **w**
     - string or integer
     - Specifies the write concern. For more information on values, see
       the server documentation for the :manual:`w option
       </reference/write-concern/#w-option>`.

   * - **wtimeoutMS**
     - integer
     - Specifies a time limit, in milliseconds, for the write concern. For
       more information, see the server documentation for the
       :manual:`wtimeoutMS option </reference/connection-string/#write-concern-options>`.

   * - **readPreference**
     - string
     - Specifies the read preference. For more information on values, see
       the server documentation for the
       :manual:`readPreference option </reference/connection-string/#urioption.readPreference>`.

   * - **readPreferenceTags**
     - string
     - Specifies the read preference tags. For more information on values, see
       the server documentation for the
       :manual:`readPreferenceTags option </reference/connection-string/#urioption.readPreferenceTags>`.

   * - **maxStalenessSeconds**
     - integer
     - Specifies, in seconds, how stale a secondary can be before the
       driver stops communicating with that secondary. Not providing
       a parameter or explicitly setting it to ``-1`` indicates that there
       should be no staleness check for secondaries. The minimum value is
       either 90 seconds or the heartbeat frequency plus 10 seconds, whichever
       is greater. For more information, see the server documentation for the
       :manual:`maxStalenessSeconds option </reference/connection-string/#urioption.maxStalenessSeconds>`.

   * - **authMechanism**
     - string
     - Specifies the :doc:`authentication mechanism
       </fundamentals/auth>` that the driver should use if a credential
       was supplied. By default, the client picks the most secure
       mechanism available based on the server version. For possible
       values, see the server documentation for the
       :manual:`authMechanism option
       </reference/connection-string/#urioption.authMechanism>`.

   * - **authSource**
     - string
     - Specifies the database that the supplied credentials should be
       validated against. Defaults to ``admin``.

   * - **authMechanismProperties**
     - string
     - Specifies authentication properties for the specified authentication
       mechanism as a list of colon-separated properties and values.
       For more information, see the server documentation for
       the :manual:`authMechanismProperties option
       </reference/connection-string/#urioption.authMechanismProperties>`.

   * - **appName**
     - string
     - Specifies the name of the application provided to MongoDB instances
       during the connection handshake. Can be used for server logs and
       profiling.

   * - **compressors**
     - string
     - Specifies one or more compression algorithms that the driver
       will attempt to use to compress requests sent to the connected
       MongoDB instance. Possible values include: ``zlib``, ``snappy``,
       and ``zstd``.

   * - **zlibCompressionLevel**
     - integer
     - Specifies the degree of compression that `Zlib <https://zlib.net/>`__
       should employ to decrease the size of requests to the connected
       MongoDB instance. The level can range from ``-1`` to ``9``, with
       lower values compressing faster (but resulting in larger requests)
       and larger values compressing slower (but resulting in smaller
       requests).

   * - **retryWrites**
     - boolean
     - Specifies that the driver must retry supported write operations
       if they fail due to a network error. Defaults to ``true``.

   * - **retryReads**
     - boolean
     - Specifies that the driver must retry supported read operations
       if they fail due to a network error. Defaults to ``true``.
   
   * - **uuidRepresentation**
     - string
     - Specifies the UUID representation to use for read and write
       operations. For more information, see the the driver documentation
       for the
       `MongoClientSettings.getUuidRepresentation() method <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html#getUuidRepresentation()>`__.
   
   * - **directConnection**
     - boolean
     - Specifies that the driver must connect to the host directly.

For a complete list of options, see the
`ConnectionString <{+api+}/apidocs/mongodb-driver-core/com/mongodb/ConnectionString.html>`__
API reference page.
