==================================
Client-Side Field Level Encryption
==================================

.. default-domain:: mongodb

Client-Side Field Level Encryption (CSFLE) allows you to encrypt
specific data fields within a document with your MongoDB client application before sending the data to the server.
Starting in MongoDB 4.2 Enterprise, you can perform this client-side encryption automatically.

With CSFLE, developers encrypt fields client-side without any server-side configuration or directives. CSFLE is useful
for situations in which applications must guarantee that unauthorized parties, including server administrators, cannot
read the encrypted data.

The following is a quick introduction to CSFLE using the Java driver. For in-depth information on how CSFLE works, see
the :manual:`CSFLE reference </core/security-client-side-encryption/>` documentation. For in-depth guidance and a good
overview, see the `CSFLE Guide <https://docs.mongodb.com/drivers/security/client-side-field-level-encryption-guide>`_.

Installation
------------

To get started with CSFLE in your client application, you need
- the MongoDB Java driver
- ``libmongocrypt`` bindings
- ``mongocryptd`` if using automatic encryption (Enterprise & Atlas) if using automatic encryption

``libmongocrypt``
~~~~~~~~~~~~~~~~~

The ``libmongocrypt`` binding is available as a separate jar.

.. tabs::

   .. tab:: Maven
      :tabid: maven

      .. include:: /includes/fundamentals/code-snippets/libmongocrypt-maven-versioned.rst

   .. tab:: Gradle
      :tabid: gradle

      .. include:: /includes/fundamentals/code-snippets/libmongocrypt-gradle-versioned.rst


``mongocryptd``
~~~~~~~~~~~~~~~

``mongocryptd`` is a daemon / process used for automatic encryption. ``libmongocrypt`` communicates with ``mongocryptd``
to perform automatic encryption using information defined in user provided
:manual:`JSON Schema </reference/security-client-side-automatic-json-schema/>`.

For more detailed information on ``mongocryptd``, see
:manual:`mongocryptd reference documentation </reference/security-client-side-encryption-appendix/#mongocryptd>`


Examples
--------

Automatic Encryption and Decryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following is a sample app that inserts a document containing a single encrypted field. It assumes you already
created a data key and encrypted field schema  in MongoDB. The example uses a local key, but you can also use integrated
support for cloud key management services from AWS, Azure, and GCP. The data in the ``encryptedField`` field is
automatically encrypted before insertion and decrypted when calling ``find()`` on the client side.

You can download the code containing this snippet from
`ClientSideEncryptionSimpleTour.java <https://github.com/mongodb/mongo-java-driver/blob/master/driver-sync/src/examples/tour/ClientSideEncryptionSimpleTour.java>`_.


.. code-block:: java

   import com.mongodb.AutoEncryptionSettings;
   import com.mongodb.MongoClientSettings;
   import com.mongodb.client.MongoClient;
   import com.mongodb.client.MongoClients;
   import com.mongodb.client.MongoCollection;
   import org.bson.Document;

   import java.security.SecureRandom;
   import java.util.HashMap;
   import java.util.Map;

   public class ClientSideEncryptionSimpleTour {

       public static void main(final String[] args) {

           // This would have to be the same master key as was used to create the encryption key
           final byte[] localMasterKey = new byte[96];
           new SecureRandom().nextBytes(localMasterKey);

           Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {{
              put("local", new HashMap<String, Object>() {{
                  put("key", localMasterKey);
              }});
           }};

           String keyVaultNamespace = "admin.datakeys";

           AutoEncryptionSettings autoEncryptionSettings = AutoEncryptionSettings.builder()
                   .keyVaultNamespace(keyVaultNamespace)
                   .kmsProviders(kmsProviders)
                   .build();

           MongoClientSettings clientSettings = MongoClientSettings.builder()
                   .autoEncryptionSettings(autoEncryptionSettings)
                   .build();

           MongoClient mongoClient = MongoClients.create(clientSettings);
           MongoCollection<Document> collection = mongoClient.getDatabase("test").getCollection("coll");
           collection.drop(); // Clear old data

           collection.insertOne(new Document("encryptedField", "123456789"));

           System.out.println(collection.find().first().toJson());
       }
   }

.. note::

   Auto encryption is an **Enterprise** and **Atlas** only feature.

AutoEncryptionSettings
~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to configure the ``AutoEncryptionSettings`` instance to create a new key and set the
JSON schema map. You can download the code containing this snippet from
`ClientSideEncryptionAutoEncryptionSettingsTour.java <https://github.com/mongodb/mongo-java-driver/blob/master/driver-sync/src/examples/tour/ClientSideEncryptionAutoEncryptionSettingsTour.java>`_

.. code-block:: java

   import com.mongodb.ClientEncryptionSettings;
   import com.mongodb.ConnectionString;
   import com.mongodb.client.model.vault.DataKeyOptions;
   import com.mongodb.client.vault.ClientEncryption;
   import com.mongodb.client.vault.ClientEncryptions;
   import org.bson.BsonBinary;
   import org.bson.BsonDocument;

   import java.util.Base64;

   ...

   String keyVaultNamespace = "admin.datakeys";
   ClientEncryptionSettings clientEncryptionSettings = ClientEncryptionSettings.builder()
           .keyVaultMongoClientSettings(MongoClientSettings.builder()
                   .applyConnectionString(new ConnectionString("mongodb://localhost"))
                   .build())
           .keyVaultNamespace(keyVaultNamespace)
           .kmsProviders(kmsProviders)
           .build();

   ClientEncryption clientEncryption = ClientEncryptions.create(clientEncryptionSettings);
   BsonBinary dataKeyId = clientEncryption.createDataKey("local", new DataKeyOptions());
   final String base64DataKeyId = Base64.getEncoder().encodeToString(dataKeyId.getData());

   final String dbName = "test";
   final String collName = "coll";
   AutoEncryptionSettings autoEncryptionSettings = AutoEncryptionSettings.builder()
           .keyVaultNamespace(keyVaultNamespace)
           .kmsProviders(kmsProviders)
           .schemaMap(new HashMap<String, BsonDocument>() {{
               put(dbName + "." + collName,
                       // Need a schema that references the new data key
                       BsonDocument.parse("{"
                               + "  properties: {"
                               + "    encryptedField: {"
                               + "      encrypt: {"
                               + "        keyId: [{"
                               + "          \"$binary\": {"
                               + "            \"base64\": \"" + base64DataKeyId + "\","
                               + "            \"subType\": \"04\""
                               + "          }"
                               + "        }],"
                               + "        bsonType: \"string\","
                               + "        algorithm: \"AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic\""
                               + "      }"
                               + "    }"
                               + "  },"
                               + "  \"bsonType\": \"object\""
                               + "}"));
           }}).build();

Explicit Encryption and Decryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The prior examples demonstrated the automatic CSFLE feature. If your version of MongoDB does not offer automatic CSFLE,
you can perform CSFLE explicitly. This method does not use the ``mongocryptd`` daemon / process. The
``ClientEncryption`` class provides the mechanisms to use explicit encryption.

You can download the code containing this snippet from
`ClientSideEncryptionExplicitEncryptionAndDecryptionTour.java <https://github.com/mongodb/mongo-java-driver/tree/master/driver-sync/src/examples/tour/ClientSideEncryptionExplicitEncryptionAndDecryptionTour.java>`_

.. code-block:: java

   // This would have to be the same master key as was used to create the encryption key
   final byte[] localMasterKey = new byte[96];
   new SecureRandom().nextBytes(localMasterKey);

   Map<String, Map<String, Object>> kmsProviders = new HashMap<String, Map<String, Object>>() {{
       put("local", new HashMap<String, Object>() {{
           put("key", localMasterKey);
       }});
   }};

   MongoClientSettings clientSettings = MongoClientSettings.builder().build();
   MongoClient mongoClient = MongoClients.create(clientSettings);

   // Set up the key vault for this example
   MongoNamespace keyVaultNamespace = new MongoNamespace("encryption.testKeyVault");
   MongoCollection<Document> keyVaultCollection = mongoClient
       .getDatabase(keyVaultNamespace.getDatabaseName())
       .getCollection(keyVaultNamespace.getCollectionName());
   keyVaultCollection.drop();

   // Ensure that two data keys cannot share the same keyAltName.
   keyVaultCollection.createIndex(Indexes.ascending("keyAltNames"),
           new IndexOptions().unique(true)
              .partialFilterExpression(Filters.exists("keyAltNames")));

   MongoCollection<Document> collection = mongoClient.getDatabase("test").getCollection("coll");
   collection.drop(); // Clear old data

   // Create the ClientEncryption instance
   ClientEncryptionSettings clientEncryptionSettings = ClientEncryptionSettings.builder()
           .keyVaultMongoClientSettings(MongoClientSettings.builder()
                   .applyConnectionString(new ConnectionString("mongodb://localhost"))
                   .build())
           .keyVaultNamespace(keyVaultNamespace.getFullName())
           .kmsProviders(kmsProviders)
           .build();

   ClientEncryption clientEncryption = ClientEncryptions.create(clientEncryptionSettings);

   BsonBinary dataKeyId = clientEncryption.createDataKey("local", new DataKeyOptions());

   // Explicitly encrypt a field
   BsonBinary encryptedFieldValue = clientEncryption.encrypt(new BsonString("123456789"),
           new EncryptOptions("AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic").keyId(dataKeyId));

   collection.insertOne(new Document("encryptedField", encryptedFieldValue));

   Document doc = collection.find().first();
   System.out.println(doc.toJson());

   // Explicitly decrypt the field
   System.out.println(
       clientEncryption.decrypt(new BsonBinary(doc.get("encryptedField", Binary.class).getData()))
   );

Explicit Encryption and Auto Decryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Although automatic encryption requires MongoDB 4.2 Enterprise or MongoDB Atlas running 4.2+, automatic decryption is
available in all MongoDB versions starting in 4.2.

To configure automatic decryption, set ``bypassAutoEncryption(true)`` as shown in the example code below. You can
download the full runnable class from
`ClientSideEncryptionExplicitEncryptionOnlyTour.java <https://github.com/mongodb/mongo-java-driver/blob/master/driver-sync/src/examples/tour/ClientSideEncryptionExplicitEncryptionOnlyTour.java>`_.

.. code-block:: java

   ...

   MongoClientSettings clientSettings = MongoClientSettings.builder()
       .autoEncryptionSettings(AutoEncryptionSettings.builder()
               .keyVaultNamespace(keyVaultNamespace.getFullName())
               .kmsProviders(kmsProviders)
               .bypassAutoEncryption(true)
               .build())
       .build();
   MongoClient mongoClient = MongoClients.create(clientSettings);

   ...

   // Explicitly encrypt a field
   BsonBinary encryptedFieldValue = clientEncryption.encrypt(new BsonString("123456789"),
           new EncryptOptions("AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic").keyId(dataKeyId));

   collection.insertOne(new Document("encryptedField", encryptedFieldValue));

   // Automatically decrypts the encrypted field.
   System.out.println(collection.find().first().toJson());
