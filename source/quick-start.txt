===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/quick-start/overview.rst

Set up Your Project
-------------------

Install the Java Development Kit (JDK)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/quick-start/install-jdk.rst

Create the Project
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/quick-start/create-project.rst

.. _add-mongodb-dependency:

Add MongoDB as a Dependency
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are using `Maven <https://maven.apache.org/>`__, add the following to
your ``pom.xml`` dependencies list:

.. include:: /includes/quick-start/maven-versioned.rst

If you are using `Gradle <https://gradle.org/>`__, add the following to your
``build.gradle`` dependencies list:

.. include:: /includes/quick-start/gradle-versioned.rst

Once you configure your dependencies, ensure they are available to your
project which may require running your dependency manager and refreshing
the project in your IDE.

.. note::
   You may need to configure the JDK version in your IDE and dependency
   file. Refer to the documentation provided by maintainers of your IDE
   and dependency management system.

   For example, if you build with Maven in the IntelliJ IDE, you need to
   specify your JDK version explicitly in the ``properties`` section in your
   ``pom.xml`` file. The following example instructs Maven to use JDK
   version 1.8 (Java 8):

   .. code-block:: xml

      <properties>
          <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>
      </properties>


Create a MongoDB Cluster
------------------------

.. include:: /includes/quick-start/atlas-setup.rst


Query Your MongoDB Cluster from Your Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, create a file to contain your application called ``QuickStart.java``
in the base package directory of your project. Use the following sample
code to run a query on your sample dataset in MongoDB Atlas, replacing the
value of the ``uri`` variable with your MongoDB Atlas connection string.
Ensure you replace the "<password>" section of the connection string with
the password you created for your user that has **atlasAdmin** permissions:

.. literalinclude:: /includes/quick-start/code-snippets/QuickStart.java
   :start-after: begin QuickStart
   :end-before: end QuickStart
   :language: java
   :dedent:

.. include:: /includes/quick-start/query-output.rst

After completing this step, you should have a working application that uses
the Java driver to connect to your MongoDB cluster, run a query on the
sample data, and print out the result.

Working with POJOs (Optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the previous section, you ran a query on a sample collection to retrieve
data in the map-like class ``Document``. In this section, you can learn to
use your own Plain Old Java Object (POJO) to store and retrieve data from
MongoDB.

Create a file called ``Movie.java`` in the base package directory of your
project and add the following code for a class that includes the following
fields, setters, and getters:

.. literalinclude:: /includes/quick-start/code-snippets/Movie.java
   :start-after: begin moviePojo
   :end-before: end moviePojo
   :language: java
   :dedent:

Create a new file ``QuickStartPojoExample.java`` in the same package
directory as your ``Movie`` file in your project. Use the following sample
code to run a query on your sample dataset in MongoDB Atlas, replacing the
value of the ``uri`` variable with your MongoDB Atlas connection string.
Ensure you replace the "<password>" section of the connection string with
the password you created for your user that has **atlasAdmin** permissions:

.. literalinclude:: /includes/quick-start/code-snippets/QuickStartPojoExample.java
   :start-after: begin PojoQuickstart
   :end-before: end PojoQuickstart
   :language: java
   :dedent:

.. include:: /includes/quick-start/pojo-query-output.rst

See the following links for more information on using POJOs to store and
retrieve data:

- :doc:`Guide on using POJOs to store and retrieve data</fundamentals/data-formats/document-data-format-pojo>`
- :doc:`Guide on custom serialization of POJOs </fundamentals/data-formats/pojo-customization>`

Next steps
----------

.. include:: /includes/quick-start/next-steps.rst
