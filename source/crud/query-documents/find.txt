.. _java-fundamentals-retrieve-data:

==============
Find Documents
==============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: find, findOne, findMany, get, lookup
   :description: Learn about how to retrieve data in the {+driver-long+}.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve documents from your MongoDB
database. You can find your documents by using the following:

- Retrieve a subset of documents from your collection using a :ref:`find operation <retrieve-find>`
- Perform transformations on retrieved documents from your collection using an :ref:`aggregate operation <retrieve-aggregate>`
- Monitor real-time changes to your database using :ref:`change streams <retrieve-watch>`

.. _retrieve-paint-order-collection:

Sample Data for Examples
~~~~~~~~~~~~~~~~~~~~~~~~

The following sections feature examples of how the owner of a paint
store manages their customers' orders. For each order, the owner keeps
track of the color and quantity, which corresponds to the ``color`` and
``qty`` fields in their ``paint_order`` collection:

.. code-block:: json

   { "_id": 1, "color": "purple", "qty": 10 }
   { "_id": 2, "color": "green", "qty": 8 }
   { "_id": 3, "color": "purple", "qty": 4 }
   { "_id": 4, "color": "green", "qty": 11 }

.. _retrieve-find:

Find Operation
--------------

Use the find operation to retrieve a subset of your existing data in
MongoDB. You can specify what data to return including which documents
to retrieve, in what order to retrieve them, and how many to retrieve.

To perform a find operation, call the ``find()`` method on an instance
of a ``MongoCollection``. This method searches a collection for documents that
match the query filter you provide. For more information about how to
specify a query, see our :ref:`Specify a Query
<java-query>` guide.

To retrieve a single document, you can append the ``first()`` method to your
``find()`` operation. You can use the ``sort()`` operation before selecting the first
document to help choose the correct file.

Example
~~~~~~~

The owner would like to know which orders contain greater than three, but
less than nine cans of paint from their :ref:`paint_order collection <retrieve-paint-order-collection>`.

To address this scenario, the owner finds orders to match the criteria:

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

For more information about how to build filters, see our :ref:`Filters Builders
<filters-builders>` guide.

The following shows the output of the preceding query:

.. code-block:: json
   :copyable: false

   { "_id": 2, "color": "green", "qty": 8 }
   { "_id": 3, "color": "purple", "qty": 4 }

After the owner runs this query, they find two orders that matched the
criteria.

Find Example: Full File
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/crud/example-intro.rst

The following code is a complete, standalone file that performs the following
actions:

- Calls the ``find()`` method to retrieve multiple documents that have a ``runtime`` value less than 15, applying a projection and sort to the results 
- Calls the ``find()`` and ``first()`` method to retrieve a document that has a ``title`` value of ``"The Room"``, applying a projection and sort before returning the first match 

.. io-code-block::

   .. input:: /includes/crud/Find.java
      :language: java
      :dedent:

   .. output:: 
      :language: none
      :visible: false

      Number of documents found with find(): 101

      Document found with find().first(): {"title": "The Room", "imdb": {"rating": 3.5, "votes": 25673, "id": 368226}}

.. _retrieve-aggregate:

Aggregate Operation
-------------------

Use the aggregate operation to perform the stages in an aggregation
pipeline.  An aggregation pipeline is a multi-staged transformation that
produces an aggregated result.

To perform an aggregate operation, call the ``aggregate()`` method on an
instance of a ``MongoCollection``. This method accepts aggregation
expressions to run in sequence. To perform aggregations, you can
define aggregation stages that specify how to match documents, rename
fields, and group values. For more information, see our
:ref:`Aggregation <java-aggregation>` guide and the :ref:`Aggregation Expression
Operations <java-aggregation-expression-operations>` page.

Example
~~~~~~~

The owner would like to know which paint color is the most purchased
(highest quantity sold) from their :ref:`paint_order collection <retrieve-paint-order-collection>`.

To address the scenario, the owner creates an aggregation pipeline that:

- Matches all the documents in the ``paint_order`` collection
- Groups orders by colors
- Sums up the quantity field by color
- Orders the results by highest-to-lowest quantity

.. literalinclude:: /includes/fundamentals/code-snippets/Retrieve.java
   :language: java
   :dedent:
   :start-after: begin aggregateExample
   :end-before: end aggregateExample

The following shows the output of the preceding aggregation:

.. code-block:: json
   :copyable: false

   { "_id": "green", "qty": 19 }
   { "_id": "purple", "qty": 14 }

After the owner runs the aggregation, they find that "green" is the most
purchased color.

For more information about how to construct an aggregation pipeline, see
the {+mdb-server+} manual page on :manual:`Aggregation </aggregation>`.

Additional Information
----------------------

API Documentation
~~~~~~~~~~~~~~~~~

For more information about the methods and classes used to retrieve documents
on this page, see the following API cocumentation:

- `find() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find()>`__
- `first() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#first()>`__
- `FindIterable <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html>`__
- `aggregate() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#aggregate(java.util.List)>`__

Server Manual Entries
~~~~~~~~~~~~~~~~~~~~~

- :manual:`Collections </core/databases-and-collections/#collections>`
- :manual:`Query Documents </tutorial/query-documents>`
- :manual:`Aggregation </aggregation>`
- :manual:`Aggregation stages </meta/aggregation-quick-reference/#stages>`
