===
FAQ
===

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

General
-------

Are there two versions of ``MongoClient``?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, one version of ``MongoClient`` is ``com.mongodb.MongoClient``.
This is a class that has been in the driver for a long time and supports
the following in the "modern" API:

- Configuration with ``MongoClientSettings`` and ``ConnectionString``
- CRUD API via ``MongoDatabase``, and from there, ``MongoCollection``

It also supports the following in the "legacy" API:

- Configuration with ``MongoClientOptions`` and ``MongoClientURI``
- CRUD API via ``DB``, and from there, ``DBCollection``

The other version of ``MongoClient`` is
``com.mongodb.client.MongoClient``. This is an interface that was
introduced in the 3.7 driver release and only supports the "modern" API
described above.

You can create instances of this type via factory methods defined in
the`` com.mongodb.client.MongoClients`` class. 

POJOs
-----

Do I have to specify an ID field value myself?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Imagine you have the following entity:

.. code-block:: java

   public class Entity {
      public final ObjectId id;
      public String value;

      public Entity(){ }
   }

Can the ID field be a compound key?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes. For an example of this, see `our implementation <https://github.com/niccottrell/mongo-java-tests/blob/master/src/test/PojoCompoundIdTest.java>`_

Can I use polymorphism in a POJO accessor?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, by using a discriminator.

What is the discriminator?
~~~~~~~~~~~~~~~~~~~~~~~~~~

The discriminator is for cases where you want to use inheritance, and
store multiple types of documents within the same collection or parent
document (in case you embed sub-documents). 

For example, if you have an ``Event`` class, that you extend in Java (e.g.
``MachineEvent`` or ``NetworkEvent``), using the discriminator identifies
which class the PojoCodec should use to serialize/deserialize the
document. 

Can I control serialization of ``LocalDate``?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, the 3.7 Java driver adds native support for ``JSR-310 Instant``,
``LocalDate`` & ``LocalDateTime``. 

Can I serialize a ``java.util.Date`` as a string in format **yyyy-mm-dd**?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, you can build your own codec for this class and add it to the registry. 

Add the codec to the top your registry before the ``DefaultCodecRegister``
and before the ``PojoCodecProvider``: 

.. code-block:: java

   static final CodecRegistry CODEC_REGISTRY = fromRegistries(
      CodecRegistries.fromCodecs(
                        new MyDateAsStringCodec()),
                        MongoClient.getDefaultCodecRegistry(),
                        fromProviders(pojoCodecProvider));

Can I make POJOs read/write directly to the field and not use the getters/setters at all?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can configure the PojoCodecProvider to use the
``SET_PRIVATE_FIELDS_CONVENTION``, which sets a private field via
reflection if no public setter is available.

Can I mix private, protected and public setters and getters?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

No. The native POJO codec assumes that getters/setters have the same
modifiers for each field.  

For example, the following methods throws an exception during encoding:

.. code-block:: java
   
   private String getField();
   public String setField(String x); 

How do I fix: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class X .? 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This exception means you need to register a codec for the class since
there is none at the moment. 

How do I specify the collection name for a particular POJO class? Is there an annotation?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is no annotation. We recommend adding a static in your class as shown:

.. code-block:: java

   public class Person {
      public static final String COLLECTION_NAME = "people"; 
   }

The following snippet specifies the collection name for a particular
POJO class: 

.. code-block:: java

   database.getCollection(Person.COLLECTION_NAME, Person.class);

If you are unable to find the answer to your question here, try our forums and
support channels listed in the :doc:`Issues and Help <issues-and-help>`
section.
