===
FAQ
===

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

General
-------

Why are there two types of ``MongoClient`` in the Java driver?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are two types of ``MongoClient`` because we wanted a cleaner API
for new users that didn't have the confusion of including multiple CRUD
APIs. We wanted to ensure that the new CRUD API was available in a Java
package structure that would work well with Java module support
introduced in Java 9.

Which type of ``MongoClient`` should I use?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

New applications should generally use the
``com.mongodb.client.MongoClient`` interface, which supports:

- Configuration with ``MongoClientSettings`` and ``ConnectionString``.  You can create instances of this interface via factory methods defined in the ``com.mongodb.client.MongoClients`` class.
- CRUD API using ``MongoDatabase``, and from there, ``MongoCollection``

You should use the ``com.mongodb.MongoClient`` class if you require support for the legacy API, which supports:

- Configuration with ``MongoClientOptions`` and ``MongoClientURI``
- CRUD API using ``DB``, and from there, ``DBCollection``.  You can access this API via the ``getDB()`` method.

For applications that require a mix of the new and legacy APIs, ``com.mongodb.MongoClient`` also supports:

- Configuration with ``MongoClientSettings`` and ``ConnectionString``, the only difference being that you create instances via constructors instead of a factory class.
- CRUD API using ``MongoDatabase``, and from there, ``MongoCollection``.  You can access this API via the ``getDatabase()`` method.

How do I use the ``MongoClientSettings`` class?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the ``MongoClientSettings`` class to specify configurations for
``MongoClient`` instances. To construct ``MongoClientSettings`` instances, use the
``MongoClientSettings.Builder`` class.

Here are the sections of our documentation that show how to perform different
tasks with the ``MongoClientSettings`` class:

- :ref:`Specify Multiple Hosts <mongo-client-settings-multiple-hosts>`
- :ref:`Enable TLS/SSL <tls-enable>`
- :ref:`Authenticate with Credentials <mongo-client-setting-with-mongo-credential-example>`
- :ref:`Enable Compression <enable-compression>`
- :ref:`Add Listeners For Driver and Database Events <listener-mongo-client-settings-example>`
- :ref:`Get the Default Codec Registry <get-default-codec-registry-example>`

For more information on the ``MongoClientSettings`` class, see the
`API Documentation for MongoClientSettings <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`__.

How do I fix: "javax.net.ssl.SSLHandshakeException: extension (5) should not be presented in certificate_request"?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a `known error
<https://bugs.openjdk.java.net/browse/JDK-8236039>`__ that can occur
when using the TLS 1.3 protocol with specific versions of the JDK. If
you encounter this error when connecting to your MongoDB instance or
cluster, update your JDK to one of the following patch versions or
newer:

- JDK 11.0.7
- JDK 13.0.3
- JDK 14.0.2

POJOs
-----

Do I have to specify an ID field value myself?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

No, the ``PojoCodecProvider`` automatically generates an ObjectId.

Can the ID field be a compound key?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes. For an example of this, see `our implementation <https://github.com/niccottrell/mongo-java-tests/blob/master/src/test/PojoCompoundIdTest.java>`_

Can I use polymorphism in a POJO accessor?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, by using a discriminator.

What is a discriminator?
~~~~~~~~~~~~~~~~~~~~~~~~

A discriminator is a property that identifies a specific document
schema. You can use it for inheritance and storing multiple types of
documents within the same collection or parent document (if you embed
sub-documents).

For example, if you have an ``Event`` class that you extend in Java (e.g.
``MachineEvent`` or ``NetworkEvent``), using a discriminator identifies
which class the ``PojoCodecProvider`` should use to serialize/deserialize the
document.

For more information, see our :ref:`POJO Customization guide
<pojo-discriminators>`.

Can I control serialization of ``LocalDate``?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, the 3.7 Java driver adds native support for ``JSR-310 Instant``,
``LocalDate`` & ``LocalDateTime``.

Can I serialize a ``java.util.Date`` as a string in format **yyyy-mm-dd**?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes, you can build your own codec for this class and add it to the registry.

Add the codec to the first in the list of providers, before the default codec
registry and before the ``PojoCodecProvider``:

.. literalinclude:: /includes/faq/code-snippets/FaqExample.java
   :language: java
   :emphasize-lines: 3
   :dedent:
   :start-after: start myDateAsStringCodec
   :end-before: end myDateAsStringCodec

Can I make POJOs read/write directly to the field and not use the getters/setters at all?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can configure the ``PojoCodecProvider`` to use the
``SET_PRIVATE_FIELDS_CONVENTION``, which sets a private field through
reflection if no public setter is available.

Can I mix private, protected, and public setters and getters?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

No. The native POJO codec assumes that getters/setters have the same
modifiers for each field.

For example, the following methods throws an exception during encoding:

.. code-block:: java

   private String getField();
   public String setField(String x);

How do I fix: "org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class X."?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This exception means you need to register a codec for the class since
there is none at the moment.

How do I specify the collection name for a particular POJO class? Is there an annotation?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is no annotation. We recommend adding a static string in your class as shown:

.. code-block:: java

   public class Person {
      public static final String COLLECTION_NAME = "people";
   }

The following snippet specifies the collection name for a particular
POJO class:

.. code-block:: java

   database.getCollection(Person.COLLECTION_NAME, Person.class);

Legacy API
----------

.. _faq-legacy-connection:

How do I connect to my MongoDB instance with the legacy API?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how to connect to a MongoDB instance with the
legacy API and the current API.

Imagine we are connecting to a collection that contains only this document:

.. code-block:: json
   :copyable: false

   {"_id": 1, "val": 1}

.. tabs::

   .. tab:: Legacy API
      :tabid: legacy

      .. literalinclude:: /includes/fundamentals/code-snippets/LegacyAPI.java
         :language: java
         :dedent:
         :start-after: start legacy-api-example
         :end-before: end legacy-api-example

   .. tab:: Current API
      :tabid: current

      .. literalinclude:: /includes/fundamentals/code-snippets/CurrentAPI.java
         :language: java
         :dedent:
         :start-after: start current-api-example
         :end-before: end current-api-example

The output of the preceding code snippet should look like this:

.. code-block:: json
   :copyable: false

   {"_id": 1, "val": 1}

For more information on the legacy classes and methods used in the preceding example,
see the following API documentation pages:

- `MongoClient <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html>`__
- `DB <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DB.html>`__
- `DBCollection <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html>`__
- `DBObject <{+api+}/apidocs/mongodb-driver-core/com/mongodb/DBObject.html>`__
- `getDB() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html#getDB(java.lang.String)>`__
- `getCollection() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DB.html#getCollection(java.lang.String)>`__
- `find() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#find()>`__
- `one() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCursor.html#one()>`__

See the :ref:`Migrate from the Legacy API <java-legacy-api>` page
for a list of differences between the legacy and current API.

How do I use the legacy ``MongoClientOptions`` and ``MongoClientURI`` Classes?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here is an example showing how to use the legacy ``MongoClientOptions`` and
``MongoClientURI`` classes to set your write concern:

.. tabs::

   .. tab:: Legacy API
      :tabid: legacy

      .. literalinclude:: /includes/fundamentals/code-snippets/LegacyAPI.java
         :language: java
         :dedent:
         :start-after: start legacy-api-mongoclientoptions-example
         :end-before: end legacy-api-mongoclientoptions-example

   .. tab:: Current API
      :tabid: current

      .. literalinclude:: /includes/fundamentals/code-snippets/CurrentAPI.java
         :language: java
         :dedent:
         :start-after: start current-api-mongoclientsettings-example
         :end-before: end current-api-mongoclientsettings-example

For more information on the legacy classes and methods used in the preceding example,
see the following API Documentation pages:

- `Legacy API documentation <{+api+}/apidocs/mongodb-driver-legacy/index.html>`__
- `MongoClient <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html>`__
- `MongoClientOptions <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClientOptions.html>`__
- `MongoClientURI <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClientURI.html>`__

See the :ref:`Migrate from the Legacy API <java-legacy-api>` page for a list
of differences between the legacy and current API.

Support
-------

If you are unable to find the answer to your question here, try our forums and
support channels listed in the :doc:`Issues and Help <issues-and-help>`
section.
