.. _java-csot:

===========================
Limit Server Execution Time
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: error, blocking, thread, task, code example

Overview
--------

When you use the {+driver-short+} to perform a server operation, you can also
limit the amount of time in which the server can finish the operation. To do so,
specify a **client-side operation timeout (CSOT)**. The timeout applies to all
steps needed to complete the operation, including server selection, connection
checkout, and server-side execution. When the timeout expires, the
{+driver-short+} raises a timeout exception.

.. note:: Experimental Feature

   The CSOT feature is experimental and might change in future driver
   releases.

timeoutMS Option
----------------

To specify a timeout when connecting to a MongoDB deployment, set the
``timeoutMS`` connection option to the timeout length in milliseconds. You can
set the ``timeoutMS`` option in the following ways:

- Using the ``timeout()`` method from the
  ``MongoClientSettings.Builder`` class
- Setting the ``timeoutMS`` parameter in your connection string

Select from the following :guilabel:`MongoClientSettings` and
:guilabel:`Connection String` tabs to view how to set a client-level
timeout of 5 seconds by using each method:

.. tabs::

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      .. literalinclude:: /includes/connect/CSOT.java
         :language: java
         :start-after: start-mongoclientsettings
         :end-before: end-mongoclientsettings
         :dedent:
         :emphasize-lines: 3

   .. tab:: Connection String
      :tabid: connection-string

      .. literalinclude:: /includes/connect/CSOT.java
         :language: java
         :start-after: start-string
         :end-before: end-string
         :dedent:

Behavior
~~~~~~~~

The following table describes the timeout behavior corresponding to the
accepted values for ``timeoutMS``:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Value
     - Behavior

   * - Positive value
     - Sets the timeout to use for operation completion.

   * - ``0``
     - Sets an infinite timeout.

   * - ``null``
     - | Defers the timeout behavior to the following settings:
       |
       | - :manual:`waitQueueTimeoutMS </reference/connection-string-options/#mongodb-urioption-urioption.waitQueueTimeoutMS>`
         - :manual:`socketTimeoutMS </reference/connection-string-options/#mongodb-urioption-urioption.socketTimeoutMS>`   
         - :manual:`wTimeoutMS </reference/connection-string-options/#mongodb-urioption-urioption.wtimeoutMS>`
         - :manual:`maxTimeMS </reference/method/cursor.maxTimeMS/>` *(deprecated)*
         - `maxCommitTimeMS <{+core-api+}/com/mongodb/TransactionOptions.Builder.html#maxCommitTime(java.lang.Long,java.util.concurrent.TimeUnit)>`__ *(deprecated)*
       |
       | When the CSOT feature is no longer experimental, all the
         preceding options will be deprecated.

If you specify the ``timeoutMS`` option, the driver automatically applies the
specified timeout for each server operation. The following code example specifies
a timeout of 5 seconds at the client level, and then calls the
``MongoCollection.insertOne()`` method:

.. literalinclude:: /includes/connect/CSOT.java
   :language: java
   :start-after: start-operation-timeout
   :end-before: end-operation-timeout
   :dedent:

Timeout Inheritance
~~~~~~~~~~~~~~~~~~~

When you specify the ``timeoutMS`` option, the driver applies the timeout
according to the same inheritance behaviors as the other {+driver-short+} options.
The following table describes how the timeout value is inherited at each level:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Level
     - Inheritance Description

   * - Operation
     - Takes the highest precedence and will override ``timeoutMS``
       options set at any other level.

   * - Transaction
     - Takes precedence over ``timeoutMS`` set at the session,
       collection, database, or client level.

   * - Session
     - Applies to all transactions and operations within
       that session, unless the option is overridden by options set at those levels.

   * - Database
     - Applies to all sessions and operations within that
       database, unless the option is overridden by options set at those levels.

   * - Collection
     - Applies to all sessions and operations on that
       collection, unless the option is overridden by options set at those levels.

   * - Client
     - Applies to all databases, collections, sessions, transactions, and
       operations within that client that do not otherwise specify
       ``timeoutMS``.

For more information on overrides and specific options, see the following
:ref:`java-csot-overrides` section.

.. _java-csot-overrides:

Overrides
---------

The {+driver-short+} supports various levels of configuration to control the
behavior and performance of database operations. 

You can specify a ``timeoutMS`` option at a lower level to override the
client-level configuration. This allows you to customize timeouts based
on the needs of individual operations.

The following example demonstrates how a collection-level timeout
configuration can override a client-level timeout configuration:

.. literalinclude:: /includes/connect/CSOT.java
   :language: java
   :start-after: start-override
   :end-before: end-override
   :dedent:
   :emphasize-lines: 10

.. _java-csot-txn:

Transactions
~~~~~~~~~~~~

When you create a new `ClientSession
<{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/ClientSession.html>`__
instance to implement a transaction, use
the ``defaultTimeout()`` method when building a ``ClientSessionOptions``
instance. You can use this option to specify the timeout to apply for
the following methods:

- `commitTransaction() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/ClientSession.html#commitTransaction()>`__
- `abortTransaction() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/ClientSession.html#abortTransaction()>`__
- `withTransaction() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/ClientSession.html#withTransaction(com.mongodb.client.TransactionBody)>`__
- `close() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/session/ClientSession.html#close()>`__

The following code demonstrates how to set the ``defaultTimeout`` when
instantiating a ``ClientSession``:

.. literalinclude:: /includes/connect/CSOT.java
   :language: java
   :start-after: start-session-timeout
   :end-before: end-session-timeout
   :dedent:

If you do not specify the ``defaultTimeout``, the driver uses the timeout
value set on the parent ``MongoClient``.

You can also set a transaction-level timeout by using the ``timeout()``
method when building a ``TransactionOptions`` instance. Setting this
option applies a timeout to all operations performed in the scope of the
transaction:

.. literalinclude:: /includes/connect/CSOT.java
   :language: java
   :start-after: start-txn-timeout
   :end-before: end-txn-timeout
   :dedent:

To learn more about transactions, see the :ref:`java-fundamentals-transactions` guide.

Client Encryption
~~~~~~~~~~~~~~~~~

When you use Client-Side Field Level Encryption (CSFLE), the driver uses the
``timeoutMS`` option to limit the time allowed for encryption and decryption
operations. You can set a timeout option for your ``ClientEncryption``
instance by using the ``timeout()`` method when building a
``ClientEncryptionSettings`` instance.

If you specify the timeout when you construct a
``ClientEncryption`` instance, it controls the lifetime of all operations
performed on that instance. If you do not provide a timeout when
instantiating ``ClientEncryption``, the instance
inherits the timeout setting from the ``MongoClient`` used in the
``ClientEncryption`` constructor.

If you set ``timeoutMS`` on both the client and directly in
``ClientEncryption``, the value provided to ``ClientEncryption`` takes
precedence.

.. _java-csot-cursor:

Cursors
-------

Cursors offer configurable timeout settings when using the CSOT feature. You can
adjust cursor handling by configuring either the cursor lifetime or cursor
iteration mode. To configure the timeout mode, use the ``timeoutMode()``
method when performing any operation that returns an ``Iterable``.

For operations that create cursors, the timeout setting can either cap the
lifetime of the cursor or be applied separately to the original
operation and all subsequent calls.

.. note:: Inherited Timeout

   Setting a cursor timeout mode requires that you set a timeout either
   in the ``MongoClientSettings``, on ``MongoDatabase``, or on
   ``MongoCollection``.

To learn more about cursors, see the :ref:`java-fundamentals-cursor` guide.

Cursor Lifetime Mode
~~~~~~~~~~~~~~~~~~~~

The cursor lifetime mode uses the timeout setting to limit the entire lifetime of a
cursor. In this mode, the initialization of the cursor and all subsequent calls
to the cursor methods must complete within the limit specified by the
timeout option. All documents must be returned within this limit.
Otherwise, the cursor's lifetime expires and a timeout error occurs.

When you close a cursor by calling the ``close()`` method, the
timeout resets for the ``killCursors`` command to ensure server-side resources are
cleaned up.

The following example shows how to set a cursor timeout to ensure that
the cursor is initialized and all documents are retrieved within the
inherited timeout:

.. literalinclude:: /includes/connect/CSOT.java
   :language: java
   :start-after: start-cursor-lifetime
   :end-before: end-cursor-lifetime
   :dedent:
   :emphasize-lines: 3

Cursor Iteration Mode
~~~~~~~~~~~~~~~~~~~~~

The cursor iteration mode sets the timeout to limit each call to
the ``next()``, ``hasNext()``, and ``tryNext()`` methods. The timeout refreshes
after each call completes. This is the default mode for all tailable cursors,
such as the tailable cursors returned by the ``find()`` method on capped
collections or change streams.

The following code example iterates over documents in the ``db.people`` collection
by using a cursor with the ``ITERATION`` timeout mode, and then retrieves
and prints the ``name`` field value for each document:

.. literalinclude:: /includes/connect/CSOT.java
   :language: java
   :start-after: start-cursor-iteration
   :end-before: end-cursor-iteration
   :dedent:
   :emphasize-lines: 3

API Documentation
-----------------

To learn more about using timeouts with the {+driver-short+}, see the following
API documentation:

- `MongoClientSettings <{+core-api+}/com/mongodb/MongoClientSettings.html>`__
- `MongoClientSettings.Builder.timeout() <{+core-api+}/com/mongodb/MongoClientSettings.Builder.html#timeout(long,java.util.concurrent.TimeUnit)>`__
- `MongoCollection.withTimeout() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#withTimeout(long,java.util.concurrent.TimeUnit)>`__
- `ClientSessionOptions.Builder.defaultTimeout() <{+core-api+}/com/mongodb/ClientSessionOptions.Builder.html#defaultTimeout(long,java.util.concurrent.TimeUnit)>`__
- `TransactionOptions.Builder.timeout() <{+core-api+}/com/mongodb/TransactionOptions.Builder.html#timeout(java.lang.Long,java.util.concurrent.TimeUnit)>`__
- `ClientEncryptionSettings.Builder.timeout() <{+core-api+}/com/mongodb/ClientEncryptionSettings.Builder.html#timeout(long,java.util.concurrent.TimeUnit)>`__
- `FindIterable.timeoutMode() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#timeoutMode(com.mongodb.client.cursor.TimeoutMode)>`__
- `TimeoutMode <{+core-api+}/com/mongodb/client/cursor/TimeoutMode.html>`__
