.. _java-connection-troubleshooting:

================================
Connection Troubleshooting Guide
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page examines common issues and offers potential solutions if you have
trouble connecting to a MongoDB instance or replica set using the
{+driver-long+}. This page only lists connection issues. If you are
having any other issues with MongoDB, consider the following resources:

- The :ref:`Frequently Asked Questions (FAQ) <java-faq>` for the Java driver
- The :ref:`Issues & Help <java-issues-and-help>` topic for information about
  reporting bugs, contributing to the driver, and additional resources
- The `MongoDB Community Forums <https://community.mongodb.com>`__ for questions,
  discussions, or general technical support

Check Connection String
~~~~~~~~~~~~~~~~~~~~~~~

The most common issue when attempting to connect to MongoDB is an invalid
connection string. Your first step in debugging connection issues should be to
verify the connection string. For more information about using connection
strings with the Java driver, see :ref:`Connection URI <connection-uri>` in the
Connection Guide.

Verify the port number in the connection string. The default port value is
``27017``, but you can configure MongoDB to communicate on another port.

If your MongoDB deployment requires authentication, your connection string
might require including a username and password.

.. note::

   If the username or password includes the following characters:

   .. code-block:: none

      : / ? # [ ] @

   those characters must be converted using `percent encoding
   <https://tools.ietf.org/html/rfc3986#section-2.1>`__.

If your MongoDB deployment is on MongoDB Atlas, you can check your connection
string by using the :ref:`Connect to MongoDB Atlas <connect-atlas-java-driver>`
code example. Make sure to replace the connection string in the example.

When connecting to a replica set, you should include all of the hosts
in the replica set in your connection string. Separate each of the hosts
in the connection string with a comma. This enables the driver to establish a
connection if one of the hosts is unreachable.

Verify User is in ``admin`` Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When connecting with authentication, you need to specify the username and
password when attempting to connect to the MongoDB deployment. If you have
verified that the connection string is accurate, your user might not be defined
in the ``admin`` database.

You can create users for each database in your collection. By default,
MongoDB uses the ``admin`` database for authentication. If your user is defined
in a different database, the driver will return an error when attempting to
connect.

You could also change the ``authSource`` in the connection string to point to
the database where the user is defined.

Configure Firewall
~~~~~~~~~~~~~~~~~~

Assuming that your MongoDB deployment uses the default port, verify that your
firewall has port ``27017`` open. This is the default port used by MongoDB.

Install Certificate
~~~~~~~~~~~~~~~~~~~

If you are using Java version 8 or earlier, you may need to manually add a
certificate to your trust store. Either use a more recent version of the JDK
or see our `Security FAQ
<https://www.mongodb.com/docs/atlas/reference/faq/security/#java-users>`__ for
information about how to add the certificate.

Fix "javax.net.ssl.SSLHandshakeException: extension (5) should not be presented in certificate_request"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a `known error <https://bugs.openjdk.java.net/browse/JDK-8236039>`__
that can occur when using the TLS 1.3 protocol with specific versions of the
JDK. If you encounter this error when connecting to your MongoDB instance or
cluster, update your JDK to one of the following patch versions or newer:

- JDK 11.0.7
- JDK 13.0.3
- JDK 14.0.2

Get Log Information for TLS/SSL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using TLS/SSL, you can use the ``-Djavax.net.debug=all`` system property
to view additional log statements. This can help when attempting to debug any
connection issues. See `the Oracle guide to debugging TLS/SSL connections
<https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html>`__
for more information.

Set ``maxConnectionTimeoutMS``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the connection is timing out before a successful connection is made to your
MongoDB deployment, try setting the value of ``maxConnectionTimeoutMS``. This
option indicates the amount of time the Java driver waits for a connection
before timing out. By default, the value is 10000. You can increase this value
or set it to ``0`` if you want the driver to never timeout.

Check the Number of Connections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each ``MongoClient`` instance supports a maximum number of concurrent open
connections in its connection pool. This is defined by the ``maxPoolSize``
configuration parameter. By default, this is set to ``100``. If there are already a
number of open connections equal to ``maxPoolSize``, the server will wait until
a connection becomes available. If this wait time exceeds the ``maxIdleTimeMS``
value, the driver will respond with an error.

Set ``maxConnectionLifeTime`` and ``maxConnectionIdleTime``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are able to initially connect, but receive a connection error during
bulk operations, consider setting ``maxConnectionLifeTime`` and
``maxConnectionIdleTime``. These parameters configure how long a connection
can be maintained with a MongoDB instance. For more information about these
parameters, see :ref:`Connection Pool Settings <mcs-connectionpool-settings>`.