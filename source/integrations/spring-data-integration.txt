.. _java-spring-data:
.. original URL: https://www.mongodb.com/developer/languages/java/java-spring-bulk-writes/

===========================================
Tutorial: Spring Data Framework Integration
===========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :description: Build an application using the Spring Data Framework and the MongoDB Java driver.
   :keywords: spring, tutorial, bulk insert, code example

Overview
--------

In this tutorial, you can learn how to use `Spring Data
MongoDB <https://spring.io/projects/spring-data-mongodb>`__ with the
{+driver-short+} to build a bulk write application. 

Spring Data MongoDB
~~~~~~~~~~~~~~~~~~~

Spring Data MongoDB is the official Spring Data ODM for MongoDB. It allows you to
interact with MongoDB by using plain old Java objects (POJOs) and repository
abstraction. It supports MongoDB-specific features like dynamic queries,
indexing, and nested document mapping while reducing boilerplate code such as
manual ``find()`` and ``update()`` calls. 

Dependency Injection
~~~~~~~~~~~~~~~~~~~~

Dependency injection (DI) is a core principle of the Spring Framework. It
allows objects, called beans, to be created and managed by the Spring container,
then injected into other beans that use them. This is distinct from typical
object-oriented development where classes are responsible for initializing and
constructing the objects they use.

For more information about dependency injection, see the `Dependency
Injection <https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html>`__
page of the Spring Framework documentation. 

The Spring Data BulkOperations Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

BulkOperations is an Spring Framework Data interface that contains a list of write 
operations that can be applied to your database. It can handle any combination of
the following operations which map to similar {+driver-long+} operations:

- ``insert``
- ``updateOne``
- ``updateMany``
- ``replaceOne``
- ``deleteOne``
- ``deleteMany``
- ``upsert``

A BulkOperation can be ordered or unordered. Ordered bulk operations run operations
sequentially, and if an error is detected, return with an error code.
Unordered operations are run in parallel, which means they are typically faster
faster. However, you must manually check if there were errors during the operations. 

For more information about bulk operations, see the following resources:

- `BulkOperations
  <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/BulkOperations.html>`__
  in the Spring Framework API documentation
- :ref:`Bulk Write Operations <java-fundamentals-bulkwrite>` in this guide 
- :manual:`Bulk Write Operations </core/bulk-write-operations/>` in the MongoDB server manual 

Tutorial
--------

You can find the completed sample app for this tutorial in the
:github:`SpringDataBulkInsert sample project
</mongodb-developer/SpringDataMongoBulkInsert>` GitHub repository. 

.. note:: Imports Not specified
   
   The import statements required for the files in the tutorial have not been included on the page. See the :github:`GitHub repository</mongodb-developer/SpringDataMongoBulkInsert>` for complete files.

Prerequisites
~~~~~~~~~~~~~

Ensure you have the following components installed and set up before you start
this tutorial:

- `Java 8 or later <https://www.oracle.com/java/technologies/downloads/>`__
- `Maven <https://maven.apache.org/>`__
- A :atlas:`MongoDB Atlas cluster </getting-started?tck=docs_driver_java>`
- A new `Spring Boot application <https://spring.io/guides/gs/spring-boot>`__ 

Add Dependencies
~~~~~~~~~~~~~~~~

Ensure that you use a Spring Data MongoDB version that is compatible with the
{+driver-long+} and Java versions you are using. For compatibility specifications, see
the `Requirements
<https://docs.spring.io/spring-data/mongodb/reference/preface.html>`__ page
of the Spring Data MongoDB documentation, and the :ref:`Compatibility
<java-compatibility-tables>` page of this guide.

.. note:: 
   
   If you used the `Spring Initializr <https://start.spring.io/>`__ or a clone of the :github:`Spring Boot sample project <spring-guides/gs-spring-boot>` to create your project, versioning compatibility has already been accounted for, and the ``spring-boot-starter-data-mongodb`` component will already be included in your ``pom.xml`` file.

Add the dependencies to your ``pom.xml``:

.. code-block:: xml

   <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-mongodb</artifactId>
      <version>3.2.5 </version>
   </dependency>
   <dependency>
      <groupId>net.datafaker</groupId>
      <artifactId>datafaker</artifactId>
      <version>2.4.3</version>
   </dependency>

The ``datafaker`` dependency is used to generate a large quantity of Product objects.

MongoClient Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

The ``MongodConfig`` class contains the configuration for the ``MongoClient``
that will allow the Spring Data framework to interact with the MongoDB server,
and sets other configuration options. For more information about configuration
options, see the :ref:`Specify Connection Options <specify-mongoclient-settings>`
page of this guide.

This application uses ``@Configuration`` annotations for classes, ``@Bean``
annotations for methods, and ``@Value`` annotations for parameter conversion.
These annotations allow the Spring IoC container to manage objects. For a
detailed explanation of these annotations, see the following sections of the
Spring Data framework guide: 

- ``@Configuration`` and ``@Bean`` annotations: `Java-based Container
  Configuration
  <https://docs.spring.io/spring-framework/docs/5.3.22/reference/html/core.html#beans-java>`__
- ``@Value`` annotations: `Using @Value
  <https://docs.spring.io/spring-framework/docs/5.3.22/reference/html/core.html#beans-value-annotations>`__ 

Create configuration and template classes to set up your MongoDB connection by adding the
following code to a ``MongoConfig.java`` file:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/MongoConfig.java
   :start-after: // start-mongoconfig
   :end-before: // end-mongoconfig
   :language: java
   :dedent:

Set the values of your connection string (``mongodb.uri``),
database name (``mongodb.database``), and bulk operation count (``documentCount``) in your ``application.properties`` file: 

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/resources/application.properties
   :start-after: # start-mongoconfig-properties
   :end-before: # end-mongoconfig-properties
   :language: console
   :dedent:

This tutorial uses a database named ``bulk``, and creates 25000 documents to save. Replace the ``<connection
string>`` placeholder with a connection string for your Atlas deployment. For
more information, see the :ref:`<java-get-started-connection-string>` section of
this guide.  

Map Your Object to a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mapping a class to a collection allows the Spring IoC container to store objects
as MongoDB documents. You can use the ``@Document`` annotation to specify which
collection a class maps to. For more information about mapping objects to MongoDB
documents, see the `Mapping Annotation Overview
<https://docs.spring.io/spring-data/mongodb/docs/current-SNAPSHOT/reference/html/#mapping-usage-annotations>`__
section of the Spring Data MongoDB documentation.

The ``@Id`` annotation in the following code indicates that the ``id`` field
maps to the ``_id`` field which is used as a unique identifier in MongoDB documents. You can choose any field of
any type, except arrays, to be the unique identifier. For more information, see
the `How the _id field is handled in the mapping layer
<https://docs.spring.io/spring-data/mongodb/reference/mongodb/mapping/mapping.html#mapping.conventions.id-field>`__
section of the Spring Data MongoDB documentation.

Create your ``Products`` class and map it to your ``products`` collection by
adding the following code to a ``Products.java`` file: 

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/Products.java
   :start-after: // start-products-class
   :end-before: // end-products-class
   :language: java
   :dedent:

The ``Products`` class includes a static method that generates an array of
``Product`` objects. You may also define getters and setters for each field.

Implement a Repository to Store Your Products
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``ProductRepository`` will manage a collection of ``Products``. 
When you implement your ``ProductRepository``, you must reference the
client creation methods defined in the ``MongoConfig`` class, which were
annotated with ``@Bean``. By using the ``@Autowired`` annotation with the
``mongoTemplate`` variable together with a constructor that includes
``mongoTemplate`` as an argument, the Spring container uses constructor
injection to inject a ``mongoTemplate`` dependency. For more information about
constructor injection, see the `Constructor-based Dependency Injection
<https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html#beans-constructor-injection>`__
section of the Spring Framework documentation. 

Create the ``ProductRepository`` class that manages a collection of ``Products``
by adding the following code to a ``ProductRepository.java`` file:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/ProductRepository.java
   :start-after: // start-productrepo
   :end-before: // end-productrepo
   :language: java
   :dedent:

The ``bulkInsertProducts()`` method uses unordered bulk inserts, which can
improve performance by not guaranteeing the order of operations. 

Perform a Bulk Operation
~~~~~~~~~~~~~~~~~~~~~~~~

The main application class triggers the ``ProductRepository`` to generate the
specified number of ``Products`` and save them to your MongoDB database. It uses
the ``@Autowired`` annotation to inject a ``ProductRepository``, and implements logging.

Add the following code to a class of the same name as your project file, and add
the following code:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/MyProjectName.java
   :start-after: // start-application
   :end-before: // end-application
   :language: java
   :dedent:

Conclusion
----------

Spring Data MongoDB provides a high-level abstraction for working with MongoDB.
It can simplify application architecture by supporting automatic dependency
injection, which eliminates the need for manual client configuration and complex
query handling. By reducing boilerplate code and supporting object-oriented data access, it can
streamline data access and promote a clear separation of concerns.

More Resources
--------------

For more information about the Spring Data Framework, see the
following resources:

- `Spring Framework Documentation <https://docs.spring.io/spring-framework/reference/>`__
- `Spring Data for MongoDB reference <https://docs.spring.io/spring-data/mongodb/reference/>`__
- `Spring Data for MongoDB API documentation <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/package-summary.html>`__

For support or to contribute to the MongoDB Community, see the `MongoDB Developer Community <https://community.mongodb.com/>`__.