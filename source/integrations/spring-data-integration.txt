.. _java-spring-data:
.. original URL: https://www.mongodb.com/developer/languages/java/java-spring-bulk-writes/

===========================================
Tutorial: Spring Data Framework Integration
===========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :description: Build an application using the Spring Data Framework and the MongoDB Java driver.
   :keywords: spring, tutorial, bulk insert, code example

Overview
--------

In this tutorial, you can learn how to use `Spring Data
MongoDB <https://spring.io/projects/spring-data-mongodb>`__ with the
{+driver-short+} to build a bulk write application. 

Spring Data MongoDB
~~~~~~~~~~~~~~~~~~~

Spring Data MongoDB is a third-party Java ORM for MongoDB. The Spring Data
project provides a familiar and consistent Spring-based programming model while
enabling MongoDB-specific features and capabilities. Spring Data MongoDB uses a
POJO-centric model for interacting with collections and writing repository-style
data access layers.  

The Spring Data BulkOperations Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

BulkOperations is an Spring Framework Data interface that contains a list of write 
operations that can be applied to your database. They can be any combination of
the following operations which map to similar {+driver-short+} operations:

- ``insert``
- ``updateOne``
- ``updateMany``
- ``replaceOne``
- ``deleteOne``
- ``deleteMany``
- ``upsert``

A BulkOperation can be ordered or unordered. Ordered operations will be applied
sequentially and if an error is detected, will return with an error code.
Unordered operations will be applied in parallel, which means they can be
faster. However, you must check if there were errors during the operations. 

For more information about bulk operations, see the following resources:

- `BulkOperations
  <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/BulkOperations.html>`__
  in the Spring Framework API documentation
- :ref:`Bulk Write Operations <java-fundamentals-bulkwrite>` in this guide 
- :manual:`Bulk Write Operations </core/bulk-write-operations/>` in the MongoDB server manual 

Tutorial
--------

You can find the completed sample app for this tutorial in the
:github:`SpringDataBulkInsert sample project
</mongodb-developer/SpringDataMongoBulkInsert>` GitHub repository. 

.. note:: Imports Not specified
   
   The import statements required for the classes in the tutorial have not been included. See the :github:`GitHub repository</mongodb-developer/SpringDataMongoBulkInsert>` for complete files.

Prerequisites
~~~~~~~~~~~~~

Ensure you have the following components installed and set up before you start
this tutorial:

- `Java 8 or later <https://www.oracle.com/java/technologies/downloads/>`__
- A MongoDB Atlas cluster
  To learn how to set up a cluster, see the :ref:`Getting Started
  <java-get-started>`__ guide for more information. 
- `Spring Boot application setup <https://spring.io/guides/gs/spring-boot>`__ 
- Maven for dependency management

Add Dependencies
~~~~~~~~~~~~~~~~

Ensure that you use a Spring Data MongoDB version that is compatible with the
{+driver-long+} and Java versions you are using. For compatibility specifications, see
the `Requirements
<https://docs.spring.io/spring-data/mongodb/reference/preface.html>`__ page
of the Spring Data MongoDB documentation, and the :ref:`Compatibility
<java-compatibility-tables>` page of this guide.

Add the dependency to your ``pom.xml``:

.. code-block:: xml

   <dependencies>
   <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-data-mongodb</artifactId>
       <version/> // Add as necessary
   </dependency>

MongoClient Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

The ``MongodConfig`` class contains the configuration for the ``MongoClient``
that will allow the Spring Data framework to interact with the MongoDB server,
and sets other configuration options. For more information about configuration
options, see the :ref:`Specify Connection Options <specify-mongoclient-settings>`
page of this guide.

This application uses ``@Configuration`` annotations for classes, ``@Bean``
annotations for methods, and ``@Value`` annotations for parameter conversion.
These annotations allow the Spring IoC container to manage objects. For a
detailed explanation of these annotations, see the following sections of the
Spring Data framework guide: 

- ``@Configuration`` and ``@Bean`` annotations: `Java-based Container
  Configuration
  <https://docs.spring.io/spring-framework/docs/5.3.22/reference/html/core.html#beans-java>`__
- ``@Value`` annotations: `Using @Value
  <https://docs.spring.io/spring-framework/docs/5.3.22/reference/html/core.html#beans-value-annotations>`__ 

Create configuration and template classes to set up your MongoDB connection by adding the
following code to a ``MongoConfig.java`` file:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/MongoConfig.java
   :start-after: // start-mongoconfig
   :end-before: // end-mongoconfig
   :language: java
   :dedent:

Ensure that your connection string (``mongodb.database``) and
database name (``mongodb.database``) are set in your environment variables. For
more information, see the :ref:`<java-get-started-connection-string>` section of
this guide.

Object to Document Mapping
~~~~~~~~~~~~~~~~~~~~~~~~~~

Mapping a class to a collection allows the Spring IoC container to store objects
as MongoDB documents. You can use the ``@Document`` annotation to specify which
collection a class maps to. For more information about mapping objects to MongoDB
documents, see the `Mapping Annotation Overview
<https://docs.spring.io/spring-data/mongodb/docs/current-SNAPSHOT/reference/html/#mapping-usage-annotations>`__
section of the Spring Data MongoDB documentation.

The ``@Id`` annotation indicates that the ``id`` field maps to the ``_id`` field
used as a unique identifier in MongoDB documents. You can choose any field of
any type, except arrays, to be the unique identifier. For more information, see
the `How the _id field is handled in the mapping layer
<https://docs.spring.io/spring-data/mongodb/reference/mongodb/mapping/mapping.html#mapping.conventions.id-field>`__
section of the Spring Data MongoDB documentation.

Create your ``Products`` class and map it to your ``products`` collection by
adding the following code to a ``Products.java`` file: 

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/Products.java
   :start-after: // start-products-class
   :end-before: // end-products-class
   :language: java
   :dedent:

You can add getters and setters for each field.

Implement a Bulk Write Method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The repository that stores your ``Products`` is implemented by two classes an
interface, and an interface implementation. This allows you to create
multiple product repositories for storing different products, while maintaining
the same basic interface.

Create a generic repository interface with a bulk inserts method by adding the
following code to a ``CustomProductsRepository.java`` file:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/CustomProductsRepository.java
   :start-after: // start-customproductsrepo
   :end-before: // end-customproductsrepo
   :language: java
   :dedent:

When you implement your products repository, you will need to reference the
client creation methods defined in the ``MongoConfig`` class, which were
annotated with ``@Bean``. By using the ``@Autowired`` annotation with the
``mongoTemplate`` variable, the Spring container uses field injection to .

Create a class that implements and customizes the ``CustomProductsRepository``
repository by adding the following code to a
``CustomProductsRepositoryImpl.java`` file:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/CustomProductsRepositoryImpl.java
   :start-after: // start-customproductsrepoimpl
   :end-before: // end-customproductsrepoimpl
   :language: java
   :dedent:

The ``bulkInsertProducts()`` method uses unordered bulk inserts, which can improve performance by not guaranteeing the order of operations.

Perform a Bulk Operation
~~~~~~~~~~~~~~~~~~~~~~~~

Create a main application class, trigger the bulk insert on startup:

.. literalinclude:: /includes/integrations/spring-data-tutorial-code/main/java/SpringDataBulkInsertApplication.java
   :start-after: // start-application
   :end-before: // end-application
   :language: java
   :dedent:

Conclusion
----------

Implementing bulk writes in Spring Boot with MongoDB significantly improves performance by minimizing database round trips. By following the steps in this tutorial, you can efficiently manage batch data operations in your applications.

More Resources
--------------

For more information about the Spring Data Framework, see the
following resources:

- `Spring Framework Documentation <https://docs.spring.io/spring-framework/reference/>`__
- `Spring Data for MongoDB reference <https://docs.spring.io/spring-data/mongodb/reference/>`__
- `Spring Data for MongoDB API documentation <https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/package-summary.html>`__

For support or to contribute to the MongoDB Community, see the `MongoDB Developer Community <https://community.mongodb.com/>`__.